%!PS-Adobe-2.0
%%Creator: dvips(k) 5.999 Copyright 2019 Radical Eye Software
%%Title: Manual QC.dvi
%%CreationDate: Fri Jan 17 23:06:57 2020
%%Pages: 19
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman17-Regular LMRoman12-Regular LMRoman12-Bold
%%+ LMRoman12-Italic
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /usr/local/bin/dvips -o "Manual QC.ps"
%+ "Manual QC.dvi"
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2020.01.17:2006
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-ts1.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmts1[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase.ts1
/.notdef
/.notdef
/.notdef
/.notdef
/quotedblbase.ts1
/.notdef
/.notdef
/twelveudash
/threequartersemdash
/cwmcapital
/arrowleft
/arrowright
/tieaccentlowercase
/tieaccentcapital
/tieaccentlowercase.new
/tieaccentcapital.new
/.notdef
/cwmascender
/blanksymbol
/.notdef
/.notdef
/.notdef
/dollar
/.notdef
/.notdef
/quotesingle.ts1
/.notdef
/.notdef
/asteriskmath
/.notdef
/comma
/hyphendbl
/period
/fraction
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/.notdef
/.notdef
/angleleft
/minus
/angleright
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/mho
/.notdef
/bigcircle
/.notdef
/Orogate
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/ohm
/.notdef
/.notdef
/.notdef
/dblbracketleft
/.notdef
/dblbracketright
/arrowup
/arrowdown
/grave.ts1
/.notdef
/born
/divorced
/died
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/leaf
/married
/musicalnote
/.notdef
/.notdef
/orogate
/.notdef
/longs
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/tildelow
/hyphendbl.alt
/breve.ts1
/caron.ts1
/hungarumlaut.ts1
/dblgrave.ts1
/dagger
/daggerdbl
/dblverticalbar
/perthousand
/bullet
/centigrade
/dollar.oldstyle
/cent.oldstyle
/florin
/colonmonetary
/won
/naira
/guarani
/peso
/lira
/recipe
/interrobang
/gnaborretni
/dong
/trademark
/permyriad
/paragraph.alt
/baht
/numero
/discount
/estimated
/openbullet
/servicemark
/quillbracketleft
/quillbracketright
/cent
/sterling
/currency
/yen
/brokenbar
/section
/dieresis.ts1
/copyright
/ordfeminine
/copyleft
/logicalnot
/published
/registered
/macron.ts1
/degree
/plusminus
/two.superior
/three.superior
/acute.ts1
/mu
/paragraph
/periodcentered
/referencemark
/one.superior
/ordmasculine
/radical
/onequarter
/onehalf
/threequarters
/Euro
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/multiply
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/divide
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 userdict       begin       /draftcopy-CurrentPage 0 def       /draftcopy-old-BOPhook
{ } def       currentdict /bop-hook  known{             /draftcopy-old-BOPhook
/bop-hook  load def       } if       /bop-hook{         draftcopy-old-BOPhook
        /draftcopy-CurrentPage draftcopy-CurrentPage 1 add def    
    draftcopy-CurrentPage 2 ge         draftcopy-CurrentPage 99999
 le         and         { gsave 200 70 translate 65 rotate        
 /Times-Roman findfont           130 1  mul scalefont setfont     
     0  0  moveto           0.90 setgray          (Norman Ruiz)  show
          grestore         } if       } def       end
 
@fedspecial end
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BEE85BA2BB40F538F55C11D50F882B739138
48C40C08476F761BDD8D791CF23DE48A9C407138837783A7A619EA936D0B6239
F72579B0E99370DA9C9AE14A6753DCA4A6667BB22C841A91A8AC118812C9BB04
9DCB608F8DC52CDD6C52BAD1A1502779B638DF933793E463238A36732C3ADACB
0EA238AB8B29F707E61583744893F2F2A1B0D13FDD0B2EEA663F57D3965694C0
DB35FBFC94B3118EE3B234AFF7BB6C64E01CBCDD5E4B65AA5ACFA2E8A0AD7187
9EFC5A05D11A6180606E79F42F69D722C98B8190EF4D2B88C75F5693C65BBBD1
02DC7A78F5FAD0B17EB23B52A549C48F7E37FD84714170CEFB37B0EED373D454
E11746C2F21BE512DE383DA77E7ABE6666DC5A8FDBF1AE8B44DEDD7C60F97CC9
CDE83E814C7DF4DFE150DB10E7E96BBA0C4F03A44E9C517EEA5EC90E50AF70AA
B831F5C39EBC50A961EE6CA0528232C3E4D77FE791437DE3FF6CE5BEB5DC4D75
4838B2415435E628A295E895B8019BAB90D7F314B4595C18B7A2BDCD5C7DA29A
5F37EF019F78CDF2F2C87A0430AEF9BF9DFCB9279A3AD2D7AA13FDD13235C6D1
08916318648507B20F4824440FC332666E5F5A99C9ACC79B6952D59C46B15862
07C5A1CF559D2ED72E787FC95B7327208EC71CFA493D49EC8A2A03707848E83F
D4D72FE9017FBACA70F73B3E3C1798A1A62A0A6F8E820ECB5FE4ACA6A493180E
0EE6F235FEA295910569FE6DD5995512562359CC821E85A52B0BE3DF46B4494D
36D844F53727F4B65D85450354F8EBCA79F4D0CFB5F9C44E2C537CC0AF4C48C1
99E9782A18BE396E177C09467EFAF26F3773067464CB460F7BC55596D411EE8F
7EB0EEC8BEC6A5578DE82101FCEE3FF27B48D9A2DF5D9A44532C11B9FD3383BF
9817F355C5BCCFF10D75DD3E43432CB3F9B7DF742C4CB44D5E0CD219175CB1D7
CEF09901038B7CF659434AA8FF66FC082DBE07AA13188633278729806A4273DE
38F3B2271C188A4F05BE2E674E3975B05D777D6B1B4021598DF9F767186C96E9
82428FE49289726FC97AB7CCA4EDCB4632D79E7008ED1E8A49229FD44F45CC0F
6CC85C210F761A23F1D55EDE81CD9A7D0EEDE17D01F0413547027923D8281A36
51C7D7C71639084E0D77352B7963829017D69513E47E2507EDD79BF25B181AD3
08D29C23074546BFD8EBF98D81D8D42F0A83A78BFEAD7F2B6BD949559B4159BE
4DABB07F7BB64332BA41E584EEA50F61F4C7048DA11D46D47B9C7A7991D1BAA8
A61764AC5EC0B4DC2BA432D7C8840351C3BD6136F0361F26BD3145C75C8379D8
55D11BAE4ED90966EEB16AC381F4F07039B6F9D7E2DE60C32D638BBDACC51CF2
2379D24C2A0780333AB3C830AD7671FED1E50936B0CE6E364B62411E6DF77D4A
4FB0A419828EB6E978C0D0DD1901FB57909918D07EA767FD3786B6EF38C81511
BA8FF4887F3EE4357A421575277CBB5D04B9536B65A0444036463015845D29DB
176899A157A76210B922C90F076D9ABF878A6EFD56BB4EE37CC61B32DC0FA9B0
00C5E6346C5D732DF9726C255825CD99C982B6A384D3544080599C565CAEA483
90E975E217AB457A7E88D94943A49C2FFA892D362C124A728BAAF587E6BBC957
E31B764127ECC5CD4D1718F1294B64643C9C5F76C2F9071A4BF4FFF2AFD7A0B0
6B3F26FB1370F107CB781E2093B59BD4F441A42C82FFC652D3C8175A258CB7D2
5BD0B8DB1CFBB22C420D71382C7E5041F3A4767522A75109FA64EEB0E9D4C99B
47FECCA8ADCC69EC71B9C6B07B09618AAC57F5BF63BD012080A4BD18DE1AB635
3B8AD44469296DD3034F3F0B29ABD81E289B58C0B3D0FE267EE0682D28DF70D3
9ABBC2B58D97BFFDD887380109216561C53A766AE5AEC33589A13F6DBEAFAF69
B753BC0DA94017AD3D196B6B5EC2D7F378B62DB43CA43C7C3935E61ACAE8325A
E85AE6F6FAE383D880E1C02E0D0450852399414A03D5792F68FBB9A796AD2042
FF89AC01843A0B408603C9832774032BB57DF31DAABB7DE1EBAE20A38DC804C2
324096CDBE4141F92DB575C1BB3E34E3C41615A138B1F2CD22830EEF021FA259
BEEDB8E53DF62FC14593FB1046F9D871047A8CAA9039893530D2DF976CFC21F0
29256B877E259B56DFFC008CCA4106A9AF77D72A0D2ED22E36A7A61269E381E2
82B42D22BEE539B252F78D43A89267D65820A5428CD87225C7FF28FDCD4FB898
A052A0B1A652BBD01337232B4F684D275FEF10E1C8DD91E5EEC0D1344D8C7579
4C620B2330FD5BB8F5BC59A60F63CB7979E480865BB73BDA7CF3C2FF259A91F1
0FE3D43BC2A56EF3A8EA79F1B0E73FD3C2544D30C23437CF9C3FF4D5AE878185
65EC5A3E0ACD13B07D4110C5EF052E53560BB180A86E2E35DC3C5A2C5527F1BF
2C13027301D54E815AD2E73DAEC24B4B105EAD1D89EE81F7216AAAB067235BE3
E0209BE7062DCA91768C2C9CB6EE2741F28F26C0F7C8D2A7C3478692CB7AC113
6868F4A544F0D25DEF0CF6A311A43A6A68E4D42CDD2484CF47C0FB3A68121F42
47262F0964034C5D6F1B058909F25BC43E76DA0DD6A25048044DE7028830360F
668CC7D1078DE9D6B13F6DECC9776D2B79AA362E40524F69A53E53B860719FF1
04040A8A9520A88021B70DB89EC4B9C642582DB27E6C1A558A25A5AEDDBEBDA6
B8EF328EA7E5E6F658D88D55F4B2AAE309BE3F1DF31CD64AD21688B2FA3BDF5E
36CFC58591E221A37996DF61AE7EAB1C061FE75A0149C4A665FBE0987834B08D
EA1708E447E0C557FAD8D550A1F61EDF75963AB9B4CE1751A5903126FD80BD49
3627782C24ED101F43DD8BCA175C6B403D486712D6978C27F2801FB8B5C631C9
A7FC4713C309364EC95DE29F6D6E1FE8C348E25D27050061080970262BA05655
0070633FDCE59227298931E2C7FC6ACCFCA617E5ADE3D0B721C751699D83EB17
EA42C0DB0FF95359E700BE2DC30F248D1BEFA38DFED27C1FA3BCF65F7C1BDAFF
8F1CB40CDD078B2B3129F158F45FE2634DAF1DF9B9024FC4784AB48D99878E0F
E8A60910519CDB5DF1C3843683898DE0071DEFE1678544FB0479468E29838365
121EAD77DB71CBA6FAE1532A43E79719F0A24AC76F9D709E512323E167B60813
64D2B04DAD50C73578F9434A856C060E479AA7E0A5C8B360F095DCF4545EBC55
591235C56A4CA40CB555A4BA1A2E7800E8EEF68112638EA01C20D5B131A84F69
448FAC91DBA6703107BE917307766C4D228197DF7A88AF558FE7EC3521DFF2A8
A577969134A4A117A55B66ADF5E0383E634C2BF5DD9E900D3D5BDE97BCEE1F3F
520881489B6514C107D7B3A613FDCC0FEA8683E7E4461F10B8C0035BB079C538
EE56D4542B303F279B2D44EEDC14642AB382A9CB0BC3FBF1AD71F8A583D9394E
B39CA2C53DE6D7F9BABA3201D6F240516D2A055394192D922641ADBEDE387552
3CDFFF0F3D85BA0F6C2BF0579C86603949393352F2F588069E8EFC3E2FC65948
69DDCD5EF076039A09CE60CDB0134B684133E74C15A992BD7256F9A19024CCC1
BA3CA7FC37419B7DCFD65C20A9711DB27CADEE6262CA0423E5B040C522F20C1A
D054345DF144731DAF74E1FF3BF7D709A6306A1357DD68DB7D7018B78B70CA82
28254079B5FB0D28629C59F8A33E136FFF172C4F46F54DF38D5D4817B34C9D41
9A7338E2C6D882463AF0C7487FD37A359B151CE698479ABD173B9543516CCFCD
518CB551334B31801CC5180C7171964C2F38CA5C17F9F48F217D5C46F7ED3F36
693FAFA4504EEC448CA962B3590313F9E3AD9DB07055924809279508587DA7A9
3B760BCDCCC2D19856FC875102D499C7FA18594224A574EB460B4D6C03B7C249
93755C51A6E030DFE394D87FF4C2AA92B696284A5BD8155A9B5CCE6FFD54A41E
F225416BAEC7C61A9DD8A5811879D5D4E49663A5CA73CA347E27BC49C7DBD28D
DB39155D7B83B7D17D92D6BDB5B0D6B3719AADE20B16F9536F1A1FB99B83BF35
C8C3C0F03DD8E221098CBC3E05C03B23DD7F3CAE82407719F13E819159309FAE
FEE5BEE91165FEEAFE31C8A721C2D46AA00C10681BA9970D09F2972B992E028F
2AE84F226220DF3A612D935980CE7CE5C9B5C57DCB317793EF802BEEA25BB7C0
D502F52BED3ACF86E27CF7F81F431383FC8F12503E8BD4BCC800B9CEDBC49C4C
34226A84DAAC6130F037242EA8FCBFA5C5280B1071CC4D1A11BEF38821122ADD
71D6CC04687732AB7F0D28CCD9B62530E836BCE00754386BDDD693C63723E5A3
5FEB2062B3FFC8CEB52386D0F43010E7625254A0EB88BBEF2F4AE8C64804DE46
B6AB94A0807026C3BDF61A1B5DF384C3FE28C017EAEB5CA8EC4897901FBAF7CF
745CB039D2D408B56CE03452944AEF2FCBF65E4BF33E2681638D194D7B7F4FDE
7B730558C056E1E29D254B334D1B33565103416158931C0F80618A05E057650C
001FBC2F97ACABC52E9DB146BAA3A8A02B7C530BED308ACE27ED19E6B2318616
3ACA97C72B75AA6ED33DEBC6282D9CC7771B40D48806F82B4B5AA65A7A9B6E99
FED552EA68A1CDB5133E5A5D0B5019F9E1D426843264201C49B4CBF25D92D7D9
97842CF3CA6DFAE437D0740605CCC9193DC2188A06D85305F4994827DD1017EE
EE54B481F061EE6C7199298E98AB125CA202B0A0F6CFEA1489C57E420E3EA2B5
45716DCEC01F7A80C3ACC17CB6A528591EF3285A648DA50996583B43EBE59F7A
A29B4339C799EA8047EDE2D516B08001738F1EC4FC0B848E039F72977872440B
CBBC0BF0A4DD2CB038B8843685BFEAE15514C344F9AB8F72767FF2268BED8317
FAFDB532191FA35C2984AD4FAD2377671B3031907442F1BC221F1CDEF37BB9B8
83334F51E95ACBD4CB928BA33D61D0F18FFCF5BD6E06B0F9CF07D37C22914EE8
480AC294C795ECF17CAA96EA362CE93B2CB9D9B764E598FB42100B36C93ADBAD
B887242739F5DF41BB5F5F2F3DE425B3402318FF8E3C7916899BC3ADEEE86E16
913E1BDBDD7958F06FC41A77CF5FCB28BFCA648599B81B1E5F956714F9E17000
CA4117B21159690B138CE1794020155BE6C09E7216168904F68020148F4213CC
AAC483B43BE2A9763FDBBDBBD50A0C0F2D25DBC52DCBC0278D296FB8094DF33E
7E3631228006AD3CF6986C9F252363A207D88AB66A7C0DA4A116B4DA171810C0
0A57DED246BF8AE73EE6338283595A9B0C324CAAD2E25E5C0E0FFE02BBE72F3E
35066ED9A8E4A799A0706ABEC84866420F26E71E7E81FF8A3C9377E93BEBAED6
63B22CF9B525582EEE2D7CC70DFD584C581494AB8513F9FDD3D34E2C1C76DFF4
758FFF0724A32128393B9D463EA3162DF00A44BF63153E8EDD8BAA9536D2578A
1DEEF59B62C56326755AB32FB97FF27348B1CDE90747F9968F9797A135916197
A47152BAFD0576CBC040E6B64CF1B5D0728D7E62998811CE2124971A2FE57B66
44424372CFE6C23A71E12403A44356B26C08AEF11AB474614D9A4214F3E4C7EA
F50341800642E50FD7AED054EEECB15A33E509D76E0B21B5D5A252757C4B7893
DD9870FAE4776462889DF510CDE4EE303C2B52AFC398377A8B3877795EA1F11B
8FE226AE94AEDA6C5911D9A0E6336E37077F63DF2BD3F3C6CBB52E5D75AB74E8
30939CEF9EF8AEB9D59483918B157CA4719B2B4480B5E84069E3BBB843EC9EBE
6FDA6BADEF5DF8C41F14E954B6395B87FE5E128FF4CB885E940AB179C9355CE5
3FBE5B47869208440039DCE776AC8AF5D3A9DE88C7D61C01B842371D586BA615
AE8E74239906528C72DA8431BA410DE548B6276DFAD09F65F460EA1E5927D452
4FCBFA7625C922AD1FF68FA2D70547C069957DE29DD19532FBA498149099FA66
EBB9B80E51BFC1904957E07C9D70BC63616D3087C78379FF085B9D03597AC3B1
8B05B7D271BEF9B8173A6C4E20F581745A7D2C3B8999507C609A2ED663E1D24F
985584CC0421EED1BC8C0976DCD965F5FC4EE010D6ED3ECBC7A2F226547BBBF3
5F04915D9D269A840CCDDEA5AC5DF0EC1C47094617BB0EF98074CE6116ACEF63
02E40AD692D16400D878FC92B08DD94FDD0788C9F699187671DBD6841B91A8F1
296749A72F7BEA1FCBD8592BD24249276CE8C8F4765CE175B921697F9D1F7849
A2DFCF7D76195FE19EB71BD84736C972E7D4AB513F5E2E7957E228D695BB416F
047B15A4A96B2772BA8BA179B0D1563E7E339E92E18562EB1F9C2ED760715F3F
49B5B89CE4D14F9ADE6680A0B05BE6C356CB33BD7B26C60E59C9710FD0AEAAC7
E86DFC9CFBED73EBD70DE13443F8CD56E8D3510D3A2B11E3F6634141A6518564
8E67F28A86E8AC689C191FA3CD19EFAAB524A94577EF320491A3FA8CB2D73029
3C471E01072168C2C33A1025FD82F5FE833D2187685FC2B67C9DAE510F7C12F9
E53A150D29B92CECA783F8CB923BDBE44465D651D2236F883F1F42ECE339B694
B19D243591C220C0086EE913D280C698BCDBB8CED18AA5245A29C89C8D91D6D1
EFD43C45FFDB982FA0550F3962934F367775573080E67AB9F074981BA85FE7B1
9453C2013BB9A337C53CDA640D1971689C0F359224627423F0B7F08975BBF6B2
5A4E52E70E7E76B5CFEEBCD454B0495D13FBF954203496AAD69A05A3349349C9
65D9025A5318E3BA305D25DAA9FF60D639DE068E6459B14ADFA9FA485D2B6C57
D601481B2AF1C02B1E1AFC64C0DD2326B351F3125A98FCAADF807C859CD6AE76
596420C87D291D12CADAD4A7C73EECCEC90B036F773A35572FE436EFCFCB52A6
F31DB2687D13CA64138054D591B1C7894E2A0D724C37D6239C57FE699CD9F0CA
BEEAEFA2A97D02C82012C08DBF031CBD6D78E210D305677B9A4739C67ACF82AA
C2152BFCD5C450E4622CB7BDB17538A1BC296D3933AFE116B5C04033B83EFAAE
497904F8FA721AFD958D44CE6AA5B6D92365D2EBD0B357D962770F37D4AE3D03
651BC0370D932C4A41201E7D921D543D0F94D9026B5D97D33027B87D0D05DB2F
08D1FE8B52B64390C2CB7215FA4E2B7C214105EA49C20FD36B31583A2254F1FC
46E18CE6DC87C20244697B1B66359E9B2A16C160710E754F050FF88E6CE48266
18615BCC67BBFBF36CA5654039F3BFDA83A6CD672E3FE980F0521430238DBF05
300C35CAA9F686616449FE094A5F972FB99D62F34059CD19DEE5041502AD1D4E
21E95678C9C350FF6071ADA96AC2280B1C9B1CB4E9913BC51369D662324F926D
58DA18EBDD9811EF6077EF43D683908227F5BB08876048521F937A458A63396A
578F021315479368E2DB687F5768F7A33721F57F5024674847238623F005F985
B4BAB5F1680E0BFFA00E7D8EE5CBB80AB3030033C8DAEA8CB27CE11EFB58DF12
68561146AEEF0CE159C111A6468D2DAB04B3ACAC61986BC3AF3E78DB3B5AFEB7
9E547AEEE4E8F393CCCC75E0E097FA914D69791293D5BEC043B961C52F408C0C
4DDE1AA36C31462D0D3FE03EE61C774D39E1F2A3D374AB25B33CD03A9EA169C3
8C48754B5E3D4A3EA489D7DE94F9BB46AA3EA84F40ADF8124966C4632B7CB9BF
7F8075A6FC1828E35E5CBDCED6A7D376ACB50F6B336804C9D88F0EEB0C993216
CD336AECEC76C25BFEE39534A987A1EEA442751DE48D1AE4276150B16CE3EFF0
7F9BE1DA54BE91784B721065224C925E7F593038264EA0D5A8E7FA28212F91D8
E6FB8B549C59237133182C8AAE385AD7B587A7E8E59EF92E6CC1D2BC815E10CB
0C630AD5645BF8CD5AECFF085B9EE98C1BEF50462F0B7308AC29D1F25C3EF360
ECC5DE85C9F339E8DE7FEDE429C27547BF62ECB5E25A0AE928DA1E4073F2400F
A85471BF4AA95E88DBEA36F677192729AECC6EF2A381A8D3FA4D56C5A927A2E7
001730D7CE823CA5968AE062DB0676C291338FE0EA5971F7D5D6ADB1B3B6C392
AFD85660935CE161651614384D7F83214B975BD1F082D7E511A72AFD36DE08A6
3AB714709C14EB85869A09552C199FE97096E8D5460074555ACA3D34D93B1616
3FFBE3370D809D8FC166975ED6FB9DEE4585381F74DD1E8BE9F6E3E2635958EB
F63E296F9109677915EDEBA3654EAC3D7849F1CC4E77F6BBDC352DDD6E3A3EE2
87FF27B773081FDF042873B96E9DEF3EAEC6D5B9A045F9280D79AC9E0A307D91
80758CB5E40FAD2BD0E4A563D1C5E94BAC3B203741E8873C9F74186C527DCF2C
26EEA6B5033525C1D02B748511E79DF1586378263B64C3CF490833221763917C
F6B3464BEB476D6CFA64DA7057B87DFCF85D95A918E2F06BBD3DD789619909A6
BE5CB9117199FBD237359088B11C6A538AB48C7CF874F7614562322EDB6B87A3
77279178E1AEF561B5DAB94DAE398FE3245FD01186A245447B7B34D0F1CF6AA0
3DADF006837A2C5E235B9EEB4EBA3E1397EA18BBA922286C98CEA89B9859D8E5
90A22C3A3C02D04DE8A06DD65D6909629F782FF974AFFC8100E370CC9557ADE4
17810A48AAAD3EAE66BBEE79E19BFD15CB9C8326BA9BA96C0BDEA6EB91B6B8EF
CAD3A6D8352D57707445E43F11298F2B2836FC9F145DC459ADFD7AF0745BA2F7
BFE00578BB6C18A3DB61A9E84B41CC5A6B764858532D7DA349A085E560FA3A13
FFD612BE78D9014A983915DB200E5ACCE752D0CE0191D57EE7FA05CC5006EAEE
23AE4194F920986C6CF3A993077C0B2501E3EE424F0E7DD748B8F839254BA913
9D345103CB03226F4E27FD212EDE3106862F54A3D148BD88425747EBD84BF451
0AD3367642EEAE54372558F00F79493DC9242D937BD6F1778AFDC33C0B57B812
1AD86C5620623B98752E1B1E03649E488A00C554429F72F81976F8106FC0C276
C81A2B097AD8633BD1F7D69E3FC3900E19A725568E617E94FD183B94C9CE1424
E86B08846F902CD400D1F79C0E8B93DC518CB551334B31801C22BAC713DE7CEE
F020D4EE90EC4B3D758F2C2368FAFCBC926D5660E96B9741B5F84CC892E53DF3
AD9691D42235572F67AC5C0B20E59F6EC5757FB28F8FD39312BA79A229868F2C
81C2F455F1EDBDF562095F81BF4684EE4D0ACDE9CCEFF38357C8ECEFFB514593
F396B2A26C9B94BC551A93A978A6810A640BB20B9392171DBF9964BBEC03013F
324BD4B1E3053E4D63A50CB3CDD40500DD3014D53E32719381936CB07588CBBF
21D70A72AA4B05B19BC6EA6705003370A63CB3C38E1DEF1B58D658AEF260EC16
1B2D9589EE8C8334F202608FE867857D585ACE25A158AED63B8FE391030C55D5
FB24F40B331D853D2C54E5123E5E2F843602DCE3A9FE33D0ABDD83226C25C326
43FDA7E4F9F5DA3AFE7423CC812845C373426BE65CD959E960C59C49ADDC24B5
EE204F9DCCBEAEDAAEF7F7DF4CCAB29A5B26E9167045CECD41A1034C34F4D728
E9E820131692793929CC3D4196A68F4FBFB9C8AD59B3F6634AB3DF36A705E234
F19D62F97869C2FAEFF9B4FC76E80E8F93E8BB74CB35738074BCB9FEE4077CC0
C49B9216A3904E3B7F10733325A804B4056AE560F15158724CD36ED52734D447
A5DF73FC46E9A9704144D16D6006285B087F117A6F028D2F2BB95F7428AAB77E
BC61E054B96BA051A3404D96334DAFF3A84B4AA0E78957C95F4C5909EC674831
24923A2145E64953D1431E63A25EAD33A020D9EAC45AC7D42782421D7028420F
0A116296B883DE8CE54F076F82EC251D595E38D5151BE1944222C1D76EFE186E
0CF93660BDBB489FB5C5BFD22467E3B7B7EE22B25ADC328CC3AC493DE8C2F022
EBFA14A2976D8E373FF6324CA6EEEEE7B4FA88BA66620BB08F65A08BF7680494
319D7561B43F3859F3821264DA5AA9E03C2096B8FC27DACF326AD2F36FD2EB62
CF4C2B70796A23BE194527DEFF4DD60F4A12976872F59B63BFA4451E0260FEF2
1F741A8C787CD363A398058AD4ED21814D5132E07D916188013C8ABDCA62FA6E
2F80DE35A2338CD8D5C4A2381439BD094687B76E2D4E16BFBAC62ECA4C3EF299
48A0945CE7DC0912EAC8754AE29EAE5AC87616C0C26855C79598349207CF8024
1D991BBD44DEBFDAAF7F5C4D795ED33E9AE906C232A124D171C22295BACD1D97
4C8BD85FC55310F17607FEB9A71836B1DBE8A21B67E0498952AE79B162089EFB
ECCA2B2664527B384EB259A7B19DC09A1EB85F281755B0743FBB60F2952D9041
F7F6EEDAD257EEAB7BFDC7033B87072A685E9CA46236EAD6AD931C132A4F76BE
5E02D7DC4613C87ABA83D059ED0635D587485C8B15818D4AA1FBAF363B899827
711651101B499AC3346A64555EBD682B2A587F38458944A0E355F989A6D09FC6
F677D3E2B31056F217B2BB9C6F38617CBEE762A48C7A327ACED1EA729FBBF3D9
C2829B9FA5A211732448B38AA3E3543FE2A4894925D73396FBD0305CC58E3129
3D99AD125502A33F3E65A94AC101903963A84EBD442DBF476204DE3F6F1EAF14
CCB7901A3C1C54A705AE43236FFE980EFA491B29D5154B44B92380264962BB76
535084FD83132026FC381D8D871D0D96566F0E4910D171253B40102B0745FE0B
75AC33767B7F328A8E8E537444EC3A0E9E98761EB09E52AA7A1A7C15EE053C66
AEDE3AAC220039602F0B1F0FEEEA7EE276418D27F5CAD8E57396CF2EA2B88481
AB4D76589F89170F7EE8874A26CBE7CBA8E39016C180CB85FD2D1D5063EB4B2B
2D85542665FF5155808617B87F28E6C6EE881A8F2F137A3962ADF24A7B3DADAF
C1AC17B04381C6754327FA7C65AEAC1A283C3787AA02B897A5ED4709B6DCE7BB
41A81A21F8A1EBF1B32C1A6951F120944F679A2F52F8E184590223348E5D2229
A67CCBB423527AECE390C311309580D5334A523D0F07AC0A2EB45FE7328E735D
B9740967E6887D1A3A4FB69BE91B0A972678A8E98315860D63EFE6178FD39A8B
FC8B76C329FAE1045C5C6E47DE0F7213002E5CEDD40AA32BE716CA34CE544502
ABC9526DF48B0762B57F8AAA224B96DBEF6B02ACFD35AD91B06C32D19DAEFFB9
5144D443FF35DAF295574EBED60685F10EAE1ED416C43460F4F68701BA194D54
6D7AF44F895844B0C2B83BB642DF6DD4C3AB802093C5668BE1D52278AD0ACFFF
1A6C37F1AAD324439302113C4B84EABEF6DB592943F362EB36B758C266F17F67
48B63B0C6D53B5874942C33114CCADB7A4BF18C729AAF5B30735CE380AB814ED
C24C3140E4EE71460BC01C7FEB8A6BF182467ACFE3B05FE61A64BF58D15D82D0
B4A6833BACE8D08AE01E5697A89A6045A974E4E98BCFDD164C8A2DDB6E607138
E02333C892AC77F30C2992F44421C7E20BE7E0A78FBA272C69F7A34493D142F0
87067554D464306A44A49AF8095E431F91B8EA9B34B09679E5AE4670C0B0B61E
49E233994DE3021D1A1628A596C2D83CE85563A9EBEC3B5A1BDE88057173C034
192E5AF9B9433AF21E8D84C50F750434191ECF16684D5028ECC26F5AE4C45D60
27A5A267FFE9C5280880B868210758CC159C2349C7992D40996884C6AD13ACD5
A8968D5840A0B956B9C9876181C5BF3BADCFFF53C23B0C36FBB8D04D71E18BF9
21FC713F42BFE4E2CF74BD96A2FACEFB5393EC2C2FF189B3CE6FC1470EB207D0
88EE8EE8C887406F320EE84950A6A549E6BEE147D4F691A1AF268FA743C2122F
18ABCC0D24CC8C08E7076D8D7079F3CFC90F333B2039FDA78228FF7FFF776789
5FB02F823B2A32A28CC26BC8DA4C262467AA66CAC0D20720013D660E23C575AC
3C97FCC08A6E6797D9D6D4D6794945B39D222B81FDD1A53D0FB7A4EA0734BCB8
6FE47C846E94E393D3E7514CD779900A4156930785F1BD24B442988AE5DCEEE5
817C843B0D44EB7C9361A54E1E2FF1C4CCB5E84E6307FE139D653820FB3EEA99
8267FB51CF42EEAD7BB65DCF336438BD4A45B7C8FD52577A49ACDB394CBBC169
7C0818EE2A58701D1389AE6E5484C48147AC9926A4E5C01E7DB45EF620469675
DDAD8976DE4CF47B93FC6CD3E19E6D3232B16F984C8AA4003AC525C1559EC533
2658352D68859E771835EA607E168019FF408B3C783D071E0CE5E45DEF36C266
E8D4367454CAA54EFD38F6228B46130BF66BF48E8925C655C7B21A81B9FB4493
377D6B9021CC64B8164E6CF77E91BEED3C5DE8E5621FEED17F073E9949A06606
0746C0A627E366A2FD240E5FE5C96CCE3E1E21082507B7559E22271A8EB903B7
480CD24AC1EF57D4345014D35EAC9BECE4E62BCDBF60C6047783E14AC45EA059
DA3C196B7DFE837D30F0A10FF0AA866D296EF89D74F361DFEFA485386C301769
F9E0E1A6FF19F68BB0DC503E8981DB670CF5CBD09E176E265CF148A200908601
65239ADB5D3E324BD820BC6449A228E70E9C8B66046F9249FEC24A61E5A4F7CC
A68D1DF0A39EBDABA5F60EB10D1D5EB1BE26422297188DB7566B42A4B0CB64B6
55016E9338E1559BE5FAFF381BD82A6C71C2674094646F8EE457FC565E44F8F0
808F26A82E25AD6B4176B3BB3279873C11E9D40A2414485EE51C916E20BAD2C4
5E520D74FD528B2FC34AB914C268C8874E34F01A8F3E17FF8EE908FDAADCE219
D41E2FAF4E6B6393343A1ADD11CF16F7F16FFC043540E044AF9386759E047307
A965F5EAA03A29CB969639BF2C227E8BFB63807FC36AB88C656340384956C72D
C9889E13896C84FBA0BF4D5EE4F6B4E57982A312E8BBC82EED3C039908D00616
02996C15700B1618A20093B619E51942C0292D48C76344A84198F4557BD37717
CD54FB14E5CEAD55C5F2EC61150D2E80B53EF7AB92D83A577B77F81BAD985C73
B05A79D3C8661A9FBDEA6968B878036C6EC2CD975545CA4ED25EB096A3038F49
79E8F147BDDB1DC607885E12FBFA7343990A15C15E7B363F967091B8B375C0E7
0D39D66ECBBD069BC21A54E936087D8EE5CBB80AB303F36D640C1DEC8136302D
C60249F7B20680F1872B0C648C199F388F3DCF8C709606D5D6426BA04E594DD1
E43BA98E547DD2E1E75388A363B4489FDD8A7112B4A0B8E3EF1ADA91A927F752
B66DEA615EBEFD0CD99EE64CC3F2F6B5D3FCA738CF62DCBD748A62E5691C2EFE
D0115591B33AB83F78920805DA35B62ECE86B24FD21402FA62269D1822547E68
F988479EF27E386B29F8BD164C3CEBBE486D57950C6CE11C02DCF9A027196ED0
80B7CCBA3DE311FDE86099B7B95DF57A58110A46E7F8A347A8B51624D4605C45
B512E2D37CCF2DF9E26656DD8A36663C5D035F07F268EDE26876695BE0D197FE
9048AF627CEDFCF242B8FEA6C18E7E9B025609169598B5638A27B92922B97D18
D09E0A8B5D62D6F344290A5D1866DE05492337FBDC71902E2B638A80B0BD6029
554507A43E39AC4128A5C18819B057A49E51C724B4C27386FB9B8E0CC49F9E09
3AC6B6DE07C97A9D6DBBD78B4E5155CD4F5009C546B6F6097F292BBDD2707D6F
DF975AA420DD2A805FEBC23C5E2D6AA558A558B4C080E00E0E475CBC5EE7525C
A498477734BCAEB45AEB21BFF04ACA86AB83170234A1F3A777D2B66A6F99C9F4
9CF75D9A506B08D31C1040F6A5089BFE019466013FF3A3E8684F0CBEEBCE9EBC
2D41172A46C5045A537C3675044E5D07B6220F4A84B86E353447EEA780B6356A
4F1B01317B3F04B11F005ACDC64286259619246B49EBFD33055148252E306786
C7ADDBF4BAD4503E5A3F925893D6219938AC870B8D2991759FD37D5EA7D7A66C
A3EEBBC317513725B56DE6EADDE67FC5A37C6200BEDDABCF25A06B041B532D0F
8C8BA28A2132F36C12A8A99FB8DC0243616831A06796E28EF112D687BB00D663
1ECB33101C06946A2FC9996EDD3AC83AD9C2D94D749A138AB19E29AD27388247
677C5683AC5EF6BB22317F525714409E2220F0E3FBA834733CFE234E578A68CB
A507892FFE53658D1A5A6FA65459AA33FEF02E3CF25222317FA36FFFFDC8DEB8
DE954058108D6F7E4290030E99140D3932E4F572642BD80270A8220040B249D6
9A780E3211EFB72B45C422A44E58C305F5E48B386788EA132080C4F7E5910F07
ACD2487C1A21DEE608B240055C8CA10266A40E51A73869365A0AF07A0CA69261
E3C2FB360E5DAFB27AEBCC93D7D761982103495E4FD76A9FA3ADC2B09D03C7B1
83105A225DF989F367A397A9EDDF28C221D599B77A6D08B1E1E318CAE8B460B5
73C244317C2A201B351309D2F9A4742DCB0B38E44BE898BF8ED06339E508D2D1
FC02ED0619B3E23E435557C6D1B3027BE7E31654C4BF2F01C748C9403CABDA69
316CF7637D9EB8079672349259C33BBDEE01DD1A94D1550EF2F57D9DA84DF782
0596E625DB0696AC9EF0F9D1BB64F4A86C56F9D2C8E23654FFCB057DF2635565
1210D9F83E2F6B11DD00DA389F71205F1A24F2773A4D66FBA427BCFCD5867DE7
EA50C866FD173E076307C2EA7BF8972922D3F244B672F2838642674C13B802B0
603EF66FB3E1FE486704566159327BCFA4319F9E483A9AAB41E305D541D523E9
790702F71136375847F7259E4DBE52C9587C15455276ED0FCD4F407B558A3481
CF70EB9B4EC1602BAF075774AEC12CDA3F68A68642F2029644ABB2CDE180FFB6
CCA38B28A18C312CF0B050BAF7469FEF49DB48A0A418CDDFA87CF518FC9ED79B
27B0531102D29C2AF750D1511E82116AE2E314FE0F3737B3F1F9818E3D70CC59
0F6ABDE8F5C6F0AB7484CCFCF2520609E338E6782E22D882DC7AE8E6782B41AC
E605FF9CD7E70C42A52C2133915412BA6328C73422B926C3490B0357124FDF8B
478511E0BCAC77777CC95D1DA3DF6E3C69241F958B6B02AB48AB45E94DDAEDFC
BBBE154F889D23E47FF7D1517DF22AA38293DFC7336E49A1AD47F887AA98E60F
6F5C39A6E22F1B5117441D7A2B0339D26C1C89C3FF97017320D45D883B2F59B0
A4F20FDCDDAD4FE4C94AF1F173C0BAFC71A21ECF01EBD99B55721AAA724FE625
EC79847FED58B5BA2EBA7195EE6758E2B6077A7557A70E3B55053FE921CDE2EC
77268DA5E944E97F835200946746BE1AAFEB856281E449033714ECF628477A18
110099766F0BBCF5658D226AF168985244B2D1AA0C81A0F630B580D2AA3A3E6B
CD63BDDC4172419AD4F0820BC9D6781BF275D5CB1D6495F295AB023FB4AD19E3
08CDC6D1384CD1BECAB4FA30A023FD1CF92B4B7096D1188BA948FADF2521C53F
CB00A06189A1A4322A4900C7662C155BF8CB0F4FAE7BB020F72253D620904F2E
831253EECE86BE83A232F0190701CCCD393C6C3A83B316F1076DB013BB8D7D07
E74FB861E7D3D9E27A64A6865160E38A2A9504D47D4E0E4C2CFE151DAA84C3F9
FB951E4C6A881D35642453CD3101E30A796131EA6FFFEC99F667783B39904AC4
A1A00B0A1DD9DE505B356951C13DA10A3EF094840AFE537D16F4865FB414680D
72607D60677ED47A130546199EA767A08F963B6D82DA852A52084FC4C87B7763
C5B1D4426A6B89C11F213CE87D76589432FEFDD62A2ADEDCCF29753AE807D74F
835544F5394F9C0BAD18A0750B4C4D9FFE8E3295B7B94E475B54EF3731F7FC88
ABD7E318DF0DA209A476A06136042EB4F40BA80086CF515B5DBC74C371C999BD
FA77058A866D2E0FCAD67B9ADACC2F80AD2C4EF3EF8B420E8C5A10A22C8F49F7
752732A448EC3CDD625C2E2E1CABD5189D6D40AD5B6C6142225A5AD8C4FBEB7A
30E266664D028AAD0943C858E922477DF034BBE752B4BED82BB60A8852744145
F94FE39BC45EE40FC876ED366BF3135AFEF91E774C56F7B9911A5658CE739E0C
3E41FFE73015FDF1AE3F81F066543D6794A2D872D384C1DD8672B85370CE4BF8
EBC706A6BC40BA03AABF62FAB360B6974F8BD10453343BDCD54C17EDE876BBC1
413E2D7177F53116A59433DEC36628FFA54C60FD1105B608A5B76851344F6494
56956B785272A3F8A19AAE86CC4D31BBC3C5C605C5D95609FB031577F0E32390
23B8718B1E8FC3EE5EA5D2ACC3EFCBE6FE91B81391B8AC6ACFCB0AE270D508FC
2EED55F0BAC72B95C9DC85B2EC0FD2E1CB85E7F434C60CABE0DAFE4155BF7B5D
D5C07EAF1AEDA0A62EF153D838FC71E759DE11A265BF189AEDF963FD6D037C99
AF0349777A3D7EC7B3D1904C8F283DA6EFB0DCABC4F0A8B38ABAD05F87B9D898
2EBA496C82416E28E0478161C79F99F67B642948FE960344AAAC1F7663DD3454
0E491B3BEA2CF61D647E2546E5E870A7A79FEFF7FFB4EA3959E3451DCB80B66C
6B6D389F2664CDB1E2ED92D2B0939471616C74347FA1241C10F1E3E9B1E1BEAB
42EA6E7B298E790C61878D097EFB1E21267FA0C43B63CEBE3DC7FBFED215267C
7821F043DC6B6B308FDA356402D2F96BE4DB8F28F55BA30FD776B1C2D1E53C81
9A880996345676B52D80D72553CF0E7A1F488DDE810201BD6E7980665A358233
C0A1F918388EFB09382FD79729426B902E6812216BD5B6A13BCBFAA56E3B6CB8
ABA8D9B71630184C23A99D21F32AA37909F53FBDC8DFFD805CD97C344F33F73B
3BF8B64E8DBA8C5BB031D75ED912B92F3DC1790A098A886C86953C9EC3A19E7F
ACECB6F3C5B7B2A8134DBAAF1C4818C0AB2534477E473B87350F1836769950D6
2CD8020053769B31880BAC115BC9E0C4FBCF51B68E7B0E723C8D9CF1B373B802
A3A47424120BBCB1872EF8C5B3B11ABC810529D06C3726C6B9C03E26CAB4684E
D0B565C5AFE9D5E6F5A06182C3B984C802356E7B57200318218525FA5AA4D2E5
EC1A767F4EE0BAB87F1D51AED03B27B38AA31EA30CBB4CB58B86EB74749F25FB
A68647116611A11E75D97A0B62F9E3A4B78D4AB51ECE3752F0A6FE7F8CE1D92E
85A68319249FB8A71B7E3311FF6A4AC052F771FEB3297CBBCB63DB3E66113E4D
D7D4F1452006AA3B1A16804999CC4294AE3ADE6EF9B4205BC446C53F9E0E5E06
F964CB77566F2E21220906C4A99E8EF6B6497AC6622EEF6D1157FA30DBD39AE9
8D17E02885F87B0E5849C9E00669FF174366E294FA9C668B5294C28AB0E80E63
0E65F574B6D92B74EA356AEB6CE8F9B85E16FEB64380A3DEB1E1807566396B0A
A6B914579DD9DED178A5A0BD5030E6B4FB5598CD6A8558B8C4845AC054424A96
B816AC7005575762C281C7F886A3C410ED0DEC86CF41DEF957820F003B1308A0
630B4715199244A930009E46D5D4515B639C020B5508087D53D5A8EF4B1E0478
0EA5EAAF28DD27A31F4D97BD866684921D6700517591DA0330EE5719C685138B
0ECE79082902FF7BB637EF81EBD7E779723FDD3D4628822A026D57E5E0A4FB5A
8D08B96311C845ECA7B9E517426B798433263E6D36537E726577CE1483052A0D
DA91E0AF8347DD1337681126BF8B89DB5528C7FEE19E72E0BD19641F47A05F49
CA2A65E0A3E935AA652C0B74302397DFA6D5DEEBA86DEB42D52EC3575F8374B2
AF83966CD33C692252237B500D16D93E9EC5E63A2E348BFD9F78302D178BE700
EED9D0956AE6D180326B0AB64698698CA4CA8484A41C7EB63C57BA17F2957454
4226EA11C051050D1B32F98BEDA90B5E026489050ACF19ADEC09B2850803E5B2
E3A9EB2073963FEDA2149A80743AC74E27A0B26DA39F4E70DFCF779257908BB1
0DE101459458F814E59EB231ED9F2DEF25FC6871F22994027D42F4B5DD688729
F3F6AF133C7A2941F3987FBFC0689BE44AD1B01D38D59D29FE16CB8CC1E42769
0FD7C95C07FB66C508B008D0E4005CB9A63DBF23487BCA3874DD653610F6E48A
9FC79E7D4EF1C4EA9586E9FCE4F4FECD3B1BD187F7EDB24AE442CA96F6165A23
18ED5851CDAB6F69089E46C6DD2AB3FFEE0BDABF261812A3EDE5BF40210CA97B
29B72EF6A474BC95D164B0A944840FEB26BE8D45D05DA268D59CED0D657AD112
47723DCE438173E788FAA0EB529158EE5926DE92D1B9D01C6FD4B5BDF08A79E3
B47CA6F0C8699EE2EB6FFD30919F18C4378A9CB42DAF412556ABD7D0CC384E49
FCA357F5D16CB8C276BBB031F33E3E9D08C81EE97B965B06EF690C943711B799
1713F6B68C33D17B5EDF669B47888C8CA550B8123CDC5AA3BA1009B34137B909
593D8FF6CA1079FC8DCC158108BE01B14747369E037FB3975A6101D9D7F7EE9E
663DEED543883A64AD0545ADAB81AF01B1354B074FF8D128BA53739522799DFE
5196BB09FC158AD792FD05AFFE163133E2D7287BCE6DB8EBC3D7F5368A5282D5
D62B36E4503EE112C28C18F8031C9D4ABEACE9AA27F912A1A681ADB076C6BA61
F4982B59156172AE3BE84A21E0DB20718EAA7BD843D98945D33F891966459629
C2AC24F70419E82E5FD20FC984852D4CE7009BC5AFCB8943B252AC1082DAAE25
CD71F8364BDEB39BC2F6525BBC47E31C286860B4955053B5AE3C2B1C8A8BDA68
CE96C00B911D59EB877CBE50BC6CDF95281C816535371F75F8E4BC40BA7BC7D7
E9AFBDEEF77BC1686DF9DED60741C7A175FEABDEC0C97EB88B0D4FE50719E10D
2EC81FCD26F3A005FDAE0E4124EE9946C3547B3BF1BBC70BBE0A384AC6EC7312
097F317F665E21212D38BE63455FC7167A921063541D5E8491F5B34E8131EB8F
394903D8568B6A41E5EFF446BC40DC96A7C475FB097A417D868CE06E7AC59D37
10D81C11EE6FBD1D1541E27EEB978BB050BB4EF8C1E2AE758EB7547F4FAF5297
10D5F95250E1BAE3040B1B602EBE4469D7D5E2C3E997C0E54C4450E4FACBA818
D851C98B3F20FB3AECDC919C320C8A5E6B0B416BC64BC43FC1FCC0CB3ADC9DD3
A25F57CD2334A91B35E0D7F8A9A10D315DE960D06C87661AE6FA8264C04066CC
198989172D7838B09D7AE5CCF00A362E67398ECB6383C6EBBFB2B61FE04B0B13
B26BFA8A80D12456760429E12CD2E9B0ACF3AB0324616A7084723F00A07E6E85
4DFEC5DBF19D4E977A07A42287A2DBD42A7F486A57D45EEC3280E403235E6835
90A39246D6A13161B54C97ECB224FDB5484ED707F7EB381E097E5DAC0FF68E14
80EE477410730C38921197FED8CA854CB507569CA28A2B0C3A31EC15F3279D8D
59F0401DC686C74A7E975D87117D1CC640BD9EB7808E00675FD8A2A044D0CDF8
6E83AE6966AC473C02EE82C78188E7E50FAC670D8F939A187EA42C973E2C97B7
CF7BAF9833CF29742EA62EF9FE7CF81EE3DA486A5876941BD639BCB8994D15C3
734157442A161BD5A9818A95AFBD19A49654F5BDD93E5CA158ED057C9BF9160F
61584608EE366E36F880D83BF914A6130DD97211D9D4194AA84C8D0A05D1BFC8
7C5B38DF472D0C7CA685A725C8643A08D40666BC99973AD1998EEE983DE66E2F
E99F8B010FFA20848CC481D7ADD6A6A72952B20557ACD703E7B8F74E94CA63F3
5608989E63911D6EA5F2B57E266C53FE393CF55F9A501ECBA1C6E90F84870853
6574579DCE45F43ED178B421C67E51AE6A432949E31E441196011D609B32C5AA
4708AC8A56474AD40D071FD28AD509908ACD994DCAB1F6AA8EC52EDE61B17166
B675E175C09E13E90690A80D7C2C3D04E5DFC6E9A09D7D043300BB9590160935
DB915B99906EDFA0432CA30C1BFA95C8D3EDD5DB642EE5E238EC939FAADCBEFA
C573F188CFC79086C1C9C52114884BC1B02C5DBAFCBB7A553A62AA70372A3B87
F4E91D6E9062CF3EFD380EB09CDCF835767340C42E5E74610495094F11890151
BAA073A1A81F8BCEA1B152FCAD7FAF84983CEE3045BD387A3EFDFA07FE94011A
0B7FF375C9A8DDBFA11D94C397C53DF994E5E96E9E1DEA62B36B9DB500D0D3CC
91B12EC55D771143055296BCE6345B18B10DF44D7015DC2E28A6A14F4B2284AD
C7119801526B0ED51440230FEE8B16572FFCD29728C73F002C883CBB184DCB7B
688C24C4037705510835415C0B48971A7E893E368B84953CDE42654223C32BBD
FDDBA1C764174646AD7CF22497842F94C0C42046B4494D36D84475786C8F68B9
B76B32E0C2BE9FCB003EFC4BE1A1BE7D66831935E4A89BA6E1CDF75A9ECD2858
8EEEF2EABBF12A2F4EF4C815F5B1F4B72454D91A5323C8A059FFD76772A85238
7BCF151EF471F049A2B56F53C1931C7FC6ABADE691BF536B65A044403646B0E3
89C30386A643B905C6F43C1D035A7A1A1FD3A1866E337D4814214267A09DE0B0
FB75B936279AD263819CC66D28B288551C67B683489CFF4DBEDCE7A8AE3F784B
305C6C0103CF820B23FAA7B12D14F1BE547CB55B64CCAF6F14CD971682582802
AA5B917BEDCE18B65FE2AAB336B2FEBF33996F4FF5613A23CC49177C75BF1EB6
1260DEF86A62AB14A1991A1E999AF47447E6CCA2AF60BB09D4DB7DD54C82735A
79BD25FADDAAB320AB4B9278E652C2F30D1F9E67F0FE0ED9B64F9EED0F48C9CE
0F760604F8356EF134D3797D22329EBF716CA777D92D2A36819E81764A9294A9
24BCDCC54454FBAEEC417F2EEF7EB0FD7FCE63095329011F86270F7886CEB82B
3DC1612F1662CC3D0011EA94362312238AD724D3E8267D46D59B1176384DEA75
9A68EEDA508FAD80AD511F464AD7CC854039B3D9446D6F27C2CEBD637401A381
FAE7F30406BD125505ACFA3D838E3DCA6843B76B9B3F7CC59BB76F209F5454A0
17C6ABC65E4BC733F035FDA08CC184B22C7ACAFE7975ECD3E4BB1C5044FC3A7F
FB7B1DCC0531FB1C1BABF9347F6CE98BB91DC48C7EB0EC84D7CC476CADD66D4C
273F179DFACD5750E2FCE88A4BDE22C6BDD81FF8FD8B96D827D3B104005320A9
7F44B3FFC0ECAE15E95789B3E396BD3073A6940AECB01AD2CF3035023D5E0F56
3059F9959F021413C8DC613D035BF49AD172E1160FA3192D02B42E1A706A9BCD
086545619CC9F6A6210EDADE29D28FD21894744C824E290A945C7419B9E2DDDD
CFD2BD85125DC5A043A45C0B9D3C86AB04417A7E2E1627BC84CBC737D30E9EA0
D4849962B180D9A9B33A8546386B61903D7978771D8C525A411653B23DCEA82F
5F21F806E068BA068B420BA7FCD52F50BC5916A734CB90E7378429875A33880F
2A5A0D8EBE74DB0683FE46A0C58A8C365FD53A6933446F2195B3B6834606A868
C050AF35970A8CA209949330BD58F26AB3AE4A670E4DF51B3383D099425D869F
75A82EF4F6F8D792E3A058EA1888D76EE7470D5D0285E9E08FC5F5ABFFDCDD7E
67C7414E0E17908574E7B2675E84EBA32B8CCF5AFCF3ED3F2D4D94C6C5CEA33B
5DDBC0B79E16096FC45D40CFEC0BABA6DFE76AFE62F4E10693029CE085ABDC77
E8EBBBFC636193FD92CE0AE4FA23E512640BD887EB65D2F4C5B17E2980477460
87180032E66BB8024E8E5C53177966D2939E10316500E6EE12DEC17120770910
4570D0568E7D78AAA168343826B2EBED4554789E4D784DDE9D6C58D5B666EF18
A71AFE7A3A116C222407545CA907746A672A0D4DB011DE5E6D9958807993AB1C
469D4001AC7AAE77183C14FA5B76B08C3D154265A22CD42E7FCD595A8CE0E93D
45BF7F6098953C01ADE80BA875903D12EFFC2E3FE1428B2DAA1853FEE27EF30C
B0A4956F4E79ECB0F7C38D8480A71A9F4589D9A31F98C0EDDE4BFBE6183689D1
F86C2FDBC374EB4582E4564EF787C5C74B659A4BA5F7DE0C191F43246E2084E3
FE8F50E514709195211FF1A494D773088A7360ED81163307DC4AE783223EDFAE
CB20D4B6382911852A0184FC1A299434634D772D2EE66CC0C4FAA7B6BD68E809
B02354FF0785CF5F88D9C178153E0CFE77D8DC60127EBC1F408930DA173B4CA5
A62F687C9C0E20CF4ADD2FEFC831E454F8D0EE5E9E36E55F44252B5C8ECD3E66
2858C31CBBDDEA0FCC20FDD7CC82352A5F5D401397F3EB933F247EEA148BD2C8
0C06E54E7126C3703DD9AC0DB04821702D0F93FBF513D7B85603C8A0F37E55B0
FCD89E6F6C4F6E56EDDC40F93B34767BA45CBA4B1A0FDE33C7152397BB765608
1ED5201B6177FB620B3ECEA33A2FCA01A1D02376336EAD4F5E80BEE95EBD48A2
D87B29C7467C0E15149032A518B14D702A1650F03A6F3BCD5DCCB8A3257EEFC3
3D332C794364EA5DB0AE88DE064616BD8942C3AC1DBA11CD1962D1964BE91F56
B82EC6C195CC61DB38B0DC74484791223B74926269BCBD30416E874194A2C4AA
475A156096793EF2C81E9B9B7DF58324AE6E3B639DDE323A6EEAFEA964B2C278
37E2052A9E884984EC754AD5FFA2A1DAA2649DE89387237FEC5E73AE06CE6378
78782106848B43A4D6B752A8E0AB1944BDDAE1FB609F621928A3A51EEF532683
E5A9D59383ED8D97C2A77894DADB216105AC441F7540F6A5FBCC751A7D639E32
C569B568F112736EC85AE936915CE709E8A6CDAE9F7EB8ADF8F303A1653E9FB6
61B80F661B193332C69E40D0F6397748DCC28B0676493A8D05E087F0BBF2DAC3
056060E98A1A0C69587AED33899CD47FCCC4BE2699DDB783132486424EFE025D
4D07EE924E6364655D75F43756880FCD7BB61B656D340DE9F4E3B6FB9A2B8BC2
93A7C0590C422CCAEB6E1AA789B6A3AD509757677D93ADE141FB0731EFF98E8E
F876D73AB1D963C8365E8B0C46E6F5067AC669D8DC37769E59A5AC6BF061C79F
EE265DBB5E5708CA5AA04FEDEFDF24B58001909B7B03761FF2070D9B7AF5A92C
8149B0FA58B4F6101E49A6D4B8224C70EE2A3B21B2AB6FA1AE122A3004B41BC9
8501FD21BEA830735C9D9733AA1E47A08C5A40B1885ACC5DEEC5799A5178D4EA
39E20F8679CA2C1F3C57187B3D5D769E053D9ECCB6782C4228CC73AB83936E4A
85B9A57DC1FEC51E31D4CDE37CFCAD6181F82F434ED897B6C175ACD78DAC108C
A1FF94802232F46374FB57443115ED916A49FAEFC108217C6F1E542D83B5F96E
BB3EC6FD291EBDB41F6110B713A938D481B0789133E67A83DF9FA03E4DA74037
035D226C0DF37996DB1B6A97E165EADC6CE23BD6CB9700745AF51EDD6C686967
470985AC22D7873925F1C44C3597378342AC2468DA274A1E87749F6B1BF5FBF6
E2122E6ACA8D60EB3EAADCFB80BA020B6313EB1CF39A2F2AD698F707E811A3AD
6EE6EF1F6F392707043D1734B6A9696D4C6B3CA73709E4B1A68DE6E3D2647EEE
D18A6236269913F219C008F8CBEB712ACC054BB737047EDFF73F6CAF4869E12C
80EE7DC9EADC61E13DCE4F07B095EB63F7F052B3A0914CA5AB0E1FE82E76C851
2482444485E8AD4CE85858F5316F8007EE6BD0BB9994FCF9AD3B45EC54CD41A7
39FA56F0BD168B16CFE848EBE5DB7A2B26F13F8554C30F15AAFA90FB522779A8
90B13301E7430A43888369F6829987C0FB8456E1119973AB763E3B857A6D3290
3A4124E22640002331B0222963DBAACBD071C3701EEB814F06635F9B5BE17B4D
6D9F9E4F60CA8D75878FE40561C3B80D410C6C7D5FE0433FE8779B11F2528986
6C5E5A863F790054AB433D5E67ADC3FC4C4CBA1EC5F89BE650109B0A249D75DA
5025D2E9DC7BA95D04F82F9DA728FA7C2B3BF01142F9E42524E2ECDD3E91D91C
57D855D818C86819DA7A0A6A20062C57645F8F7284E4F4002D9FBB4869162DE9
6A383E6A0BA12C741198AF6A356D485991AA3CEA5E4E5408FFD870FD1BAFA2CF
DE8A20546520EF3367BEBCD4324296077944F65CD9EDBBF10DF5187C6322F9C1
75C53116BE1D07615071999B228F7AC3280375E120BC9B2BAD02C1A6863AB9D6
ABC3DAE7BA53B3DFBB3D66B152EE2D7A0621D2D653744A88B12F6E08D863BFC8
5F5C6EF62197B85088749F3CAFA40A6A3223D4CED495D13900818AD62A83D27A
94524FB712BDC72F8DEFD25B8C21FD3B8F7A361CA77F3E807FF945B24970EC60
78E5A48D2B7E742F52F8B85D78805A95B8CB191C775A2DDEB749AF1C8F30158C
50457F7C5AB2CA87134B9DFA8084C28606E98442B3B12A017B1A07A9612E0AE4
FA8ABB03A3A5979E1327D0ADF92820ACC78B0793B9F0307C776C27E3FB79C327
2383D7526CEE1C178B1C6988F963BB0D72A7E20F42B30857EC5CD2FB4EFA5A8E
48AB87BA6E9E937B11F2DCED9B6A5BF6B667F721A96EA48B07966D3CD5842757
C4AFC1637650A2DF40CCB2B6C1F078F8D499E75E4026F3C175F5C9FFF7492B4C
C713CA0AA4C0E026082402C4CAA8344432F60E7279F55F1CE391966857000AEC
1C53E0C94AC457D222E2D77A517F78FCA8DEB439C206045123BF0B8A6AAFEEB0
27CB6541C92D6C29F5391D661D18AF4D1C3DFB72F9A3483AD85A7CDF54B9ED0B
D376E6DC111B9F34F72691035637DF304995EB44F689E2BF95373308B45DBC8C
1F90FF30BDC97107DD0F2BE9148FD403D5EA3E572AB818F3ECA9ABB8AE7C5159
9D134E1DB50E0F7CBCB173D2CB86AB66D4167D3CB44BE21ECE59DC519C6DC88B
FB425D26C71418C25C2E90D80E338E574CC8CA2B2AAAB2801C522DAA740300CC
2654A2C238FEF6DC3AE6AB5436D0CC4AFBE18216BB13E034969BE31ECD15E9E6
14F8FE024A7C2F9A6E60F80C4712BCFFBED015FA9A94FF52CFEA8C05466AC733
52EDED6D6A878855631C87599E3EF2934FA1CAC57888CCB3BAEAA79FF1332DD5
676E9FE3B3737A9B385E8A28F9064B7470A4417404AEC1040C62837132F24B4E
513D791E8B8D0AB905D58856A99BEAE260A8CF01A6F2D73F6A5AFC586D76B229
EE6359841860CBA2E64BDAF63520089153FDC7DD084C477EC98C753BA953794D
F62CA9ACCF6878527A98EE4FB07EEB27F0290BE2EDB0B72653631C2BA5278CEE
644E6F1725A65DE0BF2FB52C5F6A9E2FA6BA41034432B5E360AE9537FA641AA9
101DF76BF9EF8EA08CC5D5B3387657FB50B6B4A9B6EC98393CA81EFF272F85DB
B4EFB3704C71D853E935CB911026835F428997E2A731A4F0D5AF1DE6AF42F220
B87F22913A4347A452235919452C07080CC0CE93ADB4E2FEB60E28FF6D4AF001
0D422AF8D57E6430A18773D3C5190CC50D9BC25E14CF4698C6AF0D52ED98740B
14F1BDDF113E4F7B427293165C73BDC93555165F89428B838E80FD5B27CCE77D
EABEEEC684E5FB05F342975BDBA5D48988D88F4B1C916220B2F6A6D3A0C92D90
8EB946333B10F6C2EC7C5D8F4CE0DC575E2F6E760F8828F0EEE0B5759D33B7F3
0A18D69C46649A49D4149CA8007917ADC7938968F07E16F5F94B47510A12C00B
14F472CB4F3E1D8B852485F974A2D2145BE01742B8577CBE76C607F28E5C144B
211F8D99508AD0A0A52BCCA1BA9F370658310222F1A2B5FF32373A896A45FCE6
123037DD063229479E5F2EBC48F12799769EBE684B749A1903EEFACF3E91A8C2
56CC17087EBF11A9226F2D753D2C09996502A8CE642997793023898D9D522AAC
340D020283996329E71B9A525CAB2BCF150D4C8E05FECB7CBC4A049B20FA6FDE
4ADA28877B6B867613D53FD6CF230F4B05040DE9574889141651A5DEA6262FD5
4F422E7F9553C125F993E6DDEB36BCB784B51270EEE16B0138C1732A5446FA6F
F42A84EF98CF8FFC6A54709ACC186A9078502B3AE4C2A05F2CCFC2F206CD43F2
B8EA01654702FA720537B12742FAE1ABE0BFDECA8155EB4BCCD1898AD8C8B111
304AA08710F2BB0FDF05FE753999948B7AF34C5E2609AB6D2F4CF456C1BCD9AB
9C6086D52EF86CD44972B418F584D0EBC9D32F0FCF2E78D333E886BA23D08F37
F7EBF5AF326230C538D61F0F69ABAF49A0B39E5D830EACF4A75B1066C9E95964
8AE4339A2D4882826C36CC3D37F6B45F6F2CB5BBE7442066DF2B6ACF0C1FC98F
E3E0C0D30759173B76C8D348C7FDC96A1FB6D3C45809BB44D5FFB1DAD346F4C1
69DB7C35DB9645617AFE078E03BF9A1BCE4E47DF3C39C6E1A62D5AF6B69ABD9C
0F4605DAC6D78DD5D963975B37E01495839C1405CF46A512141D0986493C4890
8BFAA800062011B34F0CC043654EBBE985CB6DC92F990CDB71F743BE209C547C
37F74C3603085BFC50638BB19A71DE2A57657BE4BADBA11C52E735C2C981DD1A
51008CAA5C255373F60BD85C374F605A8A503CDDED9580B9942B11EB6C16FB32
1A203ADB2723069B022C57EE284CFB739E4423B88A9E688F0C0438872E0B5789
BEC98B95D57372919A2ED663E1D24F9851431221D5C57CFBC28FFFC956647618
93F3C1303F9A82219650B9C8E04EEBD414849AABDE59A89088CA8D7B68AD88BB
EF15FBB96DA4B25745AB2B433DBFAA11EAB44754D45D2DAB99863EFD00C2E8D8
E14D1017DC8428791C900E377B78459CD2197DFB83B025179C6C7BCBBB7D2DBD
3525672A26FA7513871687393DD7812D9D642D65651D25B094594B71C2469CFE
1D1551A8C015BE759661729660C32C2FCEE435745272FFE8FE3D126BBC928047
10EC1BBE396E177C09467EFAF26F3773067464CB460F7CF645BA51AA3FB99908
B46B10CB5A9D710435404EF38BD9AAB2C2646D3F2500142328D8D3B40136F3CF
6DB797A9CD1859B3FC75BDB098EA05FA1A1CEBE9B8214992F0CC7A44CC1B4CEE
12254DD6EC682D9AC8F2E0DDB0D0708CA5F761A1B3EAEE8E80AFB1623A924807
5FEB325E7CEBDA138741E2FDC304FD21D6B7903EBDD34CA48B1597EF3E340367
B48294A7FBA9F331A24401ADCBCF6D60A77FD02FE4B903C01ACA1F2B8C56B4D2
B680D92AA559D4E1D70B8CFD98716D9B3901061ED18E9F01D4B98559AD18A41D
1CCD2A8B67724FB63C713FA02EB81B166C4129BA5A34C138647D7F499D001897
6CCB0497FE1C80462B18EB4E6620026194B3570EDD4DF6ADDA1AF49DF3D249AF
B71426236BAF6A4622FE6411CFF2DF507B7201574A05E7686DF03F80B23E478C
5ABCA26796BB66DBCB429FDCD29CB89F48CA3794B06140AF2801036EDCDBE006
9B32F59E289938D667395C5DE88253885DA1E935DCB3F577AD2E797A4577D6C2
0414EBBCF87BED9BBBA6BCABDF0F1771AEDE8BA1D267A8DDEA6A77BA3106A6BF
5C8893C457CF577E82FF229A45F7FAEC3D6018BE598AA09E444D0F77F63C7B91
B8989130CFF9C5A3A73C5332E0CF05C754FD0BCD36CC31C06E1A4F3440F60D9A
1A1014FEF8CF20A39384A38F46525845DC233B495290E304652F933F25CB99FE
1945FBDC9F05B4BEB54B3154F98DC9903276BA3F8AD278952CEC5050A7CC5227
BCA1589504504DE109D1AAC39B97AB1FF0483025A27D029AAB11C5669F6E445F
5486BABD5339CE256D3174D8876188AEE1C0B9BB4BE6F66BCEF2C09E138F8C12
F764626BEBF9362E25D22A9C6ACE18C3988C885C0F65F3B8A875957B66B96935
4B600C1F59DBA1A19E97C07044E94F863AE060C15384AA3B971E94EE6C587299
ACE16FA17CBE3F977509340FF834EA210BF0CCD3EC806A37B07E0D6E591ABD90
B6D1A3EC389BD83EE4E880CF3E44BEFB1931DD7E2CE0E540A398AA83F571643D
61426CC65DA4791C5CAD5D6C7128962A81910C6EC8950994644949E55CC2A2BB
87E8E9DB44DB791D1C46AFE2B89CA52607DAE2B6EC8603B6D89B8AFF8A4EAD2E
627D4CDCCEBAB949FEC21F1B21DAB10376F9B2C68B9D62CF4A3C703FCC8D28B9
1CD45377E5A1F4C28851DDF0F791CF48C3B0FABFEE356A1795DD32AC9F4FA88E
205D8EDA64581718ADF5FBD7277E57E9919BD1055C3C6BB6905ACE2A941B65D5
B197DF0A09C675E4537950DD15A39307CCE2C1B99B8FF8D5F1651E70F35D9809
B84B2D1D79BA01F71E56482BE924C444FEF0F24767A37E0B0761324819BD29B6
57D61E2BA950218A3AAEA34716AB139DB2E5FA1B3C3155C4C2C913A8D8C624D8
17CB4DEE893114A55B3DE51D5632924C067AB6859E87CC3D8787B753FF503C2A
A0DCE6A456F2D9710B38FE827B9CF16F7CFD366BF9B140E1940E13D7443EFCEE
D61612F2D1FE54EBCAAEF1F93926CA45F71C4F0C2AE58AC4BBE4A6A7A2B86AB6
A824EBD8D54A9EC211E21E58E61104620F93A71F9636D93CF24FE907ADAFFC6D
632D5F181D1D60569ECC2EEFB7B6B0263B8B5CE6EE63CED9FD957353FACE09B4
A3F3913BF55D92DA86DBCE70EB2902B3DED181B02711EE2C105FBB16BAAF98F4
69068B96F0CFF8FAAEEA1F97298F2523123F3D84B0B23545E612B1B88743AE23
3C9532CAEE6E67627F9BD8CACBAA473A5F3CF4FFA7780D34BE2A5298FB9C7745
EE9FA75E2D61268FF5B22150195CAAFEF9D59DFC1D33D6CACE95A3A05339225C
3A3B90B82EEA07CCD942504AE8AA09294F3FC2CBE5BCE52038F9BEEC854EC912
ABBD49B7353F976C988D6CD724D33850E9238163713290D88DB5DB0AFA4ABCFE
7B8384113825650D8A62496EAB5BA958258261A7938E3F656986B64848841CF8
D326DE80AA873FF01E38A664B36AC7BF1DF9B7BC8CF0BDE011B1FFE04E7C6DFB
58DC9CC3103B3D14CA282B10C5D88806DA33D13BBBD899E179D951A84061C422
1C5D87A0E4C866AD8AD9A3F1E11BC2A3785B89F2BFF689FFC78071BADD5F708D
F3C962EE2EFC048CEA37D6A182ACDF7D3B13E6F2ADB473624D7CE37CEF647875
DE5EF2B4DC6D791E54A9076857A60D8B182DC043955E78E558110186E7505426
9774EA4022866062969131FEB333E63AC82CA47AC060FB482B26DB483FCB8E97
F39B473A5E60CAD59B4B3B349146BE16B93600F1254FBAE5E04DFD8239DE5571
88DC280F5895B9A0D3936230894C9CADD6D16343DBE02536E476BADB55EE925B
6BC8A982503DF230C60447FBB0C3A3A15EDC6C87355C5F7C8F822FF8859C7FC5
DE0FF82A43D64F46F4E4419C9DE4E33BC91C385D08A6F677D91F60523A69B421
EDF6D0F8BDF4788B5164EA972201E61C0943A12A116C951D33DA27C4021C1082
4F634BE3C86F9764E9D7D58612D5B584F6CA549D3C37D20E5B0E2D44E103D16E
56BD30D95F92792FE05621628BDD3DA83B95C9D36BE27CD80BF6CEEFB184F8A9
2781EAB71CDC081E64A199855D338B26A22FF420D535A68692D7A708368260D9
72D368412B3F534ABDCCE11E55B352014576858A265DA5D786FB7643A60AC96E
CA512AACD9260397B6BD29802B59DE758DDEE932D14E19F2AA3CE074F149C2EE
B295ADB1476BD906B9BF3D12A818C859B6F0A9CCC92F268929EDCA39763614FF
7D192EAE9ED2BAD0EAFE3D4D9844BAEB88688E047FB49228FE3A7ABCDB26BC85
2F5DE03B3D0A4233EE942AB48A81786791A0181E791B69F4DA8D1F6D4CDD0CB1
2D64F219E088C60EA6EDDA3B1DF5C59F6B94421F6D812255D98D28D54D86351C
8B082E81EE08E8D3D565E42987DDAD2506EF9A7B114110F3599D8E6CB9E93D14
1668D361EB44391B25EEE4AB04EE89A019EB6E90DD5E9973BAC93A9F58FEE5B3
1E80A4676D23FC0E90F03456E1231CFB3CC4E1C903470A7BF6EB039F4D5DC1D8
477988E9866A5B27483B7CD6C9F82415A6493913B6F85C089DFFF32423247404
B134A71EC23B34833BD3B6BF56210B6FFF3953D0913B83212139CEBB6F132F08
75DFCE9FCF90586E27924A76FF8DE62DAE2EAF5159FB19BAE7C86D4649B94426
26AD8215514B0FCD8B218F5D6F402974C4ABDB326584908F5588491201A7A7E5
884507930BD0C12B55EC21B9DFD61699F973FD9B3746D983B0BB9E1675AA41B9
F67138ACB4A578130F39EEB088CDBB8BA055C8AF1CC348988E2CD95EF5B5821C
138163957573341E0C70787DEFA4B3B806CBB914A5B1A52948F1081468CE6E5E
C1E16F206873FFB9359D057C364EB8747A414F55FB4FDEB79A695E89B04A2615
E107E366352CA729681CBCF4F3103842514173149A09E798C85AFDA5331918B4
B019B338AC46D63884218749DEE3633FD159C855C4CCB5D62DEEC1F04DDBEAE0
91E32A1A3B9E00C484FEF7A735651D0F4A23097F16A8568F31A10AD01DE69514
399D2282BEDAE14864E48C57D0F833DEB0CF206296ACB7FE79F11FB59B0CFDAE
2C9D3E76CFE803EEFA0C0D87B65FD333DD6A1DFD3F3CF2476231B11E3005F3FD
9EBC2B6A25E5BDD170408D11B9A8D220854FF4F3E28903F9EE7871C0F55DB2F5
732B108111C6559FCEF60D22AD90E1244D5A2279567FA1FF6AB9ECBD3F662977
0A49636937914567A3E11BA440811566B600F6E1CF3539BB947A4B45F70F8D08
C2773AB6D35B0D71965916535E183E675CCAB1279865DA7740E0685E046AE1B9
9F5177F66C4A4B2D5FA12D8E1E1421EDF54D2F40E408D52A4050633E8A7300B7
DABC8E4FA65F98DE109C77E72CAF37828097BDCA20108C752F98842822EE91CA
5F54DBB4DA24D13497EBE63304B409F97B90CBCAEB4AB5767307DC68AF2217C2
CAECE05C2212B6092F008129872A0333A0BDA8A1D42439C2D37944FC2A65EBB8
65FA0E770071CBAA80F58604165ED82C45D26F55C7EEB9911105DDAB231758BD
41BEE389B057A1F7D25210E2505B7FEEB7B4E5B768EA4B1F6A38031C93B1E2E1
2D7E2958354B636992B95C5701F7BD4DE890483AACD4000D71140AE4AA928FC7
A22B23D2574425D4D3739ACE775C6F5897742DE68311D5D4FADEA06F18A44AD7
39F180C8A38B6F942A983E4DC8C4D2FF460670E2D702492A956C0DA783739DEC
DDCDED8E9BAB67091332929128EDD4F9537C4FC9157B81EF316BDF0AB5C0DF4C
AFAF6AF860B3FB5EA374CAFBF183EE71417BC586BAB8A73AF2D7CD72F75A1B65
2F87AFF99B1C7795C90E73A17AAFD37BF5E7D8EE43DBFA944F9FF1952FE5858A
463D1D1546B223337A4F7893FDDEE3C61F3EBFDD15A822138A17ED1A8A1DEEBE
8A4703D4D84D1B7B4499E585B500D54F9D08B680E1263AEA657A937309332398
09F529E3B69B892B5E7ADA8F84B4089802A732F2AFC037D6B41BD2338609CE52
679BC2211A4327B6223806B8F794D4A81D5FFD278ED49A4E67E7A55169B3CAC1
5A2E49B48CF046E74062F3B82DA62F951C898CF665ABF045E74379D67EC0B65C
1770C8A04DF761B712FD53BAD0206AAF7C9D25D99E41CE17B3D14C007CA68E74
F04288B9D00DA52EC3A8AB32AD1BFF03FD597F2B8695C894A282C56BCE1F7871
2964600B6B3FE511B0E3121D9767B56994D57D8EBC8F15FD29B3FE0B28A607D5
242312EC254311435101EEE86C72AFF634983ACB1A35E9C925F0806015464117
1E00413A9B165CCE495AE3EC6EE9C4FADAA72FC2C4A95C05EDBDBAE54E4F919B
E1FA278AD38D40743CF176A9C55F64CA6D8DFECB7489DBD42DC2A12028ECAFDB
6CEAFCD1246EB630BB614830B33AEFDA5E40DF238862E45E699A220C9675C1BA
D7DC4D9416C47C0CA060B2BF0DEA61430A8C7F96C509554F83AD46F65BB37DB4
168146888BA94739AA399585EDFCD485CF53046C46238C6F9CDB39DD03203129
FBC6B353DA579B39935DABEE0776B1A98FC2D040C14DD87114A9B084D553E29D
2B7E139C4371DBF46D0F06053DF9D12BF3C5868FC08288519739BE3029B530AB
99921E6EB29842A5B1703977E8DA12801358123442F453C8D6E9468D7CFE6256
92216393061066C702294DDF2B593AF4CBD1DC1C54A7BAD4A8EA0EFB04991804
A05B350671BA20FA35C06051099887B515B819A31B1AA075BF1665ECAB734FD3
30D412A44B5FACB1B4656E5F3C75320B4A2F89DE3A12D0C0EB4CE0F768D412E3
6EB080D4C830CC963A89BB6773E5929E1BB1D4C5795DCEB80A08B89BA7546612
7AAFBACB0995844F9D6395460DFA7BB96A3EE6DF02B18E6EFF37DB4FE4ADDC47
E287E73099943D762D20ABC42DFCCF4ED0E151DCDC682D9476956749691B0E9C
8A3CBC66C2FA69969D54CCAB855CFBA0E227219DE137AA064BD4D90BC30B1638
34B1FFDD54FC01407126D3973FE22CD3AC4F6FBB0AD7B9694AD1C5E536C37344
FEFEE6B00CDB5E4863616218D2CE7E334269B09058841D9821D7F900B9C639A1
49A711AB4AF61125A781FB9560DC20F718F221202783DEF88E7D5868D4438B9C
18E6F4E851C2F2033AFE6DA413A1873C0018BE481462384D0B6BCA5C77944239
31DEB499C71ABF2573FC7B8F62B96A3D9F7C3D18CF9FCE7552546BC4F26E22D7
6D9D1546488B7E05ABAA458C5CE797A327685C3BE9CE8C60473C239DBA7010D3
C9B6F79B12C6005B9D3B7E30FF26A1AB03592F9372AF27DDEAEFF8B80E1A4B67
31888FFDB0450D15ACA03D07E8C86C3A2495B3D53AD7D485558056EFDE8757BD
40D52FE71FB417926EE7E44FD0466EE86CAC90369FF71A3E5A029705C3305FF5
FB3BC66D60F1E327D7837C4310523B30CCA643C89C739929DDADA413EE35894A
6A5B14CBB136548C4DF700DBFE22F82DA0FE709B9447C5A8A607BB06856E4454
C864804D87E22D9795AF21D9993CA296994E7D9E7188BEFE44370A518F221C5D
953D367C323E178209B42C7E21960E4516EC241B07128DBC015A5A9C77B57157
40706F1D3B348FBBC98F653CEF3EB83480D8BC725932A89E5D94AA6EE8E64C28
46EBB70A89B4B8E897B8A15302D2B0120F58C111C822368C38D1D5338DB95AFC
6AD4127429C6D6E54CBB17484CAC753A01B209DAB11EF3FB83BAF106024E74FB
8DCABC02ABEA019EB047424843C0F4BB89C6D93DB82004DB8D23F03EF12A8B55
D35EE1A1381BB8B99EB778C692088BB25244713921FB7E9C90220CEC25BE4B6F
61DD4F07AAF31F909413408AA78A9A1D1C8A6769A3C1F34B8E6E045BA334C557
DAB3747AE88CCDBD79E15298ED1F16748BC7A0AE4E460FB75A6A09F4FECED304
2BEDCCE25128631C3084751A63C1BC45365BD83C55352E31D22E5DCB0151C510
BED939204E0C9F09983C42735D6B1834081E641D45DA8F0F3F69A78530675A35
1DF8B1BF64993538431D7A4036C71E673F94A204A24028A2C3D06395239B7C1C
C5526C461EEBAFEDD46CC4FE3E77A1E367A5D55209BB7C9003D2B4513467DD2E
9F8473DF99B4FBBD6BA06E4B7F7CB6707E29C1E8B86EE1B4D2AEACCF4A26C32A
540E5722E38397222B75A60D29581ED6325717ABEF3C43079DBEDEB30A5834D2
2F15F128D8ABF6D92698578BCD5050EB4740583D4D84293FFE33DB4DF93FEC29
E2E0B39EE09258C6261058D36D9902C2DEFB566AD06C5F44265A704BA2C5A9B2
DAA6881C88163DEE2CF37AD746AE044603C06456AAB9C9F1F9F4BEC607A214CA
E0050A1A26D57D9002F6FF28AB27D2F132013D6F8FF976D95BB9EEC69E99D8B1
DE9C72317C947314ACD5D2BB98B01165AE4FE1821F65490CD3D2DF2F9D4210D4
208C7BB1F46EC8C0A39FE02E918731F757716F990FA97B94C10B7723321C02FD
575EB19A9664C864AE8830ED27B91C3A48742628B2B09BDFB9B1CA9742A4E677
F90599286293CA59BC07EB47EE2440D03B16F413A27E925FD64977FC6CB45297
D2419875BC977622C49B5F7377BEAA49275BE10B98DCAE0CB0290F60310A117C
DB3214E6C57EF1AAF8510CF34317EF4A9C8548BF1E481E9047C85F3057D7DEC8
4D3300202FAB28C667113B709ADEC439478AC3D492D6D9E2E3F99D63F2BEBF78
96D425581559BB348CD77DB6881252A078C33C80C3625B1AB3426B888F9C3628
5AE949165968371BC98C52E9A7596729B15E21AF27463CB069625924A35E7ACE
CA3CF0ABA4E8AE67394952B2CEDCD2AA30E10A776F429F4FADE7D0193AB6F25F
29A23103C6452FB40A2C48C3ABC12E75610573883F73A4E647A421568C14C8A1
2EA2EF76965B9E668A7581A18257B6B80F3427A015BB6B1D233684546574579D
CE45F43E7F070C0098A59F571942B285B4DAEDBDAD66B680EBBF79BBD31B76D3
03696D2829133DA4F4D55EE63961CAF57B5CBB35D08B55CABCC444205F63D8D1
7BE2025AE596766B8AD80E2D4E4108E27B6F1BB835E53E8A318BF211C607E2AD
2EAEC84A3320008643751C804BE01BB5AB8F02D7E9046737832C3CF3D6B61D26
4FFE8BC9D33973B2EDF6DE53C323BEECD3423386DF08D33E2A0100D427DE6B3C
F62B7018638D2203073907A10DE1F99DE3CF514BC9AA6FC687ECA5198B333B22
7D98FD7DD72FEBFCBD09BCA34B9EAAEBBA95B91D03A510FE11DC5B57C07FB38D
E5C5CBF059DF8C6730B8E2FB4B9514C955A4EBA1B8231E44C03DFC58AE2FEB41
81767F65B8EEFC6C099B9A84CF78469135F77DC70EFE6A4C39417962E0DE4136
1C6F67E35D0A92F71A95BEB00CAEBE9EC0F3F4AF5156D7EF15C19D86406363D0
550F2BF8D9BA6E75FBAAB252871A3E84FCA508325A19AFA5F35647EC26C72E48
11AB4B8976C81DF7308E7CC65DADAA3021BEEB0166CEA71A00B61CD312CE1851
40C30BFAA45C4B22D03B2E09F3BB6C732E191487DF441E7D4792B82E674B8577
6CABEB16C58E5AA2513AB3B5DB9A281D1E91B84180444A0A0FB8672D00B7712F
796FE9E02E97E8DBB80B40A9D52348DB68CE32AACD6F9D53960B853A093B1E67
3C0F293B32B0C7D3BC65F75DC91EE073DB7DEED7DC4AB1298C0EE14EEEAB23F0
4E5343954D3E4231114F6BB6EB3FD6F5888456678CC23022DB6FE7314012E10D
C699BD30ACBBFD8728CF47A183D661A1C40BF29EFE2215144B920932A7049DEE
DBB9C184E5E7E618456BE93B82357E46385969F803EAB0F4C3BCF9F5F5E9D778
4030F620D9A8ED86888DDA3065655A687D7ECE9214D55F83780977E36F0B5844
75D4001A48ECDCD862E2CE1E72C65AA46BD04BA58DD1FBBA12AFD931D72997CC
2A31D8B2D2D8E5409B4910DEF22CAE863A6739DBE9C6E0F4BA355EB7694817AC
C13B994519E291136BFDF44BB5401AE3D1480C7A4C55353C360C86120B5775A4
36E73EAADCF5DB74F141FA31A0F4C11E14DC7FA7A2E1A47767726BD5F4176007
C4F8898E3EEB716E56B1148ABC12FA8B0B1A37D7395C143EB8F2A289EA9D2510
4C10659AE38E3014A7201ACB50D7E67063197923A89D0C478B7D82C2E3009781
7EDEF815DB0DF3E70E6AEDCF86E7F538AD30D16D94BCE9E2F06F490ADAE116C1
60C22E2E618BE83AEF753C21CA008637CDAA9AD934405AB3FF7F201ECC824FED
2E3B5000DAA62E2241B08F3F0A6DF85FFAF51EA15E2164132A4EA2EB1CD8927E
F51D40DDEBCDAC779E693F16683BC7EFAC5BC5F62346B7172DAB2EB6C2B3081C
AF86044F5313C4228B405EE213D06F4B529F8A436D3D6EB84864A963A36E0002
8F3FF291100648105401E8B62AD31231E1595D53538A8E8C4D0AF1C58D3A1BED
EF80E0D46ABA6C8D2D2FE6556E58C42C35049DCC6E0599B2B301FD73F527239F
6B5877327B76D744A8AB84476D8B05D823270318E25B64D9359DFD55D1D03B36
8C27B5D3BF80B0F1738F0A0614041D0327B2299A74854ACCA4368B00AF49406F
6032E0D92918ECE4C77F4131FDE9EAD8051712623440EE772C8B234433156D2B
BBB01DF73DD7015C7C863D5DE802C415A563D75C8E940D1A78E9664ACFCF8AEA
14CBD01F04184EA1D81A0386602371B190E26707CDE0E1178E0BBCE21DF690A7
E4C1938113328A28ED7E3BBA7EC13D66D99A1D2B1B46CA2F0D5934C4F1F0D429
456E55BF8C913EA23D74CF0D7456CB304C6FD446C993767E44F2B7D214C2B445
F0971A9806E2EF49329A651C6C04AE8A6727A010A63FADF4F0CB599FB3D3A5A7
9C99D43C6BCCD2D2B78B021A7C48D4CC118DC8F4213B55C1131CBB4364D9D415
707895E2ADDF86B859B45AC395944928205699E11CB2BB86E4F6D9AD7C50BE72
D7FCC7864912F335B2932CD968150B80E1A7664D86D2F4979FD7418A1F3FA9B7
01EA7592603DD499A9AD986094E6A232955D8372101E1D24AD9EF1DD336C3F04
4418196ABBEE0DD4ED5F16C923B7DE9B5BED11A1BAB626B66C64E50A3279E6E5
D2931B38D7846F5F56F8F1AA2FF19FBFC0C3B6D5F896C40CB8A4AC694E4A4C3B
4D09D81A281AFD3F076AD17DB77AD4D9EB67B7DFD59BC499EE1AA964ED83D6AB
E2627EFE2C9B087677AA954ECDBB136FD17CAA29205ED86CC282A0F4775605FE
A975CA559A5A90AEF81BA5E0EC1C712E6CC7902ADDEEB54B16E1284604E768B1
A41AC04A6AD09741968D496FA79A2C54463022B7EED2649BAC69D8B3C3FA641F
98A3C5A4C846C6AF20BD41F2F3494B8E049727B2670096C5302907770866504B
E57B8718D6A946AB29831A60393A9019E2E06AF5DCA4CEB9C03237D35114DEB3
503AD9B3617334857EA9926D1BC412243B72A970BD52B8F1A2BF0C8E0FDAADB2
DE59C3ADCF2FC832D2CD64E8D7002C4FDDFD7D0BA3797FC1221DB27142BFA351
36D3B28DF52C95ACDBF399B337A9CF9A312C2ACF0D0FB23BA2E6A2690F67AD90
B4012C62BABC081DCF77E41ED79D98769F099C8FF97B3971EDA1EDC3707C6E6D
E5D987C9067AEEB185D4E20EAEE69B8903F97A945F76F23AF0CA4157DCF457E4
AC55E41EB9B104F0112948320A4624917E378761B5E8371F9A283FB8579F5D36
4B83B1B039D4A88E13710583F179440DEC056CC15A394605D0FD855D8DE5944A
631B2E0ABEF3A96F566E97F4BE94D82BF8C69F8E43A3281466A41A16A48F7B74
D4BCBFA55FCF31591FBBE4C6BF4689E4A980A46CFA4F9BF77C1A86933F1ED867
EBA181A1098B3B9A615D5E071471BF8A5B0B825DB9FF7A3EB1509BC1379D2177
34BBC12971C7AB6EB1180AF0F9F405F2B747DE1F217F4238A1B32A804A8B6E7D
DD2D6D58CA95E4F82BBCAB2E74B3A6DCFE9B1990A0DB13C2E33388276E36A9E0
7821C070CBA26EF090659BCD6816446AC5B91BF6BF92C2B6D8221E20CF697E4B
434FA2779759E228BF27DF59F05723AFF8F8E971B682016ADFC90F7240C9820C
5A47A9DF4D8F6A8FC67659F749686E6F0A245C8A5B229AD3ADA2A8BA5C7BDB14
5874A4AC107DEF4A5462C0FAD653B19F7CF1BC4BABE5DADFADCF4BC7536A5038
AB5833FD8D8CC3F5B469590FE5376BAB49FA949E056E0AAFD505902A4DA8D564
9837F8C6DA578135C4EC88C5DB5628F4A2C52117D1039A52A0D31A3A66FF5149
FC336346CE65D3EF1C6CAA1141CAF9E48B33CD736131BC0D23BC123EA64CA8B2
529B10EDA619C68D184B16D435AA6537F9B52B82FDD3D12F251752FE463F8D98
21751D1FF032610410318850FF3387D710D513C960DA9A3947DF54C752A2FD6A
0E69AC01D7F47DAF68FFDB416935BF9A22E23FFA6EEB74C2E65B5EFBA148B9A9
88B9973536BB95720D5199B6C50D2543E09E67E2F739E627FFAF15FB663A0400
1D4333E8D0BB620AC826368B10294D44A74F8DDBF479466E5EDF035F5C9D9BDD
FA256EF4090A0D8A9A9AA0FE036E8AE2D9C7ED3D2B8616E47539B80B384578DE
447CA87B4D97D894FC8AC9BEC26A9C33EFC484FCC409CD6300F2A021B70580A6
82EEE3BA349B16790E40DAB2CA498BE0DC03F201DA3DFA16E68E20284C62C1AA
3984775BACB7F29AC32CED4DE4A5B6C8C04E68D1C9B58C957396F9A946D455E0
9F2A4D6BDFCF2876D9A60A2373F997362DDA160A7678C44253CDB5C544E9B4CB
8F1842BBB540190F11C953C3C862FD081C6B7EF044E919DBC2C7F4FC9B5ADDEB
05F52B51C0D277552A9B625183B915F3A346512332006D8C66D8F79484590CFD
A0EAACCB4A6B573D1FE5A9F9A2B25CC4CF8DAAD180A666920731D546ADF722ED
8C94E5BA73C834F7D6305B4113ABB5D3E1822BFE7FEC56CA28F78610E8911DDE
A7BDA21F1398495736D42F43462ED8F5667AA357185BD1E48714D7FEA240E87F
57325BAB0E4030EEDD6B788C07835AC11B18FD459B8738863BFF34149934634D
24D539C5D61B9418CDC6DC0B08EFD9BF6282FFC8213C3C3236D56AD2AC2E55F5
90405671D926EB7349237157219D7961802DB4655F184A5258CF0EDFCDCF9411
48740AED1FA5436E30F0DC400ED9F2E46036329BA936C9571988D7F1A03F7AA1
2EA36861D1E2A50C4596F7717552979A56A512DDB14425FD8DB57232A484ADD1
C81D68908B09E88F9A31038F63EAE98FB3274133EE4C5703256F9C2DB7C0AF11
BBE91BC55A81CC894210DC56728C454339275D16781CB3A8004BD76F1093AB8E
2DC624B2C253F7C0810E82F376941A8B27764FFA5E59EB93448940E66F75303B
5868319C2B38AFDDE58DD06347F5129C452287D91FC296D93A027D74164396A0
EE50F751DCA1A0DF30391C0005F06A31B735094B8887004A143E2A6C4DCDC0D6
CE545F11BD241FA77F7D3743522A23151F6E168DD11ACE03D58032196CB74220
158EBAAD2787B8F1584DA2086356841184CCE6A639D4BA052544F5870FBC2682
879F515C7C357A2423A58364F0460453F1B506DBD51ACE03D580321E5352E9EB
0D2EE7B7CCA82ED86EDF0A20A5BB119221358002215FF38A1996F3C780D05C17
C60A157FF17605997A790EE581D8C0AF36266EDDB105C97E77F6F21556081F86
28DDD135401DF3BD1BFDFCCBEFF28E19A3767946A60B2420F3DF89396A429FDC
DC16A22EF6438E0E04AB55BE6EFD86DD089CE2F715B7112DC2D6EE9012B0D6AE
C0641D0D0292ABF6E3159CDB020580CD1665FB519B77C90385399C387FE21E65
511CB73D8BE145F33A95F9C74F5507412F15B03C0200B1E3D2B1AEE844447E12
32033A18EA43669E8246B17046136F1A2559ABFA7D23CE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD7C1
CE928A3B7A62E15FF0E53E8441C88EA7EDDB16ACDD26093F27AD276C7EBE9E54
1686DA5E26A4CAEAC39715DEC0AC3226F89606D8EF5ACD55D67B059BF6E8F30E
E359EA6416D91CE21ED908D6F8E0DF883970D349DA85F749026AB7D8CBC93B9C
B12EFD2936C1B63ED2B929C033A7F9759BF94C668AD787FF73B1BC042E3BA32D
6008B89E8E030D46B0E9F0247510E37735D1055E32143E97A11060CF072D7955
9B316AD1B56F342BD5347564C463171E3B2271E4F2B25C44E345854FB204CF96
E9441266931727DBFC72CD872C534A411593D10A734F54D32BC5663D02A3008D
95BE5EC1AE472B75ABCE6A6BB030727318366835FCC219DFFAD9A7F7D2850C50
C01F95F2BC7443FFD645E8EB8863132403F6552F82A6C3CF2AE112F8EE4E7A06
63367535A261D18BB1A26E4C2157472E938C018477D107652BD59E002C56B3DD
423BE925DD0B46BB86D33CD66D069CB847A315262F8F4F114D713DDE8D3C9B37
40FE2E9D8D012D2D358ED89B9258E54CADBBB3CC59D3FBE6A84F1F9521B6E05D
0A0B2E0FCA57280FBA427EBCC9F86882CD96EEB8F3DDC554ECFEC9AAC229C31F
9E8C66735C59EA38E3BCACCC6F85A6E4576CE0D0B850C5F5505B61D785C6568F
D459FA6AB02F16E58ECE66C909B7040538B5E7DE80B6DE055DC28C1B3CD4A50D
077FE7AE2463F40DA89824D1C5D17DC70E135F666D6CBDEF35A8DF7CB22CD7D3
71D2156E4C040D7FFF62F56653DD40C4DF8D976A9561F7A2A4AAA27D75E805BB
F6F2438217BA5121CC668458620DB3D381D5677019CAB09FD5A5ED804CF9A763
367BEC85D9D26CDF0AEAD7D8C7AD70B7102FEF09C25D849D09E261A80C7C0A81
E6A62C2934321262406E81E6D5284196D0A5173202970C50B6914B1A9FA36793
CDAF2C6B0B5B2BCDC3A9A24F32657FB3C5AB5CA53FF04D309BD67200DFF251DB
7C1E872D27108DA3720BA9E0423567DE1FB1A1C7C39A7E38131BBC8107ED4187
C7F90629FE6A0C3A2E91BC1D8766A4FEFD11C3D600607848EA4C75D479FB097A
B43804324D050BF5D846C198468D3B99CF91A25FF02E328B4505CE523493D18F
3F02B9016E3D49C2D5D9A5CEAA57219F11185AE73046838300FF9A722327A7A7
0829405B8057567BF58497ECE9A3914678EE3A7C7BE83587861938BE31028361
9DCD7B2DFDC9DCC814084EDBCA084A7F5BC024835129BC973464E42088642FAC
FD91D0DC3D0BDE2E6DD79A6CBE75AC692FA0725A24BCA26C14569B48443FEDE9
66E1CD647E1807EFDBFA1B2EADB5EC0435EEDAD922BEAE31D1239719766CD650
AF2D9B1753B7F087F228DDAA17B41F60997B611C4676FE94913335C35BA539F1
DFE9775FBAA1495A572719400771332BF013ECA0872AF2B85E7C1C3E750A52C0
70289822BB030286ECF062921A8D17FA331966743BB807BC62ECCE310D8E8082
9BB14C7D4FD2C4E6057BE5F5C51A242002726254FAC61AC139CA000B293D12E5
797D09B504F072B85E8E4F20FBE600F1D9DD0E0ACD84D43E356F2F4279001DF1
05945CE0ED14AFAE4C5E3ECD955E06BB19AB872D8EBACFD538640C60E8146EB4
0F9A01EBFED0DD4DCF5CEA0E750A2A8A15EC363DAEC92DC7E8BCFC67C2C33B0C
612EF2220F55F8342930A75193E883C04AC3D262EFF196C1056F26BDBA4BF29F
957B8682D21CF1CCFCBAC8BEA132D42722ECAEBA773E594003499F0F90FD53C3
0FDFAE6A7ECEE0AAB8449EFD258C8DAA3A6A5732A7CB0A03B0B3B96EF464630E
2E55C20F500DCDE8D0D4050278151B43557DB81EC1A200EC7DE4135733C7EBA8
36A58B084F2D12E5ACBA4C014A2D47DAF56605F718B787A38CD24923F8309743
01B03EADCF209219746A94A779EE401A821E659E84979B100B84152CF6E0E17E
BA2352DE294B834558F1A9B88ED06339E508D2D101C6865EC1B7DEF88C2D8795
F4FB986CFBBDFDDF58734B93F10457EEC1BA9D5B210A013642B16C7147B09192
0795C8583B1FB0BC61C7A26294870255E4A960FA69C68166F2AB48FA18536395
15BFF5EDE067598E1B8FA742C9F585ACD311E1BA537EE424CCE1F22EBA803140
E05B500332A74F141D8778EAF3910486B2EA25AAD16B6F26112CF9181FF3D2F6
37A0229A852C8EA274290FCEE33238ECEF7C54EA07F6FDB19C96DBA02AE3B0DF
0C1364F353CB8E81C41D9387A29171456E39D820474B9A2E629AC62031F5ED47
58DCCD11B11DAAF7A33CE20C97AA3D34B2543650F6F29F154411D1ECA405E341
4FB87448B8788DB7211A60410D8B624D13ED7CAF68E9544B470316617538D36F
2238DA7EBDF5C56C2B03F6BAB0D5AC4D24808941E5C4609D9E423553C2057392
837248E0B9321CAAD83CC8A0DC83ECEF9D4D51001EF6E00C9CBA158724AC4352
EBBD4EC845C80493B3ABABB911186600AC62FEFFF4F7754C444F5914BD17456E
8AEED7CF4C31FDA73EF6DC3734B6280B1D30131137AB222A517C6353DBD55185
45DB1F85A4CDAB8254E49213F3A65E698F73A56C086FD9F9CEC202FFCE6986AB
BDD4EF0DF8D274A5B7A04B57F2471D335D170E171DF8F5EAB5E059B2545EF6BE
61C442FAFC56D2476DCFF82529C7CE1504213EBD9FDAE57CD482A248FD0DEBA4
DEA452AD22FF83BD869FA553CDCD72A80A5B979D0E8F20BB3D642F77D8C42038
97C85F4F2242F817A612E450339C0FE62BD4CE8F5A91F5A7706C9BD70A1C421B
613F488652BEEC391240AF1C36C2D015551B07AAD8C8A0560C27D4AD2BCC0F70
95A3289150A759D04479627D1A70288C3CBA2FFCDF1A4368603D6B8C90420111
821EAC567FC09B4517D9443FD0145DD7514D8EE737091B05A3BAA49FCAE6E32D
C9D1AED22C2EAE83E08BACC0B12C70FFED18061145BAD931651A4B1EFCDAE07D
3B39BF4BEFFF935B48590EB00726C0670E760B38E8FACDF70F4ECA4EC2777055
4DB296C79D6604875AD818B377F65FBBED4C3200AD75E44E4CC080AED9633D2C
978D4550C09E8E89E7C834710685AD77CD51634BA70E9666CB058EA61F649BCF
D90E5614597763D2683A5962728A98DD288428DC05CC52F59D616EF85F9DFBC2
8F250E40D17D352B303F2518E05CFDC4DFA697683ECBD25B2206CACE3F59403B
19344D5FF0747242DC9C42A73A40E46ED0EFDE808AC369ED17E1AC94F2BCCCB2
99020037FC16E2FC2C82A5A8D5FE0BB2929C94EC4E0AB0128C153F62249BA703
1D4D97DE2280C10756DAC422F0B7445F3BD79834F4D677BDE57E323140280813
7187C94E45BDCD5D51A5C4E44700A4B12A886AE75CEF0729F6A657C92ABFFE27
5C7B24275AAE2770913C95D583F3D0CB980D738D7EF335D806C61FCB681942BD
A68F6859DBAF6E4B21ECC9E3FD1923C32789B45410AEC18605C490A58E10E7F0
A8AEBA211A64CA8EBEAE5684A6656D809B993AB00DFD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5E54DC130B3B64C1EA82BD4445555CCC8D8C82839F55A3BD
3883D46B10EAB91C83A0C09316FB0A6FF881EF3CF355472FF7AFE49961F461F6
0FA06C9906540BE0E00619FB12596B424977CF88172D2583B7883436956E4FC7
FE5E87AF6C983D4950AE2043610480AD2469815377244A0F8A1A03711ACD7355
594B806021459FB6F81F2408C1423259648C7E3C3908B4D748B201E182B53E26
20E104293FE9F6E763A8C718E03A8CA404259423E05CBDC2B62A15B22C720D3B
24B4BE61C87D3148204B3082FC07FCD2ABD635DA7FFE17B6ADFBCA979043CC0A
9796E0080E45D33C5A4B75DA3166DB400645BB84A6B098DCC8D2151374130102
9A9B2BB2FE0E8F120A45FDE2CCCD226811D375A23B26115CFA8C35F6C4CC5825
E649AC3F7C5558D962FC748103221FD24F625AAB3A8C4FE620271237707DBB83
8ECAB6E6C024DBE9C3F780001323A07FF0F7388F466C09EBB9BCC4FBB6459116
738A76C20B78D99494741E9186E2FB3F8777BA26C18C43E830B04C62D7D9A776
FA5F405CF51F6B06AA2D7C619F6FDA6110AAEDADC9FA59933EB4297689111B2F
EAF3DB65AE6D1C2CC32388F1883E6D6B0B43CFA290D0F4FFEC47A31360A5AED5
F5B248E01621521D323BBFA69FE044451F7606C5484FB0E9D44E1FE984D14E84
C65AF8E73FD3176037E6833FAEAAB446DA7CA4B1C9AF1BF590CEAB7844988201
2484AF7649C37AB6621F280542120ECDE7B6926FA86E4866505BB39CFFDC4AEA
160F30F006115E2DBF77DFCEF05BC1FAA98C115A74628BDF52818FA835C80419
B6AB69628EE6D3FCE2474FE577198E0892BA1FAD0244E7A83AE34B9079142E2E
61CCC0992B66DA71D8BE22836E6DE06A52F08169CFFB98AD6151A16BCAA3540A
85AA395D5B949329E280B1D5DFEDAAD93A074010458DF536B57FC05B433BDB04
4A8EEDED2E000BF86242ED5CA28A5E312DB3A0237D883C9B526FDC8418907C12
E370B786EB623158E39D2A24BC6FADC298C1DD2EB7D4F96208BB40C8C7F7F4FC
D97CF3756F1389812122BC4D89BD8481AFB1B259A7B19DC09BC6942904601397
AC6124220C280E417BCDE241F0C252C3D335B5B88C188D46282036EF183AC810
D42A2265FCECB32AA631AC2163E04A69A2DFFE85B298AC23152C26FFDC52743A
4AF692E07EC8648BBAF792ADBC2583F79F30F132126BFE88AA9BEB654A3785E6
3363B41F13C0160D90A62EF42340AE1622BE6C34C82424E1627E053531858F29
DD36C8D4557D1CC21A3B4BCCD2A5984EAF9D29EA0108B8107BD17C259B723F95
6B5B147E7C0D6AACEB4F282595A07CBF1BD05B68870AA4FE5CEAEFF2DCF00463
5076072FF7F7722EB48E8F701C11FFD1B7F263ACEC29C0B4A83F47864D162474
7054CC3E674581B8E88967059D9BEDFEE780E040423DDC5E3B4876FC8A9E07B6
9FA4B2A7B654190AE610915A5A3F5DDE99A10956C70A8B38A53D48DE00070B3F
6332290E522C15C25A25A9BEAEDF855CCA6D737976FBB5E17A4D9F18FE05FBAE
6D9A2F9F96D45D538AFC13852FC7AF1DA794D7CBBECD1E87B7D7B3EEDA7B21AB
66C93DF06A84B1D55E39CAAA7675B583D2947F2AFF2E0FFF984F022FE12D3D43
DF89A922836FAA01D50CBB9B12B543AF2A86A99F4D544874B6A97267F4C63D40
93BEA8A34B315CEE932B40ABCEE760FC1E641EDE7B07C21A7F5CF4C82ADD5DA7
677AEDF95FA26A0D5DAB0FE2A25DED422E0ED866BD939B4DAEC9A3D28BD980EB
F458857656836DA17A687F4896901D4DC836B1FFF59B601F08E02E3209022918
E3011E2CF876AD6F2CAAF222237B74316AD3CFA839A3F2726AFF3A2E092658E4
ED76E68408B2D37A45A80B6EA8EC9363C4496E88651E5AE8AABD3A72E0226869
496C7C10E6B9410FE7B69EDCF9178FA56827DD7392D7A101E273541B8FFD8A9F
88AF4514DB965FD79D8348CE3C1F8B633847DE60058E64505E92ADC6E0AF422C
91AC39A18D0B21CEE508528C5E62F5E4A2C4C7B1AD1EBF980096EC4AF841E416
430F8B4403D0FA6EEFB5E0949674C34768F001827F12F1BA77AE85A4F20E8597
9BE5B243819BC3EAE9E2425C10CA412981CA4422F691B0A9B27B9B609BD451DE
720661D09231264978F350E769A7EB0E1B9BF5CD44BE1164638B6D9520AC86CE
9151EF2A4AFE4FA32112954C5B86EF7AE3D016AF29A6D9197FBA488EAB0EBFB5
0FEF925BA6DF2F7EC8B825FB4A657CCE94D311F51A49326E93EBE93FC663854E
529CEDFDCBAB8F1CF96712957859BC52FD1EA5F3DF42C22B1BB6C11FCCB97085
65DDE5047FF8489BDE53DF67E259A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7
637528B3D24FA21C2C7A8B1473B0210D26014CDA35ABE002FECB3938D4F61203
13BE0789A496A7ED316DD9911ADF82B98CE96563219F82D9EEAFC6F78AF8033A
6885462450EF87EAF7D39C885971ADCC853799433B9CCD5CEEF705D445F8F69C
A4B90D34988C1C1AE72CE581E82E69F404E3243A37FED454E63148DB09F9FF9F
BEB48A5422CA6E434F0CB9A57611856B763454BD5F9AA9AA0D69F1E82A90ED92
58885DFA663B0A640B2DC602C756B5F8EAF453A6D82701E2F0E44A36F865A55C
A2CE35711B0CA4E01108DF54D34CD43AE30A95C5E4E518E99528808E4E4702B9
EA26AE7D8A1541B8B41BC7E2C78D6DE2F6067219784B5B33CDCF2F6D63EED83F
7858FA73ABB05BD003F42980FFC7D49BE88A2F35BDF7171135278BED55DA92C9
99B3D614A234BC3ED396AC28B488B6A8CBBE519A8F57C668754C1108A7AC51B9
CAA30D80507A24D819475922FB3A7826A5EF683AD4C7D939C8B554707388C01B
84BAC1F84BAD827DED14BE0E7E727B463825F1111C442A7CF48B7A848E7F6957
34D5B678F848B50164F07B9C73FA6937F9161E0E82187082675F91CF7BB877BC
1BD97582F579D6B5691166D59F99616224E706E080926688173C86C3780C3635
D75B805B4F3426C6C6E12E081339CDBD43FC9356D14729E8002E4507A1AFD615
AD0A613DDA0C417DEDED931F56CDC90C677070565126AD56CB4E65D9BDF8A8C6
E0AF422C91AC39A18D0B21CEE508528C5E62F5E9ADE61A8AF0431F373DF8E1A9
69C52A99052A4D3A29C63F32D7A24C782DDC093059E1F19DC7286BDE844688F5
5114B5BCCBC707FA756BD71FF74D8B7E2347719C879DC2F20292957709B653D3
94FD9EA4F1FF51F599272143E46C9BB1B0730BCBCB20E22D06AD1AAE225D5125
A9E858517BB3A5A5FD566B6AA2DCF897875CD3C254FB1F1A72BDCCC82C603762
36C2126192A7326616CD44DBF86F6CEAD5C3BEA1E7044636F7D3BAD00C9938DA
2463A7BC016B3FE511B0E3121D9767B56994D57D8EBC8F15F82D8D5480C7AA0D
C61F197A9CB5C80A00332184637C6C41440DE511FD6F899938CEE7A965807EA7
5DE120EE0DDCE5DECE61CE2731FDDF7FCF2AEF7CC2B1EE7095F483CB8CF88D0D
4EC92A953711D45B9CE87273D1685586962D3139CA45625EC8E377254B67393C
74DA9B46A0849176190B1DA21713438EE5E5C3DA608E23BD365208D168CAEA24
B0C9920CC4A8F933F7D7E71505B73C16EAE856A92CE3DB0B46E25392CD6FC3BE
FB27A960CC43B18A018E9278B440F45FC2E6073239EF68BB926C483E82D29F7B
5F3476435792033AB924266D8734301BA52C51901DF4D869729A22714A5F0E7D
B43CE31215A0DEACBB97B27D29586D1E0321559F67C057FD7902194490A4C139
E1A56F020869427242D783CF0D5CA4661A6578FA0C8EFDEE2665CFCF412B9916
7152D35BC0E671E657EDD87469D1698E18525BEA63320AFC3D76ED738BD5395D
CD571721BB6AC3949FF9CB12318E20B680A50E700B9A05B7221D622A0290C6F3
1F4FE1B0340526341AE3D07085C9002F91C3255FD92C0265E30DC4D29EF51204
77430432067801A15476104F2FD601A5BDAEC2033D77840831AF54DA4BEA83F0
986EA1E9BCCEDA7A20FF9AD7A658A8385E5F5BE2ABC0850EF18C537AC5A70318
578646EE6FCDB29D798C9934744B098A62A8B873A7339DEE670AD4769B9E763F
69F5F53EC31C25C500F42B6AE9A3439F73E47924A24918A8ECE0DFFC2D4EA3DB
BEAA7A63B0279661F69F181917D92AA635934ABF0944CFC4A423BCE1E467226A
E0B39365CF46987758C8A8B729F90B73639521BC63A2252638E44CE1ABFEB4A1
080BD883DE8D9798D30A9EDE6936EA527F5BB4AD5485B9AC04EDAE551CBE68E8
4519D138C233FED4D1C66FE6115D45759B4ED416899EDA3FAD039B3A37809C40
7C41628E9338F24C82E9BAACAFA6C18C7F507F5D8CEDA179D00D1ED5E8A86BE9
DC1CEE3FCB03B9A0E4BBBAF5D8F787582709775477B23AB62F13004BC7009F6F
9B41583C858A28BF72B6F0779DFCCA2EC7F97C2795CC1C9F4FF176E2FD1A3FB8
C8FA19BB685C7DA55C5E0B9F00BA6B04D04CCC4B264DD76F31F017E07A31B993
51BAC166DF118C8C0DB701D2AC177534FE19FC87E7E26F3A507A759F15A73152
85D2565D7434FF3C75A20CB3C1B57C50398ADAD0C42A26913DBA294CD25E3BBB
2FA53D9822AA242100ADAE07838F53B0B7C64331A13816323CE98B42CF54E438
9A1FDB3F30FFDF2121376CD97019E10B7CA097F4C2DD17352573C90177484F7E
742B00B7C92F1FD6C41DAC341FB68C0D3A056F03D998770A0D22B1CA77D54D85
D1E6ABEBBA650C441DC395590E4999A373A0AF2D721BEF1C215BB3F41BDACF4B
2D094D0B4149A5E0985F04DBFE59B74C19F6098ABCDB06E2D56FD40D8CEFA608
A4F6FBB07DFB6A6227A73AA255113DF4821BC5FB9E0209311E5B13D4214E6B52
B9F5684AD99C6B52980A998A39F06981708E619B5116A10310B9B180DC2074E4
4AE680F6EC43320D24867624620D636BD5D74B42B0388830F37D86EC7B300C76
911E7223DEB980B829E667D37EE3804D9FDFE14D64893669743B6BC2F7C99701
486E6A847E172FADA65DBF0C00EBA9A358B189F80CAB3A5536FD4555823DB7D1
D12E2435634CF69890D14A1FF76CD9D5020633C264823E4DCE5C27817F9E5175
C0AD49A9C3C86C00421729DE4DB2F27D9264336152062BF9C1F7C7FA411C645B
A159C95E15300FE168FE00B0D3A2166DAD38B90581802EFB8FBD6FD2D9099778
82A9A1E80EFBDD2ADDCF49BA37A4AE429B79608716438BD99613EC6758E6934C
01FD5FE881F9994498B9CA251192A91D5EE108C83CE410DDF4CC88CFB52D075E
2DD5A9A5121F9FD0A55A3444E9909CD4A49E4600DBC7FE9A727D18EA999ED087
16B24C8CA056B20E5927F332A1B7A2CC3B6765B6B820284897F8E6BDF8674D52
F1A498223006A550EB524A39AD99C30A5438CFA2F9D3270AD44DC4EB4988B9CD
A202712F8520AB299EAB77CC0EB53BDCF9FC767A18B14A25C406CC4E7CAA5822
8247DBA2B741188B73332A47C53568D8053907081825CFBBBDD51B9F39B587A1
B492791B85F4673638EC5DFD9187CD9469DEEEFA077D9497EBA7D68AB23412E7
634D9B961E4D5E2928FCD08612B8EA6FDDB589B5A8C4895D9EFE1182E11CC0E7
AE75FBCB622125D76D9D1546488B7E05ABAA458C5CE797A3276858E48CCC2ED3
193AB0786C75301F9941E06B32D9D19997B17F820401628C3994C49C54859DB5
FC6D3B9BCE671347E08F3111EDBB246DF8911317DE4C75D695826A465E7E05E8
A049B8BADD510C82263FEDD03B3E6AE916B06CE26F851B56353CE9DCF31ECA01
8225773B359FBC14ACE642D103175D288DA1003B76C9A185EE6A8152A3119D1F
C32FDFDC9F3D23CA188DAC0F9ACBAE773FC5C3E21E7BEDC15F2C96058D5FB62D
083B34B01F8890C5E4C8982955A32589D03360B92ABD1BF4762108CC1B72CF4B
E2B72BA54AA1B3BE277E804C6BA17F299172AC3A4A3FC7DEEDAB315D335B1A48
1FE3DB344A5F50DA95EF3F0F93CF82D4A626666BE886B3315158838DC59AD0A0
948836EFD7575E2971F355C21312DA808311D07D8983EDC4AF097A9544BB71AD
967C4B8437470E4D020FC6E867725309AA9FBC37C05C42A2AF30EEA757DA4A7D
78046F961F470AEF97D620DFFCD216CFF0DB2E60B9053B0C71F7391CF6BA4882
A18B6602235F026F9D4CE871E5CC7EB30E3746370DB576D4DB2D94332D641EA1
7C26261240598A1190E6BBE6D10EF49349387EA298200DE19882B5A30785B49D
93C41B6028FC2870E4E57BA1B4773094EA195504AA67280B865E25B0FA38A635
6EC5262F82A1057542E43030983C4FCDD1836FEDC80308316401D8B181EE285D
6B2AD7F59CB2EC8487E1D3AFC3573EF48254753EF9B400DA55453F0E5D6CE845
0B21D3AE71B2C39CA75F0560C460079859CDB77F637F9953C07096E17D78E2F6
11C80A882EA96A4BC7AAAF9EABD6BB272B4DDAC2A26AFF67DEE5BF5E03EB7DB6
12716F5C328F337B4B1CBF8F3A7BBB4D72CA4BF8CDF622E99CE46FF5A5A0C578
162E7819C5A0C44A978A37EC78DBD79E13596918CBA39D1A7B8E8405F7B937A5
8A9BB4E74537D69A7B009042207C29256BAA8B00CA7BAAAA548D35CF0F04AFD6
5A7E44E10478D1858747EAAE222B1D550213BEA06364396D27948613EAE14130
7E76C13ED37655816E5DA7AFF8145444A626BB810686B1EE0C63104ADFEAEB7E
C79E0A4FAE7572FCE4EA321B39323C00BDACA87A5E183E675CCAB1279CA86B12
C503A95B3A733E367E50FAA92A5996F8CD290242420F322E752B75D29D4A5C6F
7445C5A0556A316E33A3C4659D431D416274BEA717043740561888CF924934CF
A2641530351D74405DEF39A01E9C18183C34B5BC82054E79EF60984DBB147C7E
2FC1F46751480BFA1B9D9555F42061A889240B2E196C3450BBDA9D018F6210E7
B84203308BD62BA71A8CC282E6E4F865AC8FDF8DF56A800735855CC4DC5EC98D
6E36532D88E40FD4C806A800945B84F94DDA4B538804FD8DCB1C0AE2D3EADCBE
041FC1257A399BEF9EB82E6BD016871B1147B362BF40B39A419FF010D3A249AD
283F5387224270F8133FA299289B24A8F7C3D113DF45488C62D0F2585855BBE7
9443A489F2DB999635B7CE630194962E4183C3838D9401260A74313A93FF24BA
C582AD3F7DD4F42C692F7438519AAAEEF054966089F0C35EC708D48FD3B3B6D7
64189B89472591246AE1795115AEA57B785862408C117DCC0D93D513E6797FC7
42585727C12F16E867F7B692C959CDB7A45A9A129E5DD8786EFEB03417902249
29C26CD5771AE5B8DDA9A153D014F5F5EB1E3CBCAD06E8CB0A595875789BCF94
ECA3E8C6131B4F0D752C4C6A9FC68AEBF25F1D023D1B2C8856814F1ACC4A7F7B
5754BE7FCF01EF9FF989CE1D15F42B476B322B43D601DADA1DE6C35BCBE54593
D066BBE7DB096F33F794B041278E1FBC75C49BE7F2AB75C31D58ABF296C7A918
9A9F16136068398E090398D30F813CD9D5639E3D24E6C41BE139B761890E3FF0
13C7064786A8CA7C0098265EDD8DCFAA7F25EC0DDF6B8AF6C7068F42749F90FD
DDC8CCD31B7ADE7D90470AA749FA5D41366892C857A51A8D59DE97F8A01E890D
A5008479330D93F555DFC8C27356F012F469039685D8BE9CEABA298DB350AC03
D73F4DFBF1005237BD3132973E3F84D6B39F02EE005D206688D0DC863AE9D671
BBAA034E8C3203081B52CE9D872CD46D534EAAFA2CBC4627306C58257DD35FAE
E3F282ACF4715E5D2780FD3BDDC55D898644B62521F7224CFDACF1D190103A19
52AC16E3CCA2CD03D879D88EC622C9E512A9B2024A9C0EC0CF7753FE13B5B25C
7D8FB5E68B9516C4C99F5DF780BEAD3AB69689DD71851FA84DA1B7F2BDD3E8EC
CE1499F3925DACEC43096D5B877EF4BF0BCB5B70EE1987D6739F21631E0B79DE
3D45C8465393A7DEB7DA08B3012A99FB2FC7F6FF7AE57700661FA87B9A81A324
9FCD0540EDBD9496769CD6DF37B1D56F9F67952116166482CAE5E08BB53FC5E7
2D3EB9661CC42AAE92197EEBAB524642B77C830532ECC75482E5350081834EB1
5A74B25E1E5E8D234DB91B8EBCAF21DD3C4C80193F72B5357E8BDC19B408D908
B1C5AD935A47B485758B4AA264F37E7F9262FC8C671FB33550D3CEA257362487
180E36AC1835CD7AE41CDE8EB6DDF2C22553BC75499A088196A877CFF424F995
84BFB274C4D22492EACAC8DAF08B5F99CD7C64135AF75C84EC1B33C8D056F4A4
A8E408604369101BD16DB8A70A7E46F92001D3F5783C65D91E8B28382FDCEEAA
89A3E0A6CD429A2A51974D9843BAE4CC2325DD56CBD9B4B1C19A67CD1792EC85
C25A532BAAEBC8A228B58284599EEBB4250B3B4DEE483EA847619A4F016EA3FD
DE47DF42E2ED8FC597B475A86B66D0F4316983578CC350251B4474B677CEB6C2
481767E7D491B5803E4E32D24FDE0B7C56732957AC35E7CF54B78A6A20247B49
CE410908042ACDE9414264C06FB0FDDC2D6B02C0965CDC0D91DF1A487ABBBBE2
E2896E68C54CCE2E2EC8AFB8FDDCA425029BF91E5C3F4E0A5AAAC62B49818A14
1E36A6EBEAC4EBDDFFE3A1CD8A96F39ABF1F7838A3BAD87A6564FEA96ABAD11B
83E2308B2C831540B35D6A20C60658D61ED95E7BB4ECF7DB3731D32F1B9D0184
0D01F61B3059A4FFBAA46BEDA4208F9A0622C8FBFE56143AC03A0FD180920244
4C7DA9C643C351C72E1DCF5DE1745E800BCA9FDD7F16E43C168230EED06DAA0E
A820F2C4A2EC29E036A55D98AE4F2F7798E4461923DE5009E59E3417FED153DB
CA288DC767537CFC74AA9F300C455AEEB30CDD6E6108747FD778A0042C6E39E2
72F4E12449863C38560F4C025E8158D68F71F943AD714A59E5DBF801CDAB652D
681BC673C26D3C73FE1AE39E5DC10B27D938E4E2ED19D9A346970B3FAAC4DDBC
99597AFA201302382872B3C31E86FACB377A74258F2A896A802E56E11B34BAAA
F9BED596E52D1AC1768E8E0A87EE7D4648B35B9C84FBE4B94E616C0BDDB44A11
51E2CE00F50528565F98BC1DB703CF34E31E143B331C43EAFF00549D963B070E
54F97AA21DC6CF0C51F78E246AFA86902F795969C302215684E0A2A8A1CFFAB2
4939D4C91665A50885282382FB1854E2317ABB61D9F28207671D7FE12E947272
ECDD4FCACAEF0B0D408990758FE70625276484A312356BEB75F128A73B8F4371
E90FA42E1529406B20600DD87A29F1884E7C4B715935E2B9D435CB9B04EB073D
8F787FF1BD66A511B0F671D8E266E2B4177FF7C9ED9BAD9DE1D97865F8C2D9B5
5C114BD8277BDD2E868E084AD5E004FC3414502FD8BC997C6B5AB50B0F6063FF
DE8DE275C09772522BDEA38B0EA5D984D5835E64CA9D20AA93F5437EBEA5A064
88A7CB7074776AC36B43F8F940D41833CDA8483943FEFD671489544D002089ED
22D7B6575CC3C514FE9476B16BF185E98C0A798DB631318E5B65C7D85864A957
65CB789D4CB30E4F7A132799A49EC6887D5621A415206B4DCDECE5A7625CC31E
F11AB3E9C4D956D5D3957CD7BF3E6CE9130C9E254ABBC01E791A542AA8D0D5E5
373DDE8C0132AF9914A36C08FD29416E08064412FEB2620EDBDF17449F507678
2B11BFA117CFC1ABE518F4568878300726D18EB52E976C03739DA03D3ED8280D
BEFAB1144C62A039A19FE051058F2F1EE9501481D533B2FE9BD05DD58E41616B
A8FB2CD15A8FEB3C0FB8C09606DF50490C7CAFCE844147A6D10B3A2A2E89C929
C750FBF2545CF545130235F30CBA623B3854B958D1793AEDEB8B576ACD98F585
283811644B30A0F2864182C7F00222370324CD4E34C51BA20D024E75A7111DB4
9CD08FA9490FCCADEA4DE26F876B6AE6EF494650DB25A27102E8636F0E1454FE
46537BCA46F273C6C5D2FC0D6A0399FD3DBC82872162B748BC7ABF61F8A13D42
95CEF8359CB93E6267811AB8476CD9AF19B447457E0C03FAB4DF1DDD6DCFC899
EBA81175526DBD299AA0167EBE6F6104288E6B2941B4953213F3EBE3FC937AD4
8DBDC8A2E26E819158B615B47A427E44C34270F239AD4EA6A578EE707DA509E7
98920DF79AD9ACA3E8DCEA963120F657FCA4212C21DC98C47C85044B7FB61F3D
B3E5777D75AE79BD33362A21482DE757079C3399A4FA3FD7EC2A247A8889E711
1E4703F80CCA53FA595D6A8A843D9994E15D6FAB61B7BE62CAD8F4E9BC8522F3
759E6910484491C329A9AF0F9C629DD226882339A063C5D408C56785048E8FAC
3BB6924D1D2819A0D46C59B43C09A076349F9FFAA47AC568A9C12DF6EBF6897B
325DBBE53F94DA218FFD9BC7DD5ACCC06D6BB306CFAFEF19172DD82D2E309F21
3B81EA91869E35D998CB4C1283B49384D38661F79ACF87F234621615956F0B86
2AA6DA9DC3F2273A5F085DC632D7E7A81A0A74A80C9EB3549E3AD42F9EC5CC38
5A9E21350D404EC44A206E86AE937C69D52D902AF44DB1D83D6EA8EA5735DF88
5ACF7311B1EA4709B10C45C3E2EA2A33903C2A006EC6DDA0035F0B6715D32B64
39E5A071735DDB9D539F29D1F9D46D6FF283EE49A18CD308FB5A5D85A905C664
7F181CC975331BA17E69AD2A2A9C1E50F1B2629EE272DF9530A35FC6145232C3
79D553953A346D5EC5CDA47D5C15974B7EDF6D7FDB24D5F390F6DFE1713B06F1
881AA13B177E2901A0BF326D23FDCBF55DFA3CCA6F5FCD3267B2BE5B8178E639
3156ABFC05E5F391FB5AD310CAE76C219E2089838612918AFCBCEDFD559DFEF1
8E3915219F5DBE9B113F4204A829222C1026290B140078D6AE798509C1D9AFE8
367C95291CA16AC9BE4F571E9B7D2504C83169EE625E58B358947EA50EA3FFF0
B9718C0BB77FBA834729A5134C1F14D9F00FAACB19C0880F88127B4E0AC6D1D7
6DFDAF48E7923B60C8A9C090A8DF98B55E50545211423BD07C75276520A763C1
F0292EF8AB8E9D95DA677A371EAAC3A172A462C34E5208436BC599DD963FA7C2
57214DBC3AF40B54D5B9AE32CD1C4026F46BEAF7C6BD6B8F8DD7C4272A295C09
ED3F23674D6B55F201BAD72E2D7D9D286D0BAAAA5A7378435BAFF0B4B22EC2E0
B39AF22F360DD9FD86564D84C767E4CB5354800F114224DB32BFF3684939445A
6AEA234E3BFF826A445C76D6EA5017DB3E04E145EB0E28CF234DBAAAB2BE9E82
DC9F2003D39841770BC9667CF1185B405366DBB0B6CF3F7A9390FE113CF4CAD7
361AB88346EFB8F2B182C37521EE891C9CFAB5A224F8B63DB23A8D049A894F9E
4E515F6411633ABB197F4C6A56021F73162F8FD50A76341D38DEFBA7330B8296
3DC86148F63D71EB51B3E98AFF96410FD94DB7BD53F90FAC6E4CE22B3A11CCF9
EB940F9778154314B8BA2165CDD840BB9D014A42339B376617ED5FDCCF95E914
150139E64CB5806E83BD03671A8BE6FE03FAE69754440845B6C49B22A43CBE44
D76FAC6FEE5FD39DCBF8FF3D86B5D40548A9CC009B87404941B1C18BF3AC52BD
2CD02F7CBDCD4958E166EC99FE60AA5334CB63B98D4A88FC1F81EA97490C3749
5FA80D6E1F61996C4045B85015CF5B5060B23E4A0BC9E748D0EBAC8C40A2F346
1418DA1C93C350A9BA63A6677A1991087B17FAE37158CABCE5DE074BD6B8E4FB
7B73C3CCC085A667EF349E63ED5AD869D78BEE875BDCEB177282DB30E81D9AE2
98E76C0E1B2F62FC8A9996F86D0679FE87ECAD9D8CB45A7B0F7FCE5D35272029
DBE5938FA20D18544670EA6B7DACADEB79CF10A9960CA9559DB4B8A93444A636
E8094A9BD521B062C9D5EEA4170E9E494C7E50650799AB7E110A38B126F9C190
D661A1DB1E7A5403762F72290322D8545CE9035B8F5D16FB75E1492A7C5AA00E
B009C576C82AFD76E95ADEBF313411D8FD46C7E264A3DC8E49BC3755D2219D26
893BFE1FF01B1D1E1FB70491EAD88D9FF80FE11D9B2568829C13D4233400967D
C8F43AF9AA7506665D41582D0C817460440997A1C7A15DB814B6722F4521E7C5
D2554C223D6DFC8E58C45443328779299941EC0CF0275A0BE336DD285B0F6AA4
E3390531510C6271D075349A30E93F771666A4170739669217DFA10A8832356F
8063DA59CE7B08C7C67DB7589A9F6945CCFFBB3BB0968F572D59F512A5928157
BDDDD684690DD40EB952C5F8C091F78DC3D091234019D2E2248565C990B3658E
DC786857B905C7F1CB57AD26E5C5B0124306D9A05AA68412AD77CA3723487975
E0459FCAFC4C48E5698030FF54438F234303E15DFB93A03A019B625805E10A54
B18A4ED00E9303A14C2F3C7CD1060DB80689697B8564F12943CAB4B657CC1A53
A33D18F9E901B0F0487EB4D738F614B21966C7F4D6022A093124F8203FC29914
03C2E48D265177D513BDA0CF9B730C89B47760930508B5B5F43532539F707427
14E09F666BE180023AEDBBDB2D626F008DA5ADF8A7DE5169D016248861D8293C
E157963003677C84B1D46666CCFAE58CE05A444493AC15844C9E0443AF31AB22
2C61A0717E41151EFF5C2D88250F5A9E9A942397FACDF7975F0685A4773C2DE6
4A6D2484C9D4E8848C2082E5C517784F815EC19FEF54D82FA45E0CF6AB03E2E2
C723586614C772842C57FC4E3B29843D80E171CC6072DAEABD08138533B83DE1
30E0C4D91D7E6CEBE1DF352BC2A7024042D517F8283FC52426381F35028279F6
FB3EAF6D261D98F156CCCDCB82E15C7D55D354ACF3FE3AD85C6A571F2B74ACDA
CBEDA775E1D468BB6EDE702D60DEA3E87675D2E26BA0612FF316DB41855733B0
CEBAFBF72CBD3CE6E97E4550DB8E763943AC6B7E96B5AD46DB008CFEFC51C404
EEB25BE176957A0294697DD0358F569C59D057CA33CA25D86D499435A1D116CE
C665F7B8AED7966FAD56770906D95FCD7E570AAF0B1C4C55F431455B0A042C20
EC946628DB227E7BB2C434E4C59CAD49EF79587517D8BAE88FEEBB180073A7DC
3E863313E5583A55C6751BCC09CEA61BC9FBFD5E2DBE172B94D20E104326446C
5BE5C76B85E6EA320CD49838B5DAD6C979B6A87A410EBB1AFD7F47CD615D6221
2BC8B15885CD123CF2819F9A897679EFED9B22A06E271A24F22935464127D30F
20DA3CB1FEAF253E16593C484F2B818AE74670891715B4377D6BAF5B2846BEB1
4BF7C40E9C1FD9E86C8E0B3F7249E52D00AF5A17AA204A54F2B526E5A8AA7514
CD771E50BDC63419398B900A640968E59450D65D8493E216FBEEA17788AE58C9
40AA85BA3EF213B219590569C861F0FC7C25DD5AC9CCBE84E216FD53F447D44E
968A8BA939D6C124EB49707AC1884C8025B06449108E6F71000BBAC59B549FD7
6D596CA512579852C9548E9A08CA595EE29BE943EAD7011396FABD03A0BD8E5D
A58969C149A68F3A08FB7CDA973DC0AE7C92603682A256CFC99465BFEAA30DE6
83D6616F504CD52D529220BC3BF32EBB01BD6FFCDCAA71CCF2633EDCAEB9A881
17633BBD60B0A8C79888AE548500BDFFC20DFA02DCA07F57B5F1164FAB22A7D4
133EFB8A2D96FE16DA2F528CDA5592C3247B8CDF4FD42A86BD27EAF01B884A02
EFA230205F89EC9E38D402D6C95F727F7BA6B44B98FADFD0B2614B581D37C3CA
7FC58B14149472F6D5579D274ACE615552EA079670C90E29008AD6510C9DE19C
3BBC892E31A00DB1728E53331B8DD963AF4029354AD4E977F07F3B3DA465DD96
1FEA1B7F45DE8C66E7B77EC5D2107CC9BDE328C19D338C4642F0D9C2347A19A2
49F73B1EE4D0C6A083B0CC084C3D89B154E5B43945B540B19EE3FBD7874EDF74
5C6E2A7EF781BB2F85B330D06C79F126E66FC9AC050D1C6D673CE8C1AE617135
731E8765F15B4629AC28EED94D48D5C810E94D6D08FF1CC9A7D9FD12E4340C3E
064D6EA9EEFC911FC59B10BDE6217FBE6D35C63EF7B2855B06EBE67A53D49EA8
58D1559496EBF6852650A3D7BD3CFE063DD3337CF52814054D2CA6DBDC0D3F09
9FF0904C29C63F484F93FDA7495FFD2989718F2C30C4373C4CC4260579C7DDA0
9A0A445C5A7736E52B7AA30B5CD2FB5458A8A0FD824BBF68DBF0CAB866D9D7AA
7B07CE83F7EEFE7F756B5A354E7CF4FFC894568C4C514B4FB65C5DD36439056C
7D9919926DA4D205BE6267A5BFFD05E0555AC4D1C9FB27125DB942E7E01A9587
5C7C5285DE3596AD12107685533963BBE9C39C12811C0B8597AF0EA167B70BA4
E08CC3AE17823F4E8DA71604E69333546EE25D3EB90ACD0A2157892D65BDA098
161F82569E1965F7E102072ED8855F3D5E9ACF3FC2BDDE46575835EF1F98A1E2
0D9B3548DA913A69EE9598454DA73BCEC25DF9D795C6F1774B1D3B9F4E786A8C
992A963B07436115DF004B05C54F028BE1FFDBEB115D2D25B57F0A5D450EA62C
0FF7A69678DA596CF5821F87A47CEADB127B488072198ABBBD4EC125B3ECF744
CD553AED8C24AB9157BBA1DA686CF52E982FDA7C9EFCDC6E8FC8DE9963587B74
57D56024D95645ADE0D95DEA748EA59BD70C303D946C141100367968CFBC2DCF
90282DE6027D881064CCEF0B4600A60B7582D25C82ABE700E556685D157DE8C9
1457BD80F5D49FF29BCEEFAEAB5FE3D03895748F6202AD44D57CA6ED8E51B927
3D30EDC470B6E7843F5E073D1DCCA11B0DC1043AF8E4273E0B129172C358B001
E82AC7F312B39778481F830D32BAB127CFE559B2C1F9C47701087F7E15A85BC2
889FDBEC398E52A87ADA420DBA209219A327EF14003BF24AFBE143F261332F99
BEA8DE27C1217A8B3B836A9473B473F999B09A9740013734F63ACF54AB05DE16
630665973C43F6F3C18D8364FB1869A2441A399D11328DF9A449E5A0D27C85D1
A6EAA623CA96E87D4DA3434E81DB35F2CA4ECA04E9D4FB5D96B9704625078411
37487CF87B7EB7F2792CB62B130A6C7D2CFFAED0E8F6A5B18105C03798E7188D
C03B1A912CF21A217B32DAE083006EFC178CB4838313FC22213A75079194054F
8C01A4698D90A399CBD792FE3855F316DC33187662B519FD015943A370506129
175C7293F523F176D05639240329757318BC6304D42C39157FA92FE6D38B5FE1
E9E278FC540F5BDF18E320CF1A36D62C698402D517A5AD1E4594901871F4EAB1
041CFBC2087263F4484A23463A12A2C2BB594A327EDD69F4C042351715286453
80D9258730F601464D0C17CD3D5A4C2C29C29C7B7B025DEB903F34391BF881DD
FE353F84D85CDEFB21D3C90009A4366F34DFA0E70FDAA2FF8E10C53B6427BDAA
5295BBFD9A4364EEBB9F9A8DBC8D1B2710E80EDF93BEB3D0DE50499A53965413
A642F81B6F78EA94613C8444E72F550240969ED64BF28E0C8FF711E06EDB4ECC
AD80E396C0B1B42F4FBDC36411E4F6DD9F3286DFBD238712D1577B047617FAE0
173075E7E797B53DEB549AF223C399AAD5D324BCC6F79069690BDE2D5DCAB19A
F1E8814E478CC50FDE715D61801FE1FDF2DC514DCED85899FF673141ADED22A5
5219FA8E1C517597EE1E8A158F8A3F5993879DB94B7DB8D5007E6401A081F1C2
AE4B59EC248D710529F6CCE82C9F643EBED9B9BA79A0BE29CDC5D0C71A8825F8
D5BB4ACD9496A9FD3531C41BD5D50D08AFCE29DEE4B34E021BDA0D5AE27DE839
47F1EED523D2D201ABC2BC9C88D9709ABD02ECED38F4E7C158029E92103BDE93
E7DF94564A140D982474F4FBA988E395CDDF312337BE642A4FE8EDBE2EDBEF58
83C42595407D8E53BFBC79A7ABEC86CC0C3AAC1D93990B4FC155DE06EF5B3F0F
D3DABE27371FD62BD4EA3082D286E13B07A618D00492138434E41B10E1D53DDF
C631DC3ADC754D0DC5786CC4CB97A0CC427A92DBFB6061F8B51DA02AC035EE0C
D562DB316843A027A096B44D4E0F7C7C0F23855DC887B2C23E26D721E6BA5D2B
FFF5740080919FCCC9A934E512AFF87DC88B5B5C0E708676B9BD2FEC6F4DD71F
9824153E3EB7C0EF89659B62A5523505E04E4459782CCCECC7A52833F83BE07D
A9FA8218D740FB4BE63DEA6FAD2C113D167DA47D48A8F13D86A23D9F875C001E
76EA3EEB1FF3C98550BCDC5427F0D3CCD9AA1189F6A2A8800B7201B923B7CAB5
F7FC1766F3FB6B37479D9917E1CF3233E27D9786419D4CE4AA05D1493CA80652
6BD35F51EBC53C1A3BA50FF5A4AE9C8FC8C391DCFDBC278A3D36E3FC78B7F126
58FCF5D417BCD459673D46AA2F1A0C76B53DEE9B8C15C53A32132B8F2E9DE3B7
32FF8FA0BCEE8CD83C1745D06910634E248A4ABAD69050D64014F589700D8C00
60ECEA4E7DDD253666242A943074F4769FBDB4CB8221308AF4578490C96C8CE7
C5C0FED5A453C19C6DC956CA9B5134D7A0EB84E825A892FCA6D550F6B74B04C7
787BD49ECF20160DF41D3FB8D0ABE169546BA46B6E35F4ED45A8174202496AE7
764053599C8AA41D9F07CB181B6FB697E645E902D654005607065C052E245CC5
136B1D3C93DB62021467C399093934FF2B01741B956EF2D479C6903C6049763C
8CE631EA627E324805E16A425FC5D4544638476AA27BCF9337D5EB474A24F319
4F13175F50980DD0E3FAF28F1F743B6E419B0E224D8C4A4719293DBBBFEC47D1
2894F102DA10621ED249A6B61FFFD12BE1B20F349525DC3A67C5E3136D69CE53
FED5AAED7974A1D1180259605160AF94D276F7E50AEC227AE3DB9A90A69D2E37
D8AA6C332F8BFDC082936708843896DD7BDAA887B1454B6B3B4832EF8ADD294F
0239E05BF6E98C9D01DF5A8FEB3C0FB8C09606DF50490C7CAFCE844147A783C8
9177AD0A23CFB7F631E00CC979AD410F813119C73DFB4C7C0947C069957DE29D
D1155D43DA4C0812ADE64FAC94A504E6D0AA40E97DE7CCDCA60E34243DE491ED
BB3CB603F72C3966D31D0CBA2DC506910C7E66C1E6B41CABA6A407C4F5FBA24A
3A46FFB1FA99411A9F800CAF2D8CB7552AC23422D42CA492C1563BD4195A5597
FF3D7A9D5A1A24C175FD48E614BDBE98D7E11FC0841036D6E104BAF0F2E1E872
8B721675758F836C2EFB4ECF28DFA10A207257F29597D37D5100CE256EA412CD
417BCF00EDE03FD28732CB57F2E95555F4EBC6F97D187D7F7A30BE72ECFAAADA
FEE78E1D8D2B9E94AF57AE0A20570D8DEF910F23FB7279FA09966098F520A503
ECA08DAF8B49BC32B99EFC55BA54C18348538B3510C331C7174DBC0326CA1468
38B6D2DB55F665B492B5DC4D19FD53B84FA517042AFC7BE38CE42263C83460F5
C9E5BB07EEE8B93723656AC5509790EEFB3B1EF3AACA4B79CDC84B75B620873C
09A2C1B971307A0FAE300B2C9B56427546F3F73480CCBB446661C5C8E48EC235
A16250DB72BCC134D3EE635F59F4DE9892961FA70A41C4E014C28B26FEF9EE7C
D403B8BD8DB4125FC48C9C95F06DDF1392426794EA8201E2744FD1D3AB392F36
26DAD8A6F7825E17671A688E194E6130736AA33A536F7130F3FADE59740BB6C8
E3558589228B6D6D2C991EE16F47A3438BA3EE23BBB6DFCFE12B66291A897CD4
11560247B4D041902FEB45B9651B2647FE0CDE1A2258F05CBAC20AE0C9F80EC0
DBDF435F118C799C34B50840E0DE2ABB0DAA2463EC79F98AA6443A5F76B26B23
632625450B0032A6CF61F4BEF6CB8F275ACE01758AB4872819C58789C944D024
FBEE9D4C28E4B33DF6A66449FA75F44045803A50F8177B4C8D19429F5405A9A6
C7E4FB75E30CB87EFE3D7B345CED82A905D090DCABAABA4D1B3FF95612C9B68C
09DB7C50EB9ADAD6A2F50997633A7C5EE4B0A3A5B0F48CD2BF97A188FDD5E05A
0D74993713AB2F06D6867EA8BB6E6EC10FEC5A470BB2912A412EA8AFC24C0510
B68A0B64356A24C97B75FE7D356BDBCBF88C91FD3F9CF867284BF29F339E66F1
6230592AC22DCCB2D6D802D26970A91C4FE6F307228D7AB1600C2F05D0D9F731
5CAFC23ED4F9CB353DA7BE4619C2C69D48041DD315C3E7234B2BCDDFBED6B0A9
E2C526EDFB71D837772F5387E3C7A42D007119F8E63162E26AE578DCD606C4BA
C578BB73D065BA12403DF3504EA0CC11FF751C5A74995FFDBFA50A7FAEEBAA70
A2B387D57D849C4985023CC0FB7B49A95CD6E6D2B0B0F625F831BF96045BA659
56D3F6C169C9A3E342DC438E60940A1A7B10FF68354C043DFE6F770C564B91ED
9AFE2D1C610195FA32E61F5D12E43E43F6E03942BF5FDBEC366C096AE65B56E3
4A583A0288C1874BE8C0FBC216DCD5ED06EC4F5E8A91F925D6B528BC0F95702D
27FD6C933AB91593FA24BA11A61A8B40D3229C18FF6677B2095A1B6EF1661A4D
A77B723EEEAE8EF961E3CDB6007C77710A4E8E65577E5ED37BD0876FE4FC4766
47ED51A0409D0047DD1E00689644E9DD19D6D10F1CCB2F75061D6D3DF4DA0707
8AC9268A2BB89E2A25BB0BD444D41AC58249FFA6804D3EF2C88AB07C9D89B53C
F6A413C3EB4EADE62B45A5D0EC3BFA982A0944C54AA202D9F6F14124C9B9E8BD
9F8124003F416EFE2B24C3A24F299EFE32DBF5035ABCB18BD682234879B24403
433173D9F296B3DD186F8C3F8658C91B59C58B51B53C522CF3FACDBC455F5007
030A8DC866FAF4CCC70AAC8DD39A4D644584C7B4433471A5338D30C5415E1EAA
2F325E842A02A0C9F79E01E69A6025891C289395D9D28749FEA222D580DFDF47
7821A9913516CB0B28F80FBB4AEF3239DA4FCC849CEB3A4F4C4C1923F2E29BEC
3089D543FD4D510A8181C171816540E61E5A2E2947957AA9A50DBAAFC334ED03
0FE2D062F8A73FE6DE425C2F627DF2543F42323E9B3733DD3EE7DF7F774DE5D0
D0980DA8C45E252D522ADC89CF698C61B861F1B4CCA12CF4B2481A010ADB42A4
D5DF1451CB00F77716270BBDCD97679B9159404CE681C93A77466C064827E8CC
A4DAF7D623EAB473A58E4B46122EDA7F4170C2DE867625FC6047E741459DA7F8
6FAB8F94EBD6B5258FB7581BC0E605A1D0942E0CCD37560DDCC489BCA1DBEA94
E2AA7DA9E97DA34522F5349C2AA5CE61F36FF68057836825CF0F3B2313654A7C
E45C32BCD8D50BB4468D94E6AAB47FC8F9541840CC391A30FCB48AC89A2DBC7A
FD01B4632607414DD8DDB484F625BEB57E28405D014E912B80B4940AD0D9B5FF
090261A42EDE529B033686C1F39A8CDAC52F9276D886295D55E47D1905E2BEB0
7286F13E92BEC69EE32BF1BF5E56B2FAEE303A567520CF0EEECDE1550E5B1D0A
1296299209B2FDC303684353F418C0B43912B9F384D85BECB6EE7E9453ACA13F
6CEA7D255D8EE204AE838A6B502388BBE7496EC299E42C80D31FF1E62388AEAD
BEBE941BEB927123562926219E1D018347D99E99F4D51422B4D262A50A77B870
E22FF0DDD32DADFC9200FB5903971B7E5D78195C9DF61904D7A8EF5E8E99ACD6
C5A4FFBAAF6FBF423892172AF0A22C80CE90879E1206F6D82500B4E4476AE727
7832A0F4A99F6455C1680435B965ACFF8567327FCE6E1B397C42F6F4FCD97CF3
756F137A237753DECF6B9C1824651722C9A40E3253F2D48149DCD7FDF13F5351
E6C89F11C1AE6F51A33757FD8DCEA2488E7B130462CAC1C619925DB2D18B329E
2CDA61D7589E012F43C4C6E283F4AE8C426EB28C8C0242F76C3BAF443B9F3743
65717B6C09D0CEBA1491C93EB6E64083D7EA5E9A09BC57C1A71D2F9FC755C479
8E56CE6044AA1958EC60A2906800702C0D2782294489950EE952ACEB45ED9895
6775713454C874E0CB98405655F15CE9B833B5042CF672A3167790C357738740
5572C4539079019B010F720551EFC782BDC8800F59C89EF6401116E2316BCD82
386FAD5FEDAB9A24D99EB12F66F5579AD58DD6048C2190616F793DB31310AA0A
8F45140EE4FAEAC8F97BEF9CB203FEC93C2A55B8F36E06A5F14F1C01E1ACF33E
AD9D4364486B8C98604C17B4188C4CFBD01D8FCDF825A5380D1D9A075CFBDB03
A725AFA5482D0B6339451F76A5244018E4D54C6E884E3557F619E50346D4EC76
4ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5BDCAAC4A8C7BD0E74E4B31421
95DD8F5B2A24F02D547483903ADF9007CF80241D991BBDB37B057607676F3F17
09C08C1828B39EFBC835AA02C1A5EBB36AE111A7A428DCF460139DB91680810E
E21F0C02AAE7B45B718C2E4FDAAED2DEE10380BD028CE68172D9CDEB063F4E4C
2205AE4503C71AEC1836F7C0766D7214981A0678BB2138B7FF05556CDD7FAF7F
D93BFA6FC0823EAECBD2ED27213AC1FE61719E1D3195F0C9745280C8337FA283
BB4340DDEBC4D256E13F78F42E8754B6AA75D42A7D2B7664F1F9C15355583883
1AE0EAC09073798435CE532956A864B66EFEAED5C16287F5EFFE73FAF3E89465
2422B11A329BF92DF3AFB2D3F8F640D691E3D9765BC54B78E23B62E352D1FF0E
814E8325B237F42C1DB043B94DDE2986828BCD31FC2B98BEE731EEEB2AB9125C
DBBB78E4E324917C5A99F4A323EA2A8CF855891180493205BD9016FBF72C42CB
EC9CA3475A4A943EA52291AD5033D0ED550DA2D59EFC52B12610AB03BC18A2DD
5FD92C7422C4911428468FF6A49FC3BA1A47034558B1004827BF9DE6F34B799C
88E400E6492DEA5B4C766F93041FAA0DBB196B0A220B8E3A9FCA6078DD2411CC
CEAF45E1ACB497CB6F88ACB8C90E71F6D828B36519298520C2D0698C337B75FB
1BBEB5C2AE7D45E28D24969362C7490906B5C8744848CC0A99D5C2C10CDA95DE
0A1BB945C0D5A4C82EC805FC436052C5F692D5639A4E44FEFEEDCE7B6190B495
D7ACE58E96D1C697CD23ADBA275980C2C8C0A484162DDC733167D637190E7865
AA65F285E40A5BDE1F29C1EF9025C328465C20C566824C8AE99CCF58EC40C041
FA29B8377281CF59DF7E747C37FAD1EB86D89E381EC8762601D1E82FDDAD59B5
C938861CFB121BDFFB8FE7151ADC45192D338869ED76F5C842C0BCDA315470DF
D8F4C41F743CA5AE9C78E669300402E5DB75B1683103305C5A43ED712FC81309
C8950E7DBC216AB359087D8B27F4F7C38152D951838A4DC9937EA9FFAF8C077A
7B40723F6B701EF8C5A46A33221EB0F12CC3632AFDA9B90D8F35E71325342638
162403CFEF0C25ABAA260356A4265612D0FF21B3B46E138B76F20125516F75C7
A1251B45D20860ABA3EE8EE9EDBDFDFCAAAA0540CF1A12A40A509D7BB71922BC
94FAC1A1DF00C5B375BC13C88CADE0B8A7BC2343231A17171B8099D3D897A9A0
F142F2DB9848BE91481BBB4579C1E2EDDE0208EBF98632D63BC149D9855538CE
C9F6A3D650579C2FC662837292B9A745032CE169C390D8D8548A418BCC4AFFA2
7695C6DACB5E50DD40A0C892BC03D6BFD6CD0EB6410F5282F333114F0015E971
D4F9F578518E37E431CD2798239CC4C94BE527FBE4C835B057D5953BA549C074
2D661C8D6BA1F78DF948E940EC0639BEB7F11F2E56EA59E9C2459EEA542C67E9
2BDB7654CB959F9AB2CC4446BEEDC5D98AD7A6B8A947BEF6B8D5E443DFDB337E
0B9BB21173AFFB55D476823C2906EAC08FC3FB99F733E0898958555F5218EBA0
3EE4F33D65E7E7286737316BC8D8BBB17F3714CECB3E585225DD489CE28AB39A
23C61095E7A3DC33E07918E98FC981D27C33A5AAA8B50BC9CC20AD7B1DC8E728
297801988985862FECBC653468E7B8E01100944BD59BB75A46BDF6734EC628DD
80895B24AB76A214B401F6E1DF2E0F680C6DFCDE0AE9FC4CBE40CFC45DE1634C
04CFAAD333FDF84E0F33A2EDCA70ABFB93BCAD415AAFD831E404573C5860E877
242A03C79406B6D6E9979556CFD400721EAC67C16221ECCD06BD51C343DD3F3D
C1599A2B89F3F57C11D3338681C091C871EFCBD838E6AA380A9857E732A234E5
0243714D450CD8828AD50EB703E99F0C33737F64E650B2FBCD9B194997C220C0
086EE913D280C698BCDBB8CED18AA5245E631CD9D2611159DE0406A873EB320F
D7C4459124722D70A8D1DF64C6AE6FBCFBD9E9879DE2E51C85B3597B7A140415
099DF5ED9D8632C4BD130766831796B50703425FD8070E8F13CC5712B1476D12
5E812B57F3D63D80DE646F8D21E6DAE6DB1AF509B25E03EB7DB612716FAC4A09
A9E6DD023574D3856CB8AD170F281BF2905175ECED7FCAFD5050913D43B2B50C
2E53334AFBF076DD213FA60FA03BF8B879A425CED3B30C62637A4B44B63F2C5B
967FD5063E7E2702351F95F6D989A7ED46CAD85C2B214369A0A1E9CF9E57E08C
4B648552E6BA4CD3554F27B00C3AF5B010131BBD91387BEBE127FED3E0DAD616
207D786A0B6D846B9DA0C07F947D7524D37DC63A4008F65E9ACA3FD626CC47D2
47CC610668FF164EFBF2FAB4C6D98160C467A7EFCB0CA56ABC164CB4DC953DEF
C2217C59CD2A1B26325BB60D366F1F70596EE39E400A6F18724B67800A29410C
A46516D6C35B5A22F839B3F6BD471FF1817F6640DDDD2D870FC7E8EB8293B761
4236F876337D10F53DB28C79E4C7B4BEA87D0B1D81798E217398267508558163
09A71C82A089CD2DF10A76A98021D66F223A6ED2EAE1534A139466F7F62EFEBD
02AE4785FB84B325D6173595FB71983E45462EEC839A5B26D9AAE94A2737C2E9
8EF3B08B640C3E53B833242AB756C00AC638B8AACF203ADFA1DA03F42980FFC7
D49BECC1ED4962CA5CB9368D70ABB56B0F8ECA80BBFF4027D8D3F27CBDF5DEE0
2649EA5014B742B8BCEA283164C972A382B5B10BA574F44852596ACFD65A3D72
56D18948A1809D2DBA95373E39D2ABEFE985109B37EB84B0D6297FA506FDD296
949F8FE9C26D83DBB1C224B97C475CE8C6ECB05A97223122F15F1E1EEB03A6F8
923C3D6A3D02864609665BF2695A44D423EC8FC039E33E4F0549473B1E0C6CFE
144177013B090E06291D60960F7C42E27E04966555DBC860D42BB03EED7CD5AF
3DD0ABDD83226C25C32643FDA7E4F9F5DA3AFE742653D73B5E05B4096A313C46
219A5D9B035B88B2C17954858DE9E5DDC17A2D2C1E4B1375446D8573057D33CC
C96528CEBA5BB0E57C038F2D7ED7BA6583A6C2EB5F2781310B9F71EF1D05A872
8B5B99D13E33BFB7FC73679A38ABB22E10CD76A8825117507DA30FE200EAD4F6
F489DC2A2D5C1B4F7AD1FB8178B0981F45C2BFC5DB5985541F01F8A209B87665
ECCE320D0A9D704164C36B9E9D417F6DA960ADE0663431603335A8DD49D99E76
9BD73853AA6F95F8F524E5ECDF22B31ABCDE36720E108D1A9FEE9D04A2D2352D
E559933C8B4E514DB0410B1E140095EF2E3598C9E500A0C90453F042B7EAF095
D8921FC46FA4773C0961E31C6F696D6AC070A65F2A113077D287824293E78CC5
659B3C74C494BA899E1A8F4CF9FF67EE19B4FCB61AA4463C5F063FF3B90A001E
4C647E2F6ED22B5745CDBF73203755E93033AA21685EA394047116ED7629C74E
8171EE39B99680A8560ED8B061E82530D793EEC3E5EFA20896B346FCD9097007
F900A608358F08112221AF8F6F4A4954501CB9C92D01126B3A72BC1E72A5F984
3DC1B0195E7C64E7997495B3625A0C4160294F76838DB93514F375E80119E2CA
DAD17070BA169AB6A7B679DBABC7B98AA9FF115235BB3354BCDEFD91004F3E92
6B742368F2607F5FB08187EB148AF6921544B45639AB6FF1289E38931E70CD20
8D314661EE7DB9F8C36B6DF4102B384C2712714E6113C452CA230A1EB007935F
536D652AD737D670C54B521EED1D06828DCE13D4F8E442EDBDD51D7CF5821204
72701A66E8EAA12D2FB81F0EE0D2F2329C35D7262448F165A43AFEE323E98A44
EC470CFF03D8FFB5EF2ADA3341E75B2B500C6EC3B6578720887E493E7855BCB6
B83201298C0AA8BE82AB146D2907F0A3DC00C10F078073E90FBC968587DC8CF5
162AC51A6AD727D94AA242D99B153AB4FD776CEAF2E7D41FAA5D19294AD7623E
060977AB9233338D656D8C0C6594B95B3D8EDC0ACD268DE68310F453DE2698A7
64298E5767D6881C64BE717E10AA577ED3D559054D08B9EBD541AA9FBFDDEF1F
775BE0C411788B054AAA35263A828A7B84D4E372B3B85E00C10EB6B5399326CD
57152DF4923069B9D6F6420D7FAA4B34BD6EFEA2B8467E3D264EC23919C96693
95F46F3F924AD3D83219C782FD2A8570054C243ADAB55F1BD0A2AC1D73029F6E
09EBCD7EEC17CE40D0B29B213B17D52165C16C8AEB2DC60741F3FCB1C967F9E6
D970F3267FA1B2F23FAF2766D0572F3804BCD6CF66E574064E2B0AEEF95960D1
149901E52FB7C6D8EC60A3B5480C9045F9998AA0FF1D6E807B3BE7EF1A77DFF0
D1E5B9EF8C1406A58B14B398414921E10A88FAA23E1FDB511D4BA371A63B7880
A0D7D46C6687B44637AA2A417E33A0E0FC9E2D4D5E406ACC9C9C1EE7DC5CB561
190D52E1A8D0C140D9870C55B799710662B4FE3DB69E392FC652BC22248C0307
13E6208B0243824F27494B528E865E3B1BA1CC3F5AC379835F5CBCA3A139F60B
947B890F1525CEB017B47C1D4042C85EEFEC49D94E6CE63300F965AE83DE11FF
F1D03C0E249EDD9A62E23446F8C450452E3F6F5CBDF5D34B08CD2762A1676BB6
CF6E1926258F1246CF004AF4D76C843466956304D117281509C19B59336E38AC
DEB1043E96FF7CBD701050A1DB9E56B088EAF0AB4A3166F740E482F0965F920B
26577B79DC0326F1D3861E1D799628816A876C6FBAAAF8270E05F06037E6FC9C
E04E7AEA2C7E4A824F8054FE402799EE7998D4DAAF0366719B4BA72DA3AA96B2
60E2E61726E38E8146DD549A8BD6501D24FD5BFF0A406E9662794202DE1BE47D
F0697DD7BAD6C8CF1D70B9CA4381DA2CCE50261937EB072D846239EB7928E4FE
B7C2BDB9732C0BF2947543F5865BD1EF02842E0B8EE7C73113FB217E372888F1
1E015415DA602B025CD7197FB2EDE22202B8A17630D41B7DDF0C6B82284D6A75
198D3709DB41B886F9E10F6E6774918C7BE4300283AE5AC540D464771454AC4C
A92840DF191E6F52555846D993E48925F5EDF78271ED4545B079C802B4398224
D50B111990D1F4436C860DA78F1A51C8853FE7F024EDA854D4E210DA837B2F60
92416AE6CC2E3EB3BB4D91E29CD932034A3C0C7AB23CD6F81DA6E22497F3A7D2
B5A15D8AE27CB18E25821E2342751B46A34BCEB29CD1804B9444C284E4295DC9
97D72FDDA174C3E0F92D268D63B559A404DCE761561C9C2F36F92CB169B0F5A9
A943C39CFE18B2F8F922E288A3E1CF261967A11FA5B073A62AEFA198FF5739C2
4CAA37DE55B277110EC87721D864EF9C47AFF828B769F81DD7564A10214171DA
A063C19C3BDA77BBA38E5746F9A78B08C5244D3A0E87459AB7636821D0DF71F6
85FEE6C4FBFCA718681DE7F529613F0D4B86FE71E78FBE5C9B132A0029871418
051744E40FB9CCB7C480D6A406BA3A705E8B1275BA8E9E8205C6155EA902B785
733DDEEA5E6B5F589744D795BB3A2567F3C96E4A0852AE80816C439A13CD3C15
EEEB1768822705D47D31637BC0CD4D61C3DDAF2DEBB2EE0FD69336E7070E3EF3
45D6D1EDF0BA646CE9F11717A630BB0422421290360984C499D5C2F1E9D944E3
9D3CAA12C0B5F0EFA39AEBDF6F391E16A047CADE0379B3A56AD0148429BC6DD9
F89D792DA8AA542A1A30FB436F629EAD2AB3BF6C3781D123D7B13FA066266581
B8AD1139A5F3332699713ABD57CB8AA2F7CE8F63ADFA24928546CA52F783F92E
B980D1FA02937DE4341544ACCDB4EDEE8DBECEB78738277FAD0E908C48A1B8FD
98E4EA36D07A87F9D5156F4C2872CFA1DC429B4EC140FACC4086073CC0C8BD02
6799BE52B246C96709DC2EAFD9F42447EA9CB1A51F7AA1F2D68B67CCDFF94FBB
5CF83F65A6F1952EB4096C1B91B6657E2F04A1FCEAA9ED39DD8FCF258C2AA585
2113C51CFC87B9B4328FDBD71A5116E10B5BCF855502EEBDC41343982EBBD5FB
CB9A504D145DCF49033AA567988FF2A7D18056EDF6336E96DD709A239A40BEBA
F05CA22C94624084DA481192D4382ABDC14DAEA66002AAC1DDB131A2410F8CED
69BEEBC76E45EF546CAE548825A0BCA6BF93B0B1373AF051DE1F14FF6AC2C483
CDC83C4A31FBA4EA515DB7EB2E62CCED5524BF40246A18A8D921257BE9AC6BF7
CB079F7D5A76EA2AE88735DBF65744CC3CEAC5D2D7334976E7053A91A8F7BBAC
AF0CDB9B68E1561371E8F78898E72418C8FF139C49E305763F08DA29E18492BF
19033369195243BFA51FFFCEAE9E1A97661A47326B6308D41B37EC820D876A61
EE0592365D4A01DC96667E2896098DC7579D59E47F7EF0AB7CE7E6D8524ADBEA
8FB5746CCE8AE08E5DAC6463C5143F5BA873027BC094E52312E0FC17B105A892
AAC0A667358A1D0D17E65C6C23DCFA03265AF722FC1C4B118B0EE41A799A28CF
919C102E15C7CBD68DD7C16D01967614EB5D9B8200B32D7368EC958971F6DD8D
5D97E9EFF633F45781461FFC94C69C62018D6429EAD8B7F87627FB8F73BBF10D
7240019E47B22309754ACB0A2829877B09E4D20D1D82A45EB5F03FB2460ACC48
554716ABB8684A5525C6D2384F7895F2C229917B9785404865783BE784755194
506CA9ADA3452C92C1BD752F6AC664DF18166F27FBFA72EC42D677468E9ACF91
33FCA7A218E5AE91FA70075A922AA0F8BBAD99AAAD749454CDC40CBD7F0339D4
128C54E505DA2D327932D9B3AF9DFAD4E9492EEED55C4991067717798DC99F0A
33FE83C973E65971596DC7423CAF3A9E2B316BC209B8D579F6A057A27AEF243C
4B389CCF93818A2C7D4307DFE77A4B16D1848D485679E592C1AB0CB3B1A26D85
9BD71981310F02B957C55D77B1D8DBDA6BB48914807D539C91F3FD1AFB8E3544
6EDAB21346AF2FE9E57735A8D8A8E583D3B87C35933A35DF08B512C2ADE1B566
73D64DEE11C94AB03CA10BBFF9240B8C62DFD256E4694AA3DD235D36BBD540E7
37EAE242036E4AA122041B23112E7D266EF13D18FE4670DBC1A8E3BB231F9B2E
7F09747E3252294D52F199F9C7094BF0EAD8152BF7491B190D5DCD70D140B498
BA43863C45D94E6642DD04CDBC5B0A4D4F9E37D08F89E84B1D711BFCBE4F9761
9F0C877DDB8AF64BC99D57A0C2CE99C8887B6A01EDE4FF84633B4C306BC8BED1
80D53230B60A66DF28135355E94BA1780809B5CE068DED73FACC384383E63C47
4FB5CE9878068B8FF559B9869D066EB184422914011EADBC1DB183A70836419F
21ADF162F30B080F0982F46211009396E3A6482BB98AE62920864D9D3FDDCC52
D8891C13C108015C69D62E21FB229C2226465DBD27291A7AAD14E944EB903851
93A438B4357D0866EF0727504C48C199E97ECAFE212CE776E4CA9D43CA2619F0
B7EB2BF066D28655BF47E3EF30AFC0D06BD5518758D36F783EC76D0124CD1AD4
D490CBF46A09BAE5AF2334D5F766F52626B6321ED8F37B4949B3B5E1DC217E8A
1FBD9B828B8E5DDE1170E6132A17F6F69DBFBF14DE59470962F632C45DE55DA3
57AB04AB2C81845DE64C387F3AE3EA8386A9CB5709CBBD166AA0AF078126540B
D2D435D0AD6CA9233144A057E0D846381FEBD812D550227C060C1CB912BF5761
DF81133328C99215855C43D9989C9902C263D3985E2FAD10B3352E6B742CE254
F19EC5974E973E67096166BA0F2FBD4C92D221CA45797511413BDBE0DA500C38
EC28AC23A1F9F157EB749149E1D61A1AB461AFA98C904AA737169B00CF42F811
485435134D6047218C4C3453872C37A275023A4C2DCB018277B0D0ADF9ABE8E6
15299EC722CFB01F22A944EF212D896C12962AB32402EFCE620316AA0DB0446D
A0FBC108FF8DF9BF8DD1D3F5E9523CE2FDDD789FC6519531CDB706F68B8ABA9C
64BF0BC177A7CA7D6FEB0EF3B1E0D041563368014C4EDC03CE3C79CC2777D0A4
4C94D53CB00EF77F7949F5767156D2E5D82C74EF71C2F04DF72252F565AEE40E
21E3B4AF889342A55CB9E866EEB4D3F920E55FAD4F251A50B5BFAA45A58AF68C
63E22487D5EF6D5D90CB09C26137423164CB85FB1CE5F146A030DC8CBA593F9A
2A190408BC73BA55DBA4B6C3364855783A51198028FF2CE367484FBF0A3BB951
65B7826BA71D82EA71D705C464BFE98E30204CAF5F7EEDD1348CDE6C5FBF22CC
6D544FCA7E7EE0A7FE80783525F7BE1A737D79AF310CC9FF2376E08202FF4391
07CECDE57D6C9E61DB7F0FCC06EF10CBC5655BCFB99B1FF233E222B58E9640C1
6910637D34669D01AB55C1F2BFC7FFFF31E891CFBBEF061E35CCF13CAEBF2BF5
F04A36F7C6CD3036C8709BE2395C55E997F3DEFF23EC99A837C34022CE1F6031
CE0858BBB25D1858B868B3419A58D0DCCCC77D4042768A1BBDEB38415DB1A7BE
D6A1904C2DD27405AA26EEBFB2EBFD0862203910C49EA0D34B525EDA7631101D
B3F4EEA67D178E3DAA119439A9B045E744D0D1EC8AD81B684D2FE2EF6CE7B02E
F1F874639E979411A48F0D753A9CE74AD419B077F11425FB37CD79D86957CC98
72BB1D745BB58EDBB842C56187E546C6E433A5C50346834945ECC1FFE7F4B8F2
C3095728D30B3E72664D0CCE138FF839C9F1D3A073851864F0AC54D70F8EFCD9
E5CAD385DEA3564D1CC86F0298A6757344DBA2FA062CC1F578CDF32D4C6F55A7
72DA6A04C28C460D032472B3275E6D17359311AA2940B514E05414B5B8666D97
B4F4E69952BEDF582BC58C366F903F717CABF114B215CAFC9D588BB46A772F6D
DB65DE293EF3A8A9BBEE9C86E1B593F87E0869AA184205C782AB783F3570577B
708C75C1ACF0603CCD1337472AD8EFDC35940A69F55E6003B52BB7A047D664CF
BFB2BE0F1374E7410E53A07FC921EA347631499696AF2CF614AAD8ABC65453A7
0E50C2813B67C0B1FDD78B4BD2B29A56F67AA753BB874347A97EC7C28B44660C
44542C1D7FF5148C4D3850240C97E405C045C305C997A7142327F9A8BEFA05D7
5AB5A787A8F0CB9483CE38D744B2D0366AA25C3154F26EF5E7F7F67A9A56B490
C62D28CB359D58A2FE0B05DEB1FD5D0D9C8FB310A5566CD583B3D45A8BE17F42
AC080ABBDE66D2177F7EC4D4B4C56E14EFF9CF1236AAC305D8A27931B5650B88
79AB2772775B46C4C639D2BD1E55C5698FEDC3358CCA5A61250227E368A20321
70EDF136D8184F196F92CEBFF77411D9A255983BF20EF31D61D22F9592A150D6
9E7D436EDA20EA9636D44CB766D6151ADC2475324BD3D5FB3FE454E39087A07C
D13F4F32038FC81B37318149CFBA27BD6603DAFEC2577E6F70B001142248276B
7E4F89E60E72D2896C44C0B71DB3D51391530C7FA6C8A90F3241366AE2C7E46E
F80E3313DA7375B4F0AEA76F64BBEB72930920222CD494A53F9DE2DE62F3327A
16182FF5C40D2C4ED9F9A3D5667D0CF5F83C042F792CD8F704705FC0AF9ABB92
1861C0216E2B4FBB7A41483F5050DEA499563C3C9C193142BFBA184D8C413ECD
C201ADDF53C10EC4A156F2E0C86F2AEEF58749B707A15700BDF42110CBAD0DF6
D66195B624E0C44811B86E72FEAA21C559B9E4DBEE970D13B61E95E5614FD231
171B10247C5A2E208983DF916E82174D2F01B3B4649B35073D6D9CE066F302C0
FD140F6E136712C53894F301721C765BFE2270527335573D6B204F6A3D15EB00
E52D3269B2A39629DD1DC75B72D17DBD0CD80139D3AA90BB3526384CF4D669B2
BC1A772274B473094763770151146C72EA6621875A7044267174B91141CA52B8
12795313B3F8D8D1E45A900B7D8803B6B362915F63E185381D7287F3192CC163
E3856D21C0BC6D59AB07A31E623824C8DF7CF9B28B3098E53383604847C07280
BAE6A4A1EE72CA8AA80AFAB662C7F1FB98B9AF68DBD9D6D373C2F03E844A6390
7F2142591BBEF626133267C6773AF78712BC8BA809DEEB63B1365C26835080FD
2AC78D491B559B7FC620210955CAC4333BB6A83129D42D7634B7C995E8353CA6
CEC2CD35EB531CA38B8C07D67040808840E8DB90207C092B45D93302650F2AEA
C8683D5626A593BE3FCA293C5331E0C6500F7728C212D7741D517DCEE5C5AA5D
497616450B78CF011FDE205C150F02CF7FFDCECAC24A46170D0DC1BA1A7E79BB
E2E8DE37243DA610828BFA66182BF6EE0AAE5AC8364D31374467B5E84975BF72
A79AC49F178785B449ABC778EFAB4F0B158B2BD8438813DB1CBEEC5F853F4E89
A4C11F71C5D54E2C63FF9C0E13BD3187E3557E767B7C6BD5C9DD766FD65D3A9C
16F6FFB1D44F08C4BCD1324EB964FF4504D04858D2AD4F366E87D95919C3B686
5901712CABA743AC858595535F3E9A8A3C9D1F16EFD22F02579005ABC3A99665
FBEBF98EE6B9EA4E55C13A8ADBD8885E303B05EAE29533CF39D865026D4779AB
7116120FB32CDFC89B1173357709128BF5039AD74613D363D8FA787C71F19D45
4D433ED4CB8B413245CEAD0B8921E3D6698C2C34CE00C027C7856F292E228D8A
1D4CA2819B9D286762FC21F619A230CAAD6CA04690A2DBC826487F38A1B4C2AF
48A1E09590FEA3EB4D4747F4DD7F8A2B4A231B4CFBCFE8F1109BEF03D59FD4E4
2235DF82B919148077AB26EF42363D3B7FDCC2F4A8A42E4622E7FBAD12E7D6CD
697D190A01558A66160AA9F9D5F1F5313DA8C90897F8B3994ADC75FB60715914
D1EAB7B706EFCE92DC0DECF8B599CF7C75894523940C212AD1E1E86327564A3C
1F105A3F0041084F4F26D20EC2742D461952B24D0803E7702F724B05BD03E858
E1B5F5F5B4FC52659B3BEDF467061729DFEB8469CC2976D2D9A797963421B870
E2DCC94EEF780342AC615286E4ACC6CDDA3CBC8DA6CBE5A24364A29C7E8C2E60
3D4AB21C0455AC22D271BBCAFEBA6B427F7903A6C1D70EC71ECC841636D9852D
2B2B4EE93DC22D8A239BCC0898EE7EC1CDDBE6F007C635B4AA0FD0CEFD9DA0AB
735FCA0F9D04E1D699E92752F66F9452544BA2A5C357BA8F618434D85B496510
47569BA1F3685B776C38B5BF1A9211991F0937FD45516DED00661EB0D683284F
B405749C349339DBA0C130B9F56DC279D42D2CA8E867D68BA9DE946541F22283
3AAC8DDCF092C8EDF39C35D5898923642426B032106CA035B373DAA3A37DDBDE
A7FEF85BBC24F76E5D6519805BC6D69521E8E87683D57115CFBA299991A47E82
715F5D2896CE59A330B5F2B74CE0C499751283B84C15688C616512F0F5D20165
E0E68F4B08057F9E29FE6D9716890506C164234D9B6ECA2A9B0A616D44D7463D
758F2C2368FAFC1977F4B7780C4817106319F5BDC924C03449EA8385A1AFD0A2
2FA61F3D4DAD9435D312E483011A4F30984410306AEC4B525736095F7FDDE765
3BA0CE595241BCB90C0FD582820452F67E452A422EE4EFAC79CF77F0360E00AF
CDF1944460A9934BCAC76B5E5FCE22BA8CA8283962ACA5324E77E2AFDE3076DC
B372AC6C8238797C1345AF92ED8AC9AB6337CC352A9BC3F99D29A9257E71F859
3FDBDA13797B07F3A54C99C3B2757F9A196612E49AB849ECD1D3BE6028E57BC5
52151DD0C3CF1E5DC7C05F1C23A2F77AC1144B27C102524DCECC47F818407BA6
C7E545CA5FD61EEDC31A7192706083F71F6522D116028A91E6233C72404BBC64
7BCD850409BD18414AE3172D5A6C60302108DC575E57D805B933B9BA1072CF0C
68AC833BAF4B227AFD4FAEF447465EA86169830D419D8D8C19E529D7090BF490
E997708CE5082BC2C4B5858BAC231AEC7E14A5732C750DA5DCEDA71A0DDCE149
E75A963FDC3E8AF248F5A1E285F9E34D2EBEF9E4D1D8FCF01E8B8ED7271F76C5
C4BFBA08052863E47476216D7060CAE36E35E6CDF16F964E8EC4CF39617801E7
4AE000AF89ABCC2F249DCF75EE58C9B4FDAF2A5AADAB459CD713539BA8CDBB86
CE8D2F27B6C28AE41A0D62CBA8E94555052E1108BA531860FEC78DDCAE21D903
1E96C49C00DDF0B20186C5A7FA0E1CAEEB7B75CFE3B96A2B008125E3FA0F9579
C49F376E43C254B63E8B08707F6215ACB750D98062B2D22188CAE9AB06954A88
45AE5C6FB86733A978CC3866A32D67C545347BF5F36244B02611F1F0A4DB8311
AC2A1FB1CC674E22FE8E3032ED313B5274F487A92E644F3746199CBDE6406AD8
491813DF21A55C4CB113B52DA9BB968DC08B75C00C859E378B97DD2F997E7988
B576E46C37C402E20B3844B8A87C09398B05AA630C92CC9F0EC33CF9379C2854
55D9C70497CD075EF9CD41089035DE761F26FBA67EDA9787028B186F41F58379
73F16C3745E1B71B7E0A8EFCE7D64E41897A57EFDD6BABBB2B481A764F11B574
AAC453DC1E7385CBEB74D1E9B73FA015BE1C55F47B358B030B15CF1C6322C653
93174FDD8FDE863B23FA9B961D52C3EAA77DD18EFCE3CF86B3461BD0ACB4E802
9C43E1552B8AADAB583F1BB8BF28ED15CE55BE5D1F91FFBA4A82CE21E873B324
D4F007FDB54F2443CBC247950654E34F09F669D993BD2B9E2589CB128EA64FC7
F18B6EA74C7DC0D0D0A183032CAC81636A4947CB97219ED806906978D017AA07
C1823BBFC2B41B953F834118FCBEBC10E8ADE4A87499CED10EEB4E54EEA653CF
29D3069730202EB2D4C1E4756F1F351669EE5243DD8E09616C1CDE069CC21A29
FEB235AD4220DC8F780F7884F8F66C46A0A75405E2A8FDE8A58C59496CC356EA
3A8F2EA0AFDE0A0A5AF4E2F79EAD7ADAD0922C1BEA0BAD4FF0BAEE3CD5E61372
1F0BAB327F93AE336F68C49E15D97D6735128673B0836FC66D2595D6FBFE5C4E
311159B6A434E5AAE9EDE698800D163294D21799C0CC0FFD99E36047BA367A67
932D22570A17405BA5EB0CAD5AC8E8FA02C30BAF236256EEBCC9524D16255FDD
F96CEE65
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Italic
%!PS-AdobeFont-1.0: LMRoman12-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Italic known{/LMRoman12-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Italic)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-449 -289 1358 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD115081973393AA2048ECC
1B38C1B45AAF909E1D0187A0DC16F505BC42B5C6AC12168C73DFF1878FBDDFF9
5CE859CBF7A88E342F565C04C06D9DEE65C66C505D6B44F028A7659B7B18EBC9
AF12D18FB2C70E54D7C524923386E488A5781001B47276F3CCB8173466544141
F99FD85B6BCEAD8A7E1294BA184AC78C372F2F08D8C26E0D96C407EA8F1F5A28
509753BFA423684568D7C86E4655ED88226911F0DBC9B8DF79A35791C4A85AC3
E8EB007E7AA56FA62680DBEEF9E2A976C9F5A863FFD9334B04B4E297D672402F
7CDD0A80AF1403FCC0BF0C5B8BC58BA6669717265C300F0E5EC871A0896CF482
691E8AC48D1CF9C06AF63CD3C7B0AD16E4A0EF76559A251DC81E06549C9903F4
E755C2E6BAFEF9F3FCE61B6426C9C0AF1196BD504C1C2D8C735C0B1E6267C57E
93AA51E6414CE90A92DAC96F8694EA081AABCFCECB0665CBA6B56524CD5CCEB2
B5DA0717E989F874329D4C73CE852FAB8655DC1B57FCD0742B35D37C3377912E
A7FFBFFA9977C6B45233E203C745C84ACEAB8BEEC1A8C5E2B5FAD52657395DCD
3471FAD4C2A70F0F31C29BFBE131D671AA20209028882857976D4515E730CB30
4A404BE6BB5947361A0664A8BF8B33C6456686A1A4F59FA091122433AD0EDA97
E83CD285BF2D96805461215F4A5CCA6B378B9C2B93CB71E36835A8AC3FE2601C
D2B1370B82A4668FF8C1FDD66C5B526E0890BF226625457059659ED51CAB74F5
5FA7945797237B1656BA0B7B7F533F360894FAFD189B50A1CEC76E8E8974788C
239B91EBE8AEF647688A1CA66C7D5D7C0D055BD5DD5A0BA92842730DFD09DE92
3358806250590FF35564FF90E9DF85FB4B082B7806E3E941AFFA6336D4F9BDAF
124193F6E8396008E5BD04F19BB4EE30FD4A80DBE4DF9EEEADCC816B3C84FE39
07EB828519DE800A9C2CBAAE3E98D910EC76A44AB8AFD6B95D1B72B8B21490FF
528777AD3BAB19ADC5160D411A7CF89853F08800443F32CD93156812CE43B02B
9A8F4A978CA0DBE53EEEEC8AF4270B074F8E374100814A25299BFA985C84CE1C
998C292011E69B3770745B774D8799A0E01F4619F671605FAC55DDDBEF27F76F
3EA659AB97D4976368BCB4152454BD9D5DE9D002DEDF2FF6342EA29CD373E578
CE394EFFA1CE5FE99F96DA5B6978641443E4A49280213A0EEAA75957CF08483F
E4E9E4FCB731F6D39DA40442E648D10AADA23516331D68F5C28ECC3F08B56E85
64F18556B5F1DBCFF100E41E9C14B91C2F1A8D34B1DDDF6531B6B4968A46505D
06D306390158C91859859A1422520BECCFCC4DE6119E2EE6FE9C5D91EBD571DB
DEF885B59E0183831EF994BC1D8766A4FEFD11336E9464742FB5099814EB8BCC
646F393724215F535FE991920686F6574C8CD8FDC63493D8B9EF33711947B65B
0C07BB7FE129E44ADCCAF87401373886FF9BFE508C3A751057316CFEF6801069
2458D1034D72FC882D95B42EF3C49DF4208311C383D5DB5CC7C08ACE7CDA3877
D7DAEFFD70643E28D33F7DB0985F0A3C2E9D379189360FED33DD9AFD5A30CFD7
2807F188592F0A82200400C10C6DFF0BEAEB43D4885785D4D1F07DDD373CB57A
8F422670A4F58EBB9D06F88A3574A729998B80506F4C56D862C31FE74ED1642B
917B64E296D4E219A3597953634A1F9411AF4EEFF9B5E92354322B085573A7EA
D1994EB49B1281DC5ED17653DFF7A81FC83C826A94C6EAF95DE98947D72FDA94
0CA8D2B4F7F044F21E58E6CCBC645837B977E3C58B941166C1EF276997F43FFD
6487C9F51490796CF35B02E38BFB36CBF2E6D0D7304344C2FF47F7245D182B5C
65AC04D5E62FAFECFE7C1FD1BE949F7696B2DBD18DC081E29A4DDBD91DFF437F
F75475570E4EC81674B196E901B0EEDEC46E94C594D494F0124566BC16EC1798
9C1052F8E184590223348E5A96F8849E760494BBF70003BA53516615023DBDE2
0745DB00FE7A2187D2562E08382F94973EE4F7F6CB91EBA6189925F23F0DBDCB
F69D5AAD409B239F1D951B5C023905D41817647B7D2C63A8B8D708B2B900F049
CE98C8CAE1F50A8D81F244A01498B59AAD06E09E5DBF9B15A9BAF2BC4A47C0DA
91237C04915BCFD85189CD9C8FC97FAD356E02CC507E81CADD7262FA3D6C491D
40ED981AECE8D13DC653D59255F868EF158EDD7276340148FEC00842BAE3BA5E
F2F0A91D7E4B1168FEC61D7D25524B08C70599D58E7521F58D26AFECE2173801
F883767E8A5D9EB331968579C3DEBB3E382BC7714F56C391CC4105490C90F3ED
F580FFF16F3C96B9B2D27B998D69EC43448ED49CDE60DE17B95BA0ADBA0E0A44
37D82A7BA66FA0E5B4D0F5D4AF7B046D11F3EFE06FA21B47A2C431ED3DEFC726
7AD9DE87E23C22BFD93FDEE821F972136670FFDCCB3AC95CF69BCF4A341F1F2F
A51C4C0B5E613FEFC6B1084D6ED879306990D17F51C40339BBD717BA9555F70D
BFCE390F10F922625BE41A41B4E83E09AD7127BF672DA7C5F38BB77D1D3EC7EE
88132663A1B15164381022BB6445F965BFA621CFB33D7C6D034EB8530AA184CA
8A5E111CCECFD9B37E0C4A117BBD21E6691069272A6AE455B13A94E793B1B54A
243617AE985BBC01B263933D3E20ED73F4E7D247EAA5BF1BEC53DD019DFCBC30
99ABCB52323A6FD60A7386846C9400E70CA0E6E114DD647EA0AC03B1AA7198D3
CD544181F04FEB26263F9CB022B9C8502037451B79C52B101ADAA48FB0A46146
12258F68624940CE5E663A6F3DE8EE5EC67149EAA00EC861B91F6712A2AEE10E
47046ADB1DE7FFF9453F98FF1A4ED999B464B9D996437C978A252CCC767AD09A
A9ECD6E4465C96FBE9F655600B8893EE2C65BB593B873EB3CBC71F9DA6B570B4
451375B9EAEDEA1115846E0A58558FEE5CC4220F3EAC70DB16034416FCE7C04A
3A3AA48259DC08D6ECE0EF01BCD9EEC871AFD57FD3DBC5998F17B7D86D4D6F2D
1C5324484C73C05C61C3CB80273187F24F9D209D78E0A2FD3FA71C28EDFC1578
8E2093700FC74B0439374F251F8BEF1154F701F3FA11DB2AB83D1377E1D5BCA5
7EA9F738912EDF4315EC1866ED904CD82CC3FA28DA344B632A658418710D3245
224618CB27405613AF6A0821CF81AA3BD93F1BE4C25BB416ECA4229F8358FDC6
856BF7AFB05714C26DA80C2D7D25073BF52A79FE5CFEBD81172C3E68D481E87B
B696C8285F78C66D154289455C5FF2D23C1A5B1B25CD1AF401D01E56B576F524
69452A88622F592F2479384322597E9E2CB635DEF9BD7118C237E43BCE9A42D1
7B627CF1C749FE8F1D3581BBDFDA99DA99667621A30DD12D6983FA9D95A67EE2
C1C07595C0A0E1E1A4C090854DD806FF8CF8D4707C3B6CBC968560E69CC47F34
D796FA5A2DAEE1C2B993E2DE87AA82D15BF4A3B7BC194C7854C54411F14FE808
D8D515C07A3D85F58E9C1E574F41ED7A5668110C3DF3982180C73B81703DCFD1
BFDEBCC3A12114CC920D6060DB63D121BE8BD4D92DACE0A7B4068772E5278DC1
215183569204A2D2352DE559933C8B4E514DB0410B1E140095E1FA2DCAC6A4CF
31407A555660E2681176CEFB2BCA1DE82FEACF80A8EE0FCE3183E912CB7AD280
F09997B01541766404CB5CD95D3946B1656F6C1ACB51B108F8F3FD09F2F1C220
8673A3ED3D91ACE4B124110BEADD4A4B8C49CF740734665C5887D21F219A295E
A233C968746598904F052A50EF84D1C46CFE09C77254D06153F59DB81033F4F4
AEA1BF99F8070976D75485DC40B349EBC45A95688575A4D2874AB2992B9433D8
8988D565CAD27B9EB2020C908E91E81B07A92AD544D20E5785EF2B7412F43F62
25EFD82D88C1D80B6549685F9D39F862F6E38B26B827F6E45D260A96273B951C
EBC81E6BD2C89800409EB1790485F53C020767B5AAB6AB603AC00CA2400D04A1
7C5233C2CBC92DD03C1A809396CBD0A038B6BA98B6078C9FCA1556AEB8E16DC6
5CF6F4383F779695C9A969DE58BEC9A6FBC5BF379C6299F4C1D98BA42AA91660
B2AE39F7BAA5A9077FB466C7ED3C1A4F592BBD4BAC64EA917AA5B9A9AA4522C6
8DA61D24E9AD6B9F764E268D0F02C88423F82D718BC9D791BDDEA40FECA1476A
77A097279320FE11B2A16ADF4F8406456F2EBF2705ECCE7B2ED90343D23E006E
CB282D489E09E798C85AFDA5331918B4B019B338AC46D638824660EF3F6E1572
10A3A46A4A30114F032BA029D8207A5013DB5A078C9A2ED39DF9D18B3ED95BB7
437C84AADE434A814C283601A5CF1C41FAB7DD4784CD74B34B93D190FDA1C80A
E684E56726F52F4A49A022808893BADF86ED80C850F201365D3D90DE7011CAE6
9D1C8E2CE1F2560893AC55B87A0E337A5DA9985EF7DBF5E1072D4D4BC92EE1A2
F72B4F6B519FB73BA2A718C137174824F59FEE22D6C8479149B8F71D79484477
9E3E75A3B587ECEB87AD7647D8218353614511C94D025DFD9425EEF795DD08E3
EC93454C8495181B0E9988DD9FF2F2F7A1645E6B6BFCDE073C781162B11E7949
C57EF2F4E1BD09F0CD7CA8EF1836369D82D571ABF7BDD14C79D796556DEFD53B
378FBB0D1F95EF9CAC30822D4AF6E9B50724C67557B49FD412994D643758B7B2
10BC4E6CD5B400D9440DB8DC29205D951D247C5A2E208983DF2BD52684E11252
77241AD695DEDCC822B75C8DBB2F8F03639A13E6F3845521A115EC67E3972984
27A0A7A59C4ACD748A13881C130EBEAFF4567D31B488B661F8C45EBD2FB0F0EE
1D4A21068FBAD4D77C48E43DDADBFE12AA24BD66895CD2EE2EC7B233B07456FD
4CB9D0E370FC13F87C4AC4EA7673552C992C14563FF9BCC0B4C20EADE38DD8AA
492934045E4EC16AC683EDF570C8EDF0185B123D619284BEDF7FAE632A025B11
05F86A9C9602A5308D897A052CA1F6A18D7C65D557E915C6FEE8103DA73B5D78
2BFFAD7F7C029E12E1943C47EA4515043C418049903E3F36885AD45509FC3CF1
88D238B270655735B6887D8E063E13C6DE822ABE5DD85124AB76A214B401F6E1
DF2E0F680C6DFCDE0AE9FB824BDA2C386289EBD7CCB6319582D7B0F7571F47A6
60686AFC66AFB8F4EE72F16F4A83FD3B6F7C02C8ED058827BD30B111CA08D0AC
4BFA35BD39E31382EB2FA5E5B3FEDF634CB7956956787431C5F75462EEDBC507
DD0FF2EBD9C731D0F06699DA05CFABBCE8EED734C62EDED4A8F3783D5EB445C3
B76095A2FD5BFC3E7A8A2085E55150170D501654D663389C4B5A8891EC5F847F
D143664565A18C2091EB36923F31341B9DF942E732F5332C61623FADFEFA790C
5036965090789D4F09309A682485948E746D1338EBF0AB1F2B5C97A5E4D61272
12AB225F2857D458CD55D90C8CCAC8BFACFCF0E923F2EF64841BC9B7B1B70C67
7E94056D90F65DF04CD94D395C28EEA2752448DB9B3F45CD82E6891224A5614B
F4EF1DD2FD31DDEFFC2245555D27BCDC453C01878274BAF10530B2AD398A98FC
D66DF2315FF8625ADC0F6861B94D712AFC36194FF8031919096596442CE5B2C1
45DAE2B6128E6C913C8812CDB537A5987C43E34B7A21AA7D151A5AE07F302102
33859325410D9DCC9FCD627C9341EE5EE7B62160EDBB0798FEC5FD4CCB61CC8B
279A83B37EECE68CE511975D6A69418385124758A2CCBA6604E8F72BF2316D92
71847F1F59BCA560E04852E7DBC79C2DC8561F805C0DA1E127282E9881F249F5
6881B0FCA0E538AED8CCB91FB008F090E93C1A4F592BBD4BAC64EA917AA5B9A9
AA4522C68DA3F2D615CB138573DDB07F5E27A48B4C64A2B7B2AF242693927DD0
BA011F00F13D1CF2ACE348474BA97FA97A99FAB913EC2A1B95B9BC38DEB1BD8A
ECCC1657EDC849870A1F84A9EBFF3E3CDAEC9F44C6DDF73D5A8958785229452F
E2E6F0D35FE04017742AB969E181F3B06446502C14844B244854E9FA0BAD854C
D89E41C3EB3322CF84E0E556B84B40222BD0F211BC519F73627EC6D5E47E7126
274B2A38C9200BD930D427E6F86B43788F7BEEBB4F9DFE4A4D23801FFAB4AEE0
2CFC33F41CDA69CA9D67B591225CE8AE782B34E4C1384B616F0B45FEC1827877
631F873DA25A91AC093E3B19C4C0475A46935C92E47982C6046A853A0DD61876
D015D7C107B0A106872EF291D907A9CA97A5F3E295C17EF1545EEE457EA66DAD
16F3A921AD5E6545C414346FBDCCF69F29187B369C1FD751DD41D840427BD445
817C308A3CBCF0FCFC5753392961160C191D76693FBC62A5184C4BF062EC5F48
2F9BBA42428460AC283786C0E4C0F45DA2C8C78EE350DC95DA18158C7F8B0BF0
F3B22DA67E7EC571ADC7C21182433B70CD3F5A5CEF3848B76BE67D51ABE9ABDF
14ABD361B9D23E40724FA9C3DCE3C2B9DED6CD9D11622AF853B27E6B882EFEDD
C7E7567F116654EF98052AFA608424B08FC5DE5224FE992AE7CB66C69DBE7886
D7ED3F24BF71026355FDD1C3C40F2D73104612FA58833A4EFA28EDB21ED30C7D
DABE98B213EA5CA9F0C24AC1F2C37FBFD478F2AA31FB2A32A4C0367F3CDAADB9
A370228BDD72DCA6C0EAFC795EE82FEC8FEA7C675B171F8128ACF24EE5A25DD6
3DAB617CA8B941DA69A928EBE46A46B2BF9457BB522B655EEBD4881A62392CAC
3E45E737712ADC7D2C4866AED77FD6FFA5346A760EBBE54E36B118D2481BB1E1
736BDD36A22E617F623FECC043475A0FD680DDA601ED83B77229E55CC6DB7175
2DD0DEACAE196EB3927A7EFFE48E354CF9989F9C09C97000C4AB872867CC5737
D431073B795C41F68E5F98F90921CCE377260EF06A34FD89D0B39126E6179FF4
C5DD40AC274F3072B651C69A8B04341CD443E0F90CC36D65565B2A317094CFE2
7D918C284EDF4D385A5E94F122147F1F00F23B1ECA5D3BEA202AA1F72C6B4707
01C381E335C2364CFCEBACDD20CA3F4B86CBB53775A35F4C4F79078BE326D09E
F99C25BC8D587374441FFECBA1924D32D059448FD4B669BC65C955094D073901
9E61F6A96721D6E8D87B447AE6C7E5FB8B9526A57EEF268AA1B135ACE909BC9E
937ADE20F8DF860C72207FAF08E24C5D0A20A385910CF5CC9590B7D41AB8EECF
9081DEC277C2C3488C24B6FFB6FC050C642404E0CE3CB99F13E8EA78DA56973F
4DA6241B500D66A8BE22FA5056750445A72783A186DA89F02F2C8CF8BC76BB8A
98D6ADB51AFE9B73054AE10CBC9D3A107876C1FC496FAA45285638D00BD50C2B
DA08AC7EB34404BF8A00AC055AE75FD5A8955F09EB5CFEAF9C0DB75F5239E017
0687EB8BFAA3D4CB5E17327404D6A835514F62BD91BFCC3A8B3E46432A10622E
B5330B3CC94DB0901AE1FC52106990C0E44F8236F55938C3CE5A9EEAA8379EE7
D87A8B183BEE72F0D67A10232543AAFA3E7AC77E51E1E4CD769CFC2B351212FC
B66B4CE90406085978F8EAEEA93E0A57E17904D85DF0A7D9E501B59E4B817D66
32F1776246BD8A2C24D781EAEFEFB6AA49B036F3A5D6B2E57ACF8EA725421169
F7A21B75F34987BA586C6FF368ABDC430551163D152A7105F942DC1CB2292313
1131AE570FDC269EA95FB6020B097082E73509B70F0C64694B73BFF6ED68B5EC
D7C9B0A6F6C0264048F377A11D08F846F08F18C47FC2A27A04448B7C4E0655C8
FA2515B038118440924895B6583129FB837AFE9E5EA65226535F722426F524F3
F499C10BBFBDCF134E1D1EB8B314610183673447CA020E48F4C18CA819FD2173
C6F3F2FEE9E418AE444B4DC2729F65C26996C69E6486DEE35F247C439B8FBB6A
1CABEE9F010E4C93C08FCDA085657E92D98E9B33E1A1DF980EC84462A1C4A700
8885277DF6688E3873FBC7A7224F2D029DC386682938DB4B9E4555C19DBC80FD
E4CD067C77710A4E8E65577E5ED37BD0876FE4FC476647EACB11D1F43EFFC35B
A38B0EF54AEE2E8E33ACE1F665EE30BD00B2626E27CE9E77ADECFE7A35AC47B9
35BF6B044B8C57648F253FDFB1654B21E389DB796C79EF81785E814A76D70C78
4AD4D8E0CAFBC64CA3F8A26E2ED17F7EEB50FEF7C6E1C2943A29EE964AEA6AB6
A99320650DE269899E207D4AB4C29D5CE2A0F057F1F3595C646C1ADEDD4B7120
4C48AEB40152B62264330B7CB6E70D71AD2E6E3B87639701ABC329C076A580DA
FA5D07C26880E5DAD8204FBB700F9FDF7861CC6F41C44CBE4C6A843259E5DB63
D095A37759DA1E525F08E5AB00050BE70FDBBF26EB411E3BDD946ABB110A9EA6
49EDFFA277940C8050D2D7F9617DC55C6A30A8CE06B4F292827C249E61BFDB57
FE6275D187BE987ADCFB237C1042E795AEC6F50279725720B9AD793CA27A29AC
BA50580CF53B04482722B8F6F70F52D2D163F8C890D69230D0C8C859B70D8550
3C4A24B0D77BD4F39543F1EDF87466025FC348A5A5A4F412DFDEF340A8A4C9E9
CC64B2CCD647B0FFC6EAE6F2F0CCEBE2AF7E1B6767D098393A39A7A60FB549EE
5F78F23ED8F735804EBD9DD9C921C590427126C3125C7584ECEB32097D5E4144
5009B5B8FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman17-Regular
%!PS-AdobeFont-1.0: LMRoman17-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 805 195 0
%%EndComments
FontDirectory/LMRoman17-Regular known{/LMRoman17-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman17-Regular)readonly def
/FamilyName(LMRoman17)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -252 def
/UnderlineThickness 60 def
end readonly def
/FontName /LMRoman17-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-400 -286 1338 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105D56139855A7DFCE26D44F42E43DCD4B09BCB2
C0B13FCCF45D66724D4F9BD1AE3C5DACA322D5F106264D18B14EA595343FCFF2
E1123332F6D493151CBB41DFD055E2CD496D222EF41B4531A6CF94D6BB6825C2
1FAB496F22FD3B47B1E926B9B05CBAE6422EBBCEC149FC0C70F6F86A0F810CDA
0AFDCB50F75368AC58AE244325EB6CA36EE300BA83D807CAED125E3B16569E7D
1AA186346F4F62D8BF78541FD9DE8C6F961A6753785923F4F221656FE25458D5
0A9808613A1EC6942E9B97B18F0E235388746DDFB04A5234ADAA9F2B59A2B48C
0C094FA865AEF464EFE617DB7A93BB5C2F57C77326A329B432A6BB3AE294D926
7D1EF387E9DD04FFC10FDE445DC4ADFE15D2BC0BFD34906D473A59603FB41480
D35869D2D71EB1F97B5CC81BCDC2ABB45437BCB13EFE608A1DBF25BF03B63C27
CF678B3ABF5C53DBFB7F3E4AF705F3518F7B3682A0C50B4F026D3AD818ECEB10
ECEA905FD14A5D0D09B7B38A3238990CD98B0256D11DC6907857007F39B09C8B
9EEE545A072FE5A265C9EDF7CED499645D848821594918F4F56B9D154A316567
BD9A2462398F07C1CD521F9F3DC87C721A67F56D69470FD29CF72CF5DBC7AFE7
C602AD7D27CCD4689F232657467C14A5FF7F7D1BAEEE4E303119C510A0B277CF
F068B7F4B6EC64A5D969993146E720A1EA0524D58468F113D6E65D18FC32F4C3
90363D9FE4273E24589ADB87E3094725B46F7273BF66A03998BD0D14E16A1B78
96474EFFA7572D9D2E0EB393022F3E8341FD99DC0382C7972E10609B64468C85
4DED836B378EC22C47D64389EC39A4F9559CEBE3FAF93BB8E469C01434A269BD
92AACB6C24C5C93C36059974A75F1CDC349CFC145EBC13857CE69AD4F14FBF35
AE0E25E3A1B65947D70FFEB85C9253075B5D04025AE0344EF76894B658A64DB1
299509A1E7F6F61659F406C52B44259FB9B1C3B24665009041CFE641946FC93F
1206E30F2B6DC521CBD9141150AA9E62C83643505CE3D74F73A8D13B930E6290
9CED0E34F12EAD4B266DD80A399DE156CDC649D036DA389D47F5FC0B6D570340
2EFD2C502B9110D530661670AD0B281E212A94C9E3F324BE1BC4AED0DC766810
A1779ADA929D291E50B6F2F4222034E26E42AED14A2966BAA5D3D6DD0A38574F
EB6FFE88F4CCD35C133D00044713D8770796F7E1B46653DD2778F1181D774D8A
4CDD0A5787C961FE2354A01EBBD2FE4DC35FA945B109E02BC9D0CA8F2F54C306
AC2ACCAA6366E6F24A603AC3E2B599C47DE9C5F840B8607ABC3EBD65B115CB8C
C3532436846921964AB2BE5A83FBE336D8C2D1325E033E6CA7B01BACCF8030CA
D26310FA1CF769F4A2A6DD033D6A0D6B27DFB7E5EE5315C3163A5E658CE844D4
F0DDB7D17FC1F755919054DC900685CE73A8D5738C2BC3A5CAAD63A2DFE5DE21
E630125AE03ABBA75B3C5272D5BBD5672BAB714A362DCAECAF285C3F8DEE0BD7
82DBA0E886D584E4E06BCFF708B6DC29E0E0E03461C073EA8B3DD439E5109C42
56E14813707C96C369F883A6E09BBD083541DC07F64A09099CB9C8A8EB1F0469
2076EB31426240BB2AECAF921477FCD299B2E5EA7AE19978F96F7CFD366BF9B1
40E1940E13D7443EFCEED616163438ED70E86F742C3B5D9421E2AF8F2412E78C
A82BB17C1EB3108C53E594D933EADE2663ECCD818CD77D92C0A70F58A3967DE2
6F93EB7C1019B8A18D4135AAF5DAD759BD39211540C0297FC1BD9FB9D2B58A91
DD3E154262B37BD16AF15612ED9AC48BF60CFF85EB4B7BAE2AEA2111F06336C3
94A67EB4705D5E99A4AF22DEB28E72BEF671339F900E204FDA3CA9C2B6D2FEC6
9A20CE60D218A8996ECDDC6138478B29F1588ECD60FE00737540B21745BD882F
FECB8914A1E25B2A8B2D026B30AF73CA72C9EB2C7F36E27D00D4347DFBB8B977
D8B6C20CD382EB8EEC2982333428081F09F426B953C4D5CB44A6DD2B19511709
6C46D1167CC3B84A260D2049D5A06F34DE2335626096EA26D57B94A928E7AFC3
B473C5EF5EA99AA922FAA53D9D03C54706B5EC558BFB0E0CF46A06EA698545C3
76603E34B998965E25BF5A471FFC465B8D40FA63BA53CD71AC8A5ED1139BC3E9
F704859D7495D9E1AD240C5C1E3E022AE56B6AB1FB07508634A07D3A46006B02
52188B7B98020112167CF5BFE161C8612D66A783164ECEA734E43C264C224618
CB27405613AF6A0821CF81AA3BD93F1BE76F7DA480959E4F8348015D1F8D9591
F91F6A2A228EB2CE712D285882C14E68234B605493EF2D2F1DA1B3B28978C77A
5680FD5D8DE8B605ED3013A69E65112D94530A263D604E53091F7B9738BAEE1B
C63DF9EEC93B6319F0426619FE5F40B46BE7D221A2E4C4E7A8CC77D5014387B0
64500C857F06F90D95C79E5BA65FB1CB6563095F56B93D56DF696400ACD04765
BC7937583885F2A7BCFAE2C8BC6D9A960E7416A6BD1DFB29ED7A7C8875D901C9
EFEBFE0078093EA47D0DA522E23F071054D2193B8BC36A6C26FB97DE6E1E78EB
89C061B426EDD6D2075A3EF22C108F4E44649AF6BBFBFA1A32ACB18CFB0869D6
55CC9E8B03CEFFF4F6BA0123E580C25C01E3E44A8D7CF4C09A722327A7A7082D
9F4F03EF314527A827D08C982308DBC1B65B077EBDA80080E3B3FC138DCB507B
A5DEEFF27E8E687D25A207752BD388D99A4F53434B0EE39A08AA242DCDC061A4
4DE0154738DE06D361E0D9154FD2BB8D149E936B007A5B0E360136BA4C9CD37F
B26769ADA2147C387486129299A31E2083E4DE5A410131B866B55BBECDE2E2B3
5C58847F36B887EED1D629B477018D55A41C8DF859C8E410A1DED65711B579E0
B60F46E590B5802DF919324682903ECFE0A0E8E3E94B4607DEBEE4772C1D183F
91D837DAC94609659451F83DAA632BD7904EBBD089B189203DF723F44B787055
7B23B9D0062F9107F2A18F70ADB7D0125C7326058030E2B5AEEBFACC763141BB
17A96BCFC81274142D452C210D2C42CED2C31FD08731E0A3A099F8070976D754
85DC4FACF0E8DC22BBCF994F435523933E971D33170450A6CDD3A16CC7F7894D
4A17700F4D5BA9D189BC8EEC77719AAFD4DC3147EC63E3179574E6CCEE1FB1F6
773563AD543641E0F8A3E7314914C307549274C1929A4F420EAD193A55D17766
E680F2D445758324D4264B36AA75E2B32F3A80AC939951D59379A0F7EBFDA5F8
F301F03BB593307B759B93432F1A710625681DEB0AA59E5E8CE27B8C4B6E8B4F
056867F1C0B014E2B65B5A556B2CC0585A7AC24DE6DB33473D460C71EDBC4D85
38AB21BF4D1ABE0CB264EEDD6BE0658FA2747C56858CA4C7012428ECD18DDA85
175E3CE67FD4A6528AC0CB2FA3AA2CF780DADBD2FE7CC925DFAD72FA86B7C7A5
CE91DA64C30D35B103D731F68B3599508A40C9E006FFF88FF54702D2F9D1A454
DE1F82292CA07F3948B726E9D3DC6F3AA19E84C23DDA65B12239072BB6F5ADF5
7352368FEE8D048037D53CE9B69E7A5D0E31726EC3BF9FD98C0AE5BA1BC567DB
B9EAC79E8C71C2C7847B5B079837425D00D1D5B53BF9623C176F0674BE270608
66F3E5581195FAF76BFE144EC132B85978EF75B3A436BDE5ED665C8A63364572
45B77DB5BED5AD69086905342288F514C13D06A414BB9D434502EFAD841F0DDA
C1AB9846E8344FAA94F2C41CF57C40DD96722D089DEC3F2D2F1D7FA918D72051
DB6CFBA44520B5B5689C87541B1A16CFA275D9F5743FB69CF161B63A8698A10F
249C9FF77D1332AF890CD48D6E4B5EFB9187BF9D6A2AFDA4D6F62578515EC78E
18B045F400D54B000D43063E3E2EE061BBFC66180409995938F9BD5A6CA0873B
2268960D05C94C00A2E8B33E44041B9AF54300B6E764B46D6172499CDDCC90EA
538A5526FD5AFF81D04BF56232C9FFD6B1B81B9E553B4A7E3C50F98DFC652FA6
73E98E31FD3021485E3D82A817866FE481DF6360B07688431FA1E99468E5BF42
ED89315CDAF8B6868611CD039216762900C1A624AACA506DCBF9AC0D226D7C9D
DEADFADFC8BCE85D2A7E4CF939DDC479252D945DCAF670A309901C67ABBC61FD
F2ADD52E1773E48CC12E3CD8C96EAA02F137C2134A47241E3F15A881F6A2F860
595A23B2F32A46B578F76FE7027B3CFB43CFEB5A7617E7FB14023F405FFF1FE0
ACA49F9FF46C7B4D7223A5EA2D99809C71C946EB77ED556CD01675A5D45FC8BD
00A303EDDC21219F392DDBEA601D6DDCE7A864595326E3454F43A166E2E533F1
C050D35CE4AEE92C35EE391070F9085918B9123793DECF156F4018399C3DF46C
502B223E70F9A37D5032501CA2C904FD0300ECCAD06E7BDFA5139C2886DEEBED
572A5B787381CCDFF42AB3879F98E39CB6383FB3CF998B84796AD4F1646204CF
A8DE394D077DF4E12449863C38560F4C025E8158D68F71F943A80E952DA9EC80
733ECA11FCDE896424CAF89E9455860BF99A972F463F0D41B85D627518A85CC9
6B29B99A1B5411B99723187596489A8894E0373BF6D0E1D56EA24BEC26911A05
A5DAB4C473CC5665A315BF1B163C9BB372ABDBA0F1C953E5B7B633842DF8A83A
3DAE292D6376AE89299D23D94203EDFEB2A8899B078698314F08981397316D0C
5D14BAA0FCD33A038BDF794449F8035E51371E491EF9499DEA14079C31D65CD9
8FA769BDC5386A266732A458DE4B5B54076F7EE652220C5CD20A575A917C9E7A
961997A02EF8DBC323983FE3080CC0BE03329FB9B40DC052C65182B961927DE0
98C08A66D1E33FF54A29BD60561DE014251C3C2EB411F1DFD619D6F72BECD582
160DFC4CCAEC9C5620F73BA0E13D41CAD8B041D7B68FA79CE2AD11AA16248073
129A8325A4859341F41089169420CD7B43EE4CF762927CFCCCD8769905F0F6CF
F798BDB71701E2614FE6754336416227A67D0A9835FCF18E37539A7066E51F67
359590CB8309079CDE32496FEC5A2380BC8223B359DA5A200543C9A0B4ADEBE5
9B5BEE2E6037CA5C907C47A81E657F371630319C3166DC6761D7D722DB82FE09
BCB0B48228CBD0263D587A97E1FF3B5A087317A8108552087181251AD87A3BD5
3F4F96B494948D9305B66F6D2FCA841EC6C11B170B3B87047466804D6AAB0E84
388EF47DE0552ADA3E14BCFBA967EA91D5B08F793FBE5F1AF388F9A32BF6D144
7A6EFA474AFE7BFEFFE3DF1A04FAF2FF0BCEE905BA98E60CB0AFAF1AC8FC2CC8
72B650E35C23D8347DE73595318B43DBFA73424CE4AD0D62613C595D1E9A3706
C2372CAD0D04EA4F64E96C20699C8F59FCB04888664F82675A3DD3ED0601E5F8
D083AF7338011144A36FB4C3A6761D48BE17ECA852F8AF6C244137EA11033F33
AF70C0D4612011CDDE53EE22DE1EFB9A8771536CB7FCE827E8B6C453F843B10E
C212D258C3CAD62CEA35145CAF1608528E74403A59A5F1FE7DCF86D9E96CD99C
6E70C0925F95D670447B523F796E0B313B90AAE9ED8DB5E710CD843327B1F360
133AB8050418585ED2A5FC81C7F9B76F4A262313A01B5FADEFD8ABDE4AB156F9
EA94BED0241E39A771747F79A79D9BFE1996455987BC2C3D31DE5E0367B7006F
757508FCB5D653DAD14A810EED9C35667137A76761CBA2FBFFCEAFE3E98D5590
D953164225D3BF187695B9223A7A68309E172EF68851B362FD17748AA9B72074
2A415DAA0CE1B8745736395AEC4766526A133B8800E5D9734B24E017A2E35404
5A2012892E8DDE862922A8F80A0DD8B36675E83371DDD08041EC73BF4CBEC375
4928F3BBB733898EDF6E3EC777A0DF37639A6E1EC4D432C913EC6C0C90A7F07D
6FA3435DBF76FF8A70E8E030DBAA42C6594DD8D1ABFDDAE449FE68185327170B
046B27F59EF239314EE97CCC237877477FD29AE816D48E175C71E275D0124864
FD966BDC275557607AAA6AD59AC21FC387E9ACC1CF1EE514D77041F132E00B13
A76A105AB3EB6E4BF4969357A2A5903A5BA40F8E6CA80916037DB040BCE3CF55
921FAB9ED7F964ED314D50CDC06341481153D908E0637E3502691CF790EB99F5
7B180C4BC71579F931AE8DCF2C73697EB452E0EAC3A4727E4071C660682B4DD6
716924DBC6C9DE039497621E584D1E9DABAF71A35D3311D47D25F3A7BD9EF3FA
BB04B588E6124054D9F73ED29D655638004350A9746BC92EA75374AA79C3E5F3
CD8A5CEAC7481913AA00DD602CF4BD29FFE886214DF47B13C051059478654C8A
ACD179511A766B32D2B9FB28B1B957CA4221936F13388CE0AC08ADC3134D1F38
F37B025300E352B3655232E12A5937209B8A96BC02A0A3F6507D15AC6A5AB05F
22604D380FD3572448A7AC138BCE2F2614952AA8FB5AE053A92B95B480BCF325
68643D68501E25F70AEF343E48EA15A6D4AD59014E61259C607ACF39E66BB033
1033E4F074D29DF85080F069561019E04A19756966EC32CCB65FE9498216960A
09A3876B6D3EDB65BE902155C1A9D43835A12F42446BB32E7198E73357DD9565
385B1E6A133B6C9AC1E9461009C0A078862017B2A7AC402DE9CDCF42546F422F
2272A77C7B24EA082C8B2FBD95AAEF7187DEC15CC897C563DC4BDC3F482C8C37
3F0F0AB39595658AB429EEF5356F7CCD11E4F2FDF36752CF7B6B54D8D996A9C1
56F99318004EC02D5CD155CA55BB89156AE4BE6B40950D60CCC8143CCD4A3530
2FACC4AFFFADEA375AA5175ABAE6754E91CB540D475231DC759465223E0910BC
6092E488A3488D54C024C9D1D083F264DDE97DF65B0612857F360BA1F06AF09D
E5CAFD23D546AFD341F39913EA22BCE0635C95A998A77FFC56DFEC7EC41125C2
B0BA6F1413D796C008A2ECD55E062CDFDADD19568D68DF1CCA64E069D10DE577
C4E43F0E4BBC0182D865CB06AAF333F91C2D2910FE5E427D4554B341E305B593
9F4758E242256C0546A502E082179E316C22CF7A3C5BB223BA6AB44C3DE99624
DB1B364E6474BA273E630CC357B350D466B4D20EE132FE168BE61D4FF95132CF
BE2DD7F31B8E86D61A549F0DAEE590CFDE3C61BAA6FF90F887570B3DA85186B8
78777DED4FFDCC47019E5AD2C401F7C98823349A006962A7D2D4D9CDCED35624
1E9838D85C7C702542DCC4F62DD4CE83D8B0A6B2D3D7EBDDB81F645AD8CBABFB
B903B090ABC8D0222F3F3AB09784050BE851291CB10E58A558D6440E61F72C32
996988432DD5FAE581E04BD937DB4BE342FF23E08F149D9FCCE8E554596F8369
028CCB95F05432204FE04146BB130665B53C8C730543071E483CB9B1E4AC5CFB
2C9F6FC1E42345AA2DEED29B985455F21E95225D7DA4780BE7588A28156E64A8
8F5A6753BB9B857B24EC11AFD13D92CD7D86CEBF53511D26FE98C66E17C49C6A
C5B8EBC8C27112BDDDFA66B001427BF5BE8D3F1C7C052B488381C7C8227CD5C1
F09F19F8DDC59FE67B0EB845E2E23E1680B0037F65C299ABF128FE2511732602
A5885A6CD283AD3C1C8E56C0149B514B077E49CE66A190B6B90B72719B354F14
B31F640CAC28723484FF9A156EC1EEFB1B1CE70130763A05BCC93B20D730B436
91E149409C10DB07153311CA5DD935B6AE8D5C59A02A0BCB36CEFCC73964B0BD
0E69295DCB4A603FECA9B0C863ABCBA8006CDEE4B2BAAC65404D86ADD99836BC
1C3C69BC25BFCF497EF543D64BE3AB9FE01BB4E9E340BFB3CA709613DEF07063
694941FB4E22828985A34897735EF74BFC52E9210C8A69260B1977BC4D4521C7
55D34B4965C7EA40248B6A6E4412265C9AB5F6A73A47FFFB9D641335DF470E29
43B9666224238DAD9E3455E5EFFB270CF36E7E0DA7F980556A3D94DBF0F028FF
400BBFD75E4B8650BD529514561A1CBB7FFFEE3BEF3E46AA957F5D1988A3D8F6
4CA95E2832B1BFD96112F27F9B4CDC7DC12D52AE6A36620F4FE17BB14C4A599D
DBB64D567D7F1814E550BB18DF86BE795E1BB9B1973A7DD95352BF1532EB87DC
7346FD25DA57E0067251506608A2FE4693A2B9B3D435499D35A59EB9761DF2A6
B31D984F0072AA303DB3B92F6130970D4BFB7C074F64411F413D11D4FD4EE6DB
68AAE9D26BFF842E0875D3205865A4D31920D9C4B3649C1FBB448577C1445919
84D9EB784090C81C890D0E98FD06C7AA912A719A5C01D1DB78483C99F7EB4E1D
1C5ECFA2D925E13BD7D67620B5D4DD456453124D7433EEB44C724ED69C8697D0
6A5246DF0AE5285658B439AF2702915B99BAC5F8EBD6F2BA061DE84855EC943C
7E0AFB0A40631420C685B774A59272B1A6728B573838413D8A761B8A0D2C90FE
4DD9EE467FDFB6598518B5F0FB55C550FD3B67A0966A0C10C061A2D99F8C01DF
70CC713BDD1BE45C36BC39D9C7F38F4B9038673CDFF3EED771F71D256DE79500
C16AEFE3A6FB08384AE4C13D362989D1F6721DCFDE9F4ECD69FD37878B3DA7CB
1F0514DEECC225301813E4ECE6D689B0A0471785155FCC58282FB23867D928A1
4FC94468128D603E0939CB3148475002412C3BB280E2FFFB47BAFBF9265DAC2B
8DE7532BD19CFDD69285BF725FB229FAC5B04635DAAF5976B26B236326254573
2285C77EBACA3D7DB67D1AD8E5027B7D1E0C22A83AA19F30AB25F328B5826816
3437894D054AA38BC5095F322AE1B521B693B384A60C684AA3DD235D36BBD540
E737EAE242036E4AA12201F35DA8A0DD76EAC1477D781DDF9ED17BF1BF122E05
7F5B35CA9CC63B4DC365CBC412E94582735AF6C987C2F58D67AEA88E25C03D37
0D6CBE2C822CE594D92CFB878BB725424A96313F544751347E9AA3520A6356FF
92A13F35F17BC136551A4AC51A3D299ACAE069D8569919572C4946A32BADCDAE
2EF0E8F7CCE88AF09C8E66A6F2F6A517D7E81385AFC3ED30C556BCABDF439E59
0EF307E3EBBA03A0551BB232692DFD2E9CC177779879FD0437752375DB381713
A93E5F02E55EF58E729E06BA415230C05DBF9BE547DCF3AF3471F16FF759D63A
7C091ADDCD3077D23CF3CF4024628056A672802384A5E5DB25A29C3EF072535A
07564A9D3C2275458700FD01CB5E99962B8E8D8A52AA884860A45FF4F2868351
757DD4DB80FFA13B5A13EEB7D23F29D5FACE40BDF7F9B0714AB9E6E655AFE53D
25EC7B27B429929742FA4FE73B31D9075B4D37B7850AE32B4341E9E671D8DA53
0E9285778EDF77B600F65FD6114B943D89D63966FC98D9CA32B97933842A14BD
CFB39ECA0ECA3D597FBAD8C7EC31F3C1C46E5AE79F74B2AE501E1B78FB92A8A3
2F408CD9208A66A14DD2BDC5F8CB704831E9033E6406E6904C934DDF1025D0C7
DC1257A43009A230B2578118918F97C7BB8B62E532972120E42B57F31431D00C
70298B535051486966C6381B934EE561E56CCA80C618C1814F112E445F32C097
0817BC40514A2A726BDED2B572EAF23F87D1B4E33DCD967D167E9A350ED45EC3
231BED6F014A7B7CE4D18AE1419122ED11A4A08A419AFFF7DF7065992B084D56
7645EE4D2FC299C5786FF9A419F65532D5DA71ADA3F8F0C009AA08743424C866
45BE24D02AFF56B18D6E2E1503E9DBC77A09C4F1A080F6AF3A9121D8EF4BCFCC
80EC71F78908BDA221911D55AABFA3C18EC4503D3F55A3374474F1D4BE727405
55D351DFCA7FAFF1EA78D0D6FD12743F6BC297629E80C2569F8C51F03E409DCE
0717779DEA582740E49F08841C821EDC6BE3FD98C5EF08ADDDF69890FB2039F3
5A3A6F14E107AC2BD2E5BA6E9C5DF1EA2C15AB002038DD1EEA7CA83241B09150
3FE2B00E5F7579AEF49A3D4F22D34AD10193B73D2C7D6C71A1FBC04F6E98581B
5D753849BF36432C3D97BFA325CE8096FD87B5398776E612686CCF6ED8D97996
46156E1491E5521FC8B9CD9158D756817A876ED88EC52D2695B95E8EFC1512AC
F21BD0C300974437D26635220FB98495B2E4CD4729AAF9B80ECC6C9B61AEE573
32E5E230434D4115962434C3792610A44FC7BA06497B40B6CE001EB5EE7A9F63
6F046CC24897AC3A58E8615BA35B4E84ABA374862AD9E38D889D05418EB8CFFE
5C7594E2D8B7498C00DE1C735AEAE93E456ADFD9C601F6474014DCFDB71FA151
BFD05B61C2C2B9F214D774C69B9F10988BE7D061F539CC8711030D2483F75272
C5435D8DE1064D3D38BCFD0A94DA868981A99E2442F01E5A123C1A8C4F2954D5
6B8F24B99DD5F1B638172E6EE189F7500B393E531E77C5D38E2FA764893C5080
78324314B92F4B6722BD29396F61B509F4B1F394746865292B1BF194D09129E2
021AB9B4DE3C8C0567E70FB8EDD896243D05DBADA8AF7B55574CC26F4B1DABBD
0AA23252A6EE9C4874830B1FAF45629C5DCDA834092F51366B4AA9246BC8CC7D
99C4240559D1D2C2B57D699E5EB82A8731F90AF8C65F21F3E925BAEAF3142ADA
7893AC78D07EF0FE9CE3B835B252BED0466F2140FF19F5A2C3548A1475483DD8
451FE4FF72E37B03CEF0E2DA4C842ACF78F5DFD58A9BB32EF6AECEBE77D80BCA
4304C3DBD06FA06FD51B513A2DDA4538BD974A1B6EADFE9F84A7C5DC8C816931
D4EA5649814A1753EC6EBE9419D16612B3EACD0A3454B529297E4E8AEB9E3496
83FC5E1C323236F714E4B67E256379A863677DCE24A14BFC52E9210C8A692602
DFB25EE2419BCB743524D5BC9AD5B6E55A110CC62D923BE69B9CF025A82867C8
1B23EE5C520C6D50720D63688BDDB37C88A024D42DF89C8D4D734A0B108FD2BE
B480F73859FD9E1D5455234F366F8919BBA377177966FD7F0C53471631464ECB
612BE19C84213E7FF228B69E1D51091FD28AD509908ACD994DCAB1F6AA8EC52E
DE61B673CF853E976FBE5B20091226BD53504A414099BA8E0CFFAEBC9645857A
FC4009E803348BD23C5B2FD805839C4056EAEE1C2196A14A4D6F646BAFEB7C19
098C9E2A50DD68839C2708CB5A55F4ED91FBA9AC00C0C25D34BBF10CB66D603E
8D09061E486AF75A8C1BCEA9D21057958CAE96DEDD4A99CC2F0BD0358E73D500
D9A5CF19043C6C69DAFCB66CFA9D85C9CB0414FA88D91378504A67ED030C9343
D40421169E96927A6D0BC305BD5820C99145AA7E7B25CD2E2CD6644CE07BB3A0
26D50C7A88DF5F480147D87DFEFE463F77C5C86005A1999A95B5B8A42DE5BB13
84878378F1C62810CA4BD5E05B7DA8C435A28EF529B15DCFE08B3574C4431989
E8B80209D1347529714C5C6182FC4CD1BAB408ACA7B419B7ACA96BFE86212612
449813E191E96140B3251C57B1224E2237CE0413A464973E2730E8D19B855360
9A76A9C5EB6A15CDE8D5992255C82749370F2CDA203334B853E32D9E7581D407
EBE3A42FB15333B8666882DC9556D14729E8002E4507A1AFD615AD0A613DDA0C
40478DB62D5A9E7CDE0A4687DF29504DED589783E9086F0BCA312E87FBDBC45E
45A08706F0E124592741656B61881019DEFDA17AC2E515BDB3D6B2980655EFDB
97B56F36900DA5E294616DF435DF8515DA06F529E3B69B892F95322B029EA8A7
323F271A6643341F7720B16123685EA3EFEFE8DDD98B55CACEA45D4046B046D2
BD09D8972F3356B9C70B20180D686B2FD1CE008D5BDBDDFE4BD69237CAEEFCC1
0F47FB671C91A7E12A8BAEE00B6C5F344D109E6D8D125DF861F1809D9ACEA7F7
E6D640181B76D32A13E8DC0876544B886DE6851A9084E4B8F79E73AB54B369F8
ACD321FC39388733CA1C0B86C4291E60DC73CA009C04CED4E2B235CBA28CA560
DBD3CD5E98B2DFFD054E8908F636669356E19FEFC7684530D78306BB0A102D45
9C0304DAE34AD74C4F6EE4D88F814913C32C56CEE116DAB56AC7D0A18A9939B1
590B3565E8D4445637ABE2052E61658CDD33BE34ED09BB1BEF9525DBECFE5A99
4BC6ED3E5238AB3271A5B75ECE9721E484AEA8DEFA2A70992128A7B3321E2EFD
DD7D4AD99C22406FE793DD7D94EE43C409EEB53974A69D2FC7B2005207EE7676
D8ABC04447A1034C34F4D728E9E820131692793929CC3D4196A364D36CAB7942
8A2F246196AF20CB4A1195C76A6AD514B074577EF9C645314BAC0C5D26C1076A
A31C8E89466EB4392E27761E72DA24E4C108C309E90A8C6DAB6DF85913311B64
1EDE7B07C21A7FD2CE803A205B482B03F9BAE14E1ECDE1EA43EEDB955513F42E
DDCF39AE522A1609B7709337CA0058E648347405573D737AC2C6BE8BA8757DA4
47631F40083B8B89D365F9217E80AB3606D02CBD3B8B6DD2B9A8F686D6AA020E
49172C02DA888DE03C627ED807BDBE8E13952104D6EE0726B4A298F819F4B420
E78DFA8BC885FAE09A9446DFDF923961AE5C0616208B77CA29A7E1CBCEFF5D8A
901D7FD1EBA71498638B37633C970B845939275655F39F9C368D414EEC20824B
D317F65F182B68A1B09693ABF521BEDA2EF6922A1E6C0375F39681F365C2C5BF
ABA8064D0B4AD3A9CB232D422FBD61B036C8793C7AE960AC0175D62683C5C6FB
8B9C8AA67AD800C043DD15BC8291750EC9A65655A71AF0BF094982B7B126D825
5F1A0F1BD08158F94077D191F62DD60C314AE7040D28E2027A98BF9148F4B111
8179748A738B3B3F046ABD2F6E793C31EBF5C89965E329D5452E097CE79B0C81
3CAC93DCFD9043706B83ABFD905E60E74427B6BD86A628033497A07350088F45
5893B8491EB8B638F3ABCD2E99512D7844262AACE40E04F2BC627789E6CDEDA1
61415478975E25D1E928C5867A495F88565BA28FECAE9271978280C6753045C8
40785F033D885B728B70F2C52D61F311C2EE3444CC6154FCFFAACE818BFCD6ED
45BE46E94F31CA3C2BD454C2ED823A21CC37359E64464B564A05519BB0C8190F
A1FA8C8A21B412B32B89A8742A69F9A855FFCBA0AEFE76DCC89196C2B1873C72
5E0B0D374F1BB5DC96B5B927F693F3506D76C9184F8DAECBAF8C92298D06EFEE
8EEBD3FA6C2F84814D8429F4ECF8E4AB6364E2FA747EE9A89161F93F178D7A24
AB2C729A4B3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B86079BB936FF8C866
9EB2DE84B7B61759667B7F6F52E57FCE1B23236F5F33E63C9115F80624303534
894DF0C0E88845707D7EF11CD4322E8DA1D212C20281360F60B0A8B02CA4268B
56124C0C42CCFD882CF1827DD0B979E7FA7EC3090F06E79A8BE6B9EC347BED7A
C15B9A3B0CAF7D0273FEB0BFBB6DC2FA129B42E2142611ED0A8ACAC6EA58BBC7
D0902E5F8BA2960305836E8B4BFB953AED79A3B1C5151413AE8B600E9FC07EAB
89A3AD38B428A2F6BC0A1009C8950E7DBC216AB359087D8B27F4F7C38152DCF9
CD41A470003AAB80E1A3A054FAAB7F2A9793082241A2A70F39A2D3A7C748664D
0DF3DAB0C546942F887B08E85E2ABA90EA40D6F2FE1D28D125B2A6759C9457FD
9C1A3E9C511FCB552194CDACD36DB6FC331F8FB67C9AEF72DBECDD79FBCC7A44
25EDDAA7F49257148F05FF52FEB65DB06ECFAE2165378F8EC2FB09DB3CA8EE88
4B5342D9C7E7898553FFCF7C0D7862FBBAA3043BD6D5775CC6E1BA1400BDCF7A
4BBAAC2CD397686834A6BAB96EE0F6E75EABB0F94ABDD9C681FE691EF3090EA8
853E8A160448547FF24B2CB8D87BFCCC85B1F91277DF1E391ED3226ECFCB2B9E
F7A89A36FD278695F6F2FB9A6F974915BA9032BFF6AFE7BF2F88E03DBDFC145E
871C2D19239E805DB513FC226A7F3FE390001B600BB327B726927DAA99162417
8F33BA78DF24F7346872E84795059D0A12F0E2999A260822E618B71F2FD585B9
685A7A51091536FFAE377D55360E3E2A83100A7477F0591A23CFC73EFC3F89B8
EE9E0C7247962F244E4B3EA74280B7101D384B1B4873797DB35F3DD8F33E7DD7
4D587CAF5D0772DA9B71D15E33C97638C053F3483E6A2A4699E4EAE54E5892C6
0E185235937A0B37B5F1BC381AE35499EA5A9CBA58CCAA96DBF424CFB1800057
E4CD4218C88DAEE1BCCCA10DC06AE55D653BC28E2E7BF13ACA6B3BB54E58726C
1DE836B770700CF2A0339F932107DCF0735034F53154A16BD4CB4279E92444AE
54D5C6FF284FD81E544D200A0A48210743AD5CFBC453A35828852681322F471C
D1662724747EDCA071AD0580BC14CA70AEA97FF4B704F7641BC2612DEEBD1DDB
3F3EDC5FA135479FC9FA2409826AABDB6115B57DC06CE5CAA36431889458C7A3
3BF68EEA18E6E56F98B8C759187CF9112E3619F9ACCAD376725BFF2766676F92
1BF3FDFCF57B30BA747DB8C0EC672AE7E8BFC1B6FA32103480163422D6F9CCA7
0EAEC1D37A6200BB1794DC2F08424BAD2A76790BBB18E9A73A3AC40F568481F7
D2463BE72AF1223D0690DDB88C7DA9D59148324E7CA445CD4FF8024C28F61A2A
EF37E4F659E4B3AE3CDBE7C39F84BDB219185B42731952D812918F76EC614BEA
4C2CF3DF8E3F4824B954594A1F97194B19FA8DADD21640414AE00C708F24FC42
859E4D18B40BF75688F3ED383286EBB1C2B245CD622A4B9456FC899830D6050C
C3237ECC90DEDCC822B75C8DBB2F8F03639A13E6F3845521A4A31B3D272FF301
608967581C38905B333CCF344D42512919837359421B7EBDB671E21F5FAEF62A
44FAD2EF151E6F47C391A369F897DD1CFD7A456FA223553311D5DFBF8BC5F68B
BDC9066AE3BB0516F7FE82C45D3F4EFD8D85876A46728049B116F1096AD998FE
4B93525C3596EB7A453F84071BCB3FA82780691BB952D29ACC6130A678AAB49D
924302C969561C704F60EAD3DC1DFD8ABEE45F93303F00B281D1B8F9938DC2FD
8EB501E496182B15C513749DD9664535D3D20CBD00EFBC3335345F7579F6A8DD
CBDCED6A289C01AB88876D626C0DDF493F875241C2D4D5C9EA1C718232391934
FA35C825C0FCD9F2CCD28A4268B7383E97F32358CE522B711037CC8FFC175CFB
EE78F40E871C90A6175956C54E9E368CA67F79A9DD91EC82EC0F1D5D95616CD9
3B93D45459AF43384C66A461037FFBA4AB5C77B5FFC96866641D00B0AB0281C7
CD4FBA06D8020721BF4377397E895783A4CA85076E85A632B0522B49F5ECD4DE
EB154FAD70DA94BD3F6D96ED689EC26B5CBC75DE9AE457EF670B55E2F78AD683
079F564F6ADBC34D2D36AB334DFE50F72B508497462FA7C43F18076BE980EA03
F315BA14C80E80248819BCCFAA907DAB271BEC58EC1F4619F671605FACD5B6AF
9A887A21D5935680C5C3CDA4FECEAFBAC6248D305562EDBFA9548D54E5D5CCBB
9DFABA39738AF12C634447587C9B9B56E131785969B672BB20632C49E4671C91
68366BB2CA30F4D80B992CEFA8FC9237938FF8642BD551DF6E19A3D52FDFDCAE
B6790F1889DD54EE0164A61D924F7B17D99E1679B048CC947527D857FD477BA5
0486F6864CB7AB263AD03EB6901A05A5DAB4C473CC5665A315BF1B163C9BB372
AE62E1D55D0D712E617802976F8F223C8ADDCA895309CAABC03D616143FFB85D
78805A95B8CB191C775A2DDEB5E8AF896063C7418B4BCFC127A9AB30BC2073A5
FBF9F27C3F596193BA5C06EFAEA6313E62E70EC9BEF8C45608060E97A8A62296
A2D3EE7B2B79BF7494BDA2645D0FDE0531069110D2452AACF63BFC4A5D024308
3FF2EAE5F08CA9A1DB2E4C4AE4356CE80939AFF6ABE72FF971C361E5A53F5D63
F34360CEA089E994C36CACD2E02DD5903B193EE1B0B9A5D4BB9C7456FBF0BD75
7E71985920DE17F0450EDD5B7177BD8E9D24F77E526E649044CFD49636786F80
32AB362D65C77F144A456D5A77B0C43821F042E0252AFF773E96A5067A963B28
EFCF9069994A576F53710D89D3DBE624E72E3AD8F47C1D8468D4237442FE1D37
AE86838F1CF017F9E87057F94EC125B3ECF744CD540C1AAD3493874D67FB56FE
D2C58DD18152F75E9E3A668552EC3A446F706C62F540E3993BA57FC5A340C84F
EAF1B62C42FFFD53ABAF7ED904BC8AE20B2B15F19F8A01D3021CDC8414D5EC64
18DB8179EFF78049A3C48F0C0374C94E1A158E799D50610BA45F2003568AF44E
2EE4D977CE6647F5024D51CD78D79C802EEABBCA93CBF968192C457919072659
2F5D4BCE6738CC357F0EB6F73D82D60017A51F5781CAA9A414AEEA78ABC17DDD
10E2B4D777758B254FC11A4FDA5CC00656C0B449E94C749BD813E4279C016949
79DACD3F5A953BD9E918D5E46449525A4C3FBCEB69D1D202871BC2B15EEE8E1A
D13E7308928E7313781D9B1551C31F102A7E3D6BBCE8E929BB14FFE9E1939968
B1D02976D700F1D4CAD5C1319B772F7BD8C914FABEFF30E18A42C47DD0FA1EE3
521C98714EC451AB58BD5C7F47FD9AD944D046BEFEF429B0A153D676F5D5AA1C
5354C7E604231E3E61D172E87A663E50D8FE49510801549DC587C64ED6809376
C833E4F520FC63A71799001252589E0980EEF27FF33ACB54F0A6AD8849F98CF9
A652CCFB2DB53C79D16B085D8400FFC9324014BE2A1D5DA2D52A8D5B9649141B
BE104795D5D90AA454C1E99D86D836511A142136A1277E259660759953B83813
C9BC6CFFBD30B348205C8CC08AF2F65D9209F9D5849EBD6FC79BBB1877424769
AD11C53BED092CD4C17A17A440688DBB00C381C6793D5574AF08AE5A4FC89880
D4A8DB59D6EBE7569166E2F919DD8B77973CB68D68E96228E2CB79EBC0B1CA9C
E47A0675DBF2E804072C010757B047D81CD677C339976E9A138108F567FDA124
069BD4FEFE2F237FDBBDB4CA8582DAF2809A41072FD817E7072D80C54A9CE409
0256462EB8C45A01A403C1217A8B3B836A9472808AEB58B12472AF22F98DC999
EED472B2C2B85B60A6BCD056792BA310AFFA57355A1CD7B73DD5401ED7608E06
A270CABD8E491D8F710C5F31260C5AD761E6DF3CFA1308C27EB562B2CFCC6C8E
30F658A9095000B8CFDA07D07A9B861D786504653919C9D747DD8DEA48E055AE
88F2232EB34AFB74F13954B882D400597DA6B584E6F94600E8C541568232CEF7
07373F07E753AE55712F2E5C5816CE1A96642BBE17421176E0A43490EFDC5A29
A2046B013605EF12256B13481B59AF282185C7CBFF04361995E5D024F68FF90D
3CED5FFC01676FDAE623110FB41F883AB553BEA48C141A79C7ED32B2D3127E3B
9BC63324DC72A18A46553A8A85B8F34AFE4DA1EC3AC2D43E99D94FBB4DBD3F1E
EF1BB71DE6C221F4BC9E3F0AB438C06EE6767191334762A700EE46CCFF0F8222
069A239E9C090B5F7D12C13EEFEC631D2B1F265ABC4F7164344947526D040C6E
63F637D9628328B147761B7105197AA0700E5B5BC2569A08E8C281EEF14315CF
0F1F8F8EE9F4392AC6CC79B9506F543DCD64B57A167F7AD7C20169D12AB9FCAB
A9857D387502397B7D3EBA09CC7D9392F1A3B51B44E5D9D8A21F7D9B6ACFCAA0
84FE12C366BCD68F62FE28738A23943F5E16F9D9B5F5FDBB04D718EA2D4A85FD
C129BB5B3AF32B6BFFB3A5C72D0F8652418C631F22889D6991E8CC7E1AB09862
CF7962D16281AAFB16CD3EE6FAAAB62D4536FC32D0E24910012049B7EF34D405
E67223B64D740B7B5436382338CDFCE1F3CB0E7863E79AA792B335CB8D729020
626C1228B9B2F296281350C23CEE1D869C4B8950536FE85F030F0AFF13F4B2BF
F0C2D40DE48F1E6BE17F538E520BBCDA6E84F413B04DD9DF55DD54C307CC1B04
C7C4AF35D3B1C59B7519C92247A663A072C8A2695AF79F5977E7CFD055D6532F
3A5C8F860C6AA765863160F23801016CE0F860074D4DE3A328E7BD40EB08DB94
C2FC21149D289433179164E657C90FB5BABAACC0E8CF6FDD2AF84A8DE29F291A
81BEC1F802EF2A35D31F3E9D0E491351CD4D6DD3130EC123B6F8E41BDDB48563
F59F44ABBE7BB826A0208F4C2D0EBF83B142EEDBC0076B919C9508F5087CBF8B
480EF338FB71E7ABE6EFEB2A6172CBB0FB50132566DDB400B9D5F22FAF42427B
A60815F29576EB055D5841C75CDA8F5439374C40C301C201A9B3E65AA5E0D230
265B3632FB4DDA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C3E71B25CE1D16865F
3C7ACFF6ED4EA6DFDA17340E96A8E50267A82845403A4DCC892D2809761DB613
442B58CA3070DD9EDFE0A913FC4510F990EC8DA8F2D694CECB54B9D9F2E84DA0
81B2D1D4CEB9E40F7A256A8351027B61F7B9CB3F6232D55F6E471B113D3FB3BD
573B7F0C6E537144EC7C8C2B55D4F3BDB9AE864DEB4BF5DEA5E8431FC2EC485F
DA85A7ADAD4FE12291A1EADB9A0B7C8DA15E689FB6D422946DE8D09F369886ED
CAF1163421D665B86C707F5914C2D339C3BF8EF03A693D9B0CF83B13681EE845
C9C40C84E4279B564EE55BD93D95AE6A4A0C298FC46399F919F15501915C70B4
5851F6908687246CB3073FA3CFF94506647E28D71281A8C979E696CCC57988D3
B725E16659ECC4344E72D8218AAFB953188F9C9B88B7B5A19F8162E5D8454B7E
5952452CC7349D12683C6D610AAB4267EB6D070EE77652712AE2E881E755D62B
F45FB7F79DC36C582C274D02D27673EFB24394FA5C76CC0DC9DB83B6F549C06A
DBF630E2B89695B5862C96EA1243561331C2D9EE7B65B82581C901167F0840F3
EF427451F2250A597961B663683525BB5131565720F61FF5AC827C2A08537531
3DCF05141720DE81CD6B0FF6176C13E0534B375CDE3CA6DD7141773238E38676
AFCDE9AD568319DC6F85E6AF68ED69945ACA514A567CDF9FF87DFBC5B77ED158
C0EF082D34EB2D7D15A3D0873CB6BC134147CDBB2844782CB641271BAAF6EDCB
DAF3A9F80AF982F9653F2DEFA6365ABB158917CCCD901ECEF7777382B77264E9
3192E37A07A6CA7B3F3F075B9DCC920A5FC0D6206DF1B2B7701C20E811C51758
A573546B97FE15F640911E342A125982936B54E32B7B6F28F87E3639D091922F
4994671B22EFD41FF3FBA1CC78A66C7FE20836593420A0A1B8AD8C834B2CC139
74CF20A153C12B8BE3715E1078E2BCD9DB5017730D5266047630E78B3249BD6D
748B59740E1501D396DC46B00560AAF0AEF50CAE3E26200A7CFE98824B7889C5
3BBD4C4FCC777F58DD24E08E59BE7BF23B897B1FC83D57D4C276F3BE1010773C
4008453A732E32BC0767B9FBDBA0DB04699C2988BDF034700C76B09E123754F7
752507DE77C8B35CA1A3F7D176D8C0D3E6CDEC1757543978CCBC74C7AC23421B
58D7A534367AD723D145E93B12A799B9D0210E411564EF88E75B7FBA67565F5A
F5CEB41549C09A04AE62FFD20D8832B2D65D2253C08645F0BE1E25404BF81313
79A057266485F5042D2E187C666B84BC164518714B33082EB525B747F3626CF0
F7B8656C23EC02AD46E5246F293FB1EC774B85E627AD5C10D77B941B5F29040E
049EEA6DAD60D6572C193B793583E3C63A80E30A2BFFA4B4E1B682B7D083D76A
817329FCEC2EC6142B9CB8D61AAAD4FBF25E164868EF20CA296D37DCBF01B3AE
A5D928E712DE2D3BC726660A3407C66F8079454C3425F46443341719627EF332
4CA6EEEEE7B4FA88BA66620BB08F65A08BF76E3E368DD50B45FC867C26294EE3
4062E3B392D2CD3155888B346437812FB523E2DFE4AF1A5646EA8EEC99E20EB2
C8ACE1BC0DD381CFE39B1A502005580FB2BC843D94336CC57B7C497318CDB711
169EE774783650F59A0379A77CC267E0D478FDAADC38FDE58C8251C5D0FAF6B6
3D6CA0A593F8E07F69906E7ECCCA4B02E89E47DE705EF9A268FC9C322336A2B0
9FF81FCFFF0C08B845AB92F0C2CB93A58791874E4246C0A7321AE831930F08F5
86A85CEBD4CFFA37FF627F4756AFF88FF10A172C60310C10FAB64E294E7DC51C
69967B97BD1F1DA360C4CF05A5F079F8372CC787C1F19B923A37FDE7C43B6BB0
C8CA4D1CA0D0D9E20F2789CC4AB83076A9D1FD2F06EE047F1A39276BA5000DD5
DAFFE353929EE3344130879F2032497581843E35060219D48D74707A3FE02203
54426488C60CE485A44548B4769A0AED35C6A162A2F8042E0762A9360B206310
5E812C4EBFD009662F1F9D8441F843626D9DBFE4194702C42C30D07D729FD4F2
FCC3A6B97E1F5FFCC1921A4E7114998398FEB89FDF2C8B0716B03CBE218909F5
902B80368A39D854E8841836A407C3243AB2A1A92A2C28B558A488D16644FD19
EC72BFD6966A21D64DA4FD7C905B8F5DA833999F9D8865D8A7FEED34D4B3BB45
0E573A0CA22F253FE4E3D1E56E432F655A8C234A301667B3B23474D602FB6D02
F57F18066ED53549CF9E7C3EF3050BEED34039982ED5E5664949215B7B7C6999
03F93EF0580F633FA842B9DF64946EA241FAF1EDF50092203CC2BE558AB5F9CB
60A2B2B7D3726D4D06CAA2CB08BE11FAC9AAC437310F1A7D586CC05048684AF2
7EF3C09F74075354AA8023B11FDD5D37C1B60D5582E03F083CF717F1A4776A59
4A9275834F2E56C9A5C9BD35B8B288FAC8A93B70FED1ACEA5B74B3C146C6C2BA
E17F65580F59FAAA1E6CF0AD620CAA7868BD54816F6121D102A8E3C000E0BE1E
D58C422A119E8C6BB471DF05580FB2BC843D9430DAE81FC2CE7BA777B592888D
38EDE68FFB3EFE8383C9666484AD85E62A5BB2568678DE7ABFBA623B59103DB0
AAE49D1D2D41749A942880D34BD13605ED1672C9A1976619354FABA813FDA935
FA86C092E2DF9B35F469AC89152D447F701B9712FA1A2048F7BA02A2AD093DD4
42E1153631709D78D7AC50326F1000E36F3E9E75ED639A5B68F04482C41CB74E
BB80E94653064E169344F16D626E253806F30D13DC8B1A60616CB434CDE7436F
BE5D662790392A6FE868DD449773BDEB71DA37C609A831C2C628ECAB878D4B45
CC25E7E9A031B5E8EDD55D22DF7FE847EC801A65340FCADAC222B3FD287BE72B
87834E458DD6F30154B6F0BF23742B9547BA97B2B014E28D06053DE32FED2E55
1FAB9FBBE250F5A6C18343E1A7889313137EEEFA6B6241E5F452B158B60994E9
EFA43948E92D216B74868293232F6DF7F4BC2D9E5815B61646317E97B07AA685
56958AD06C1E70D1C8DAB37D527A87ED59E8FA34FBE669046DC96D878EA0DF75
BE56AF47FE703B078B200461EFE9B291836685071A7C7643F95463031F0A22B8
224D3BB7D31681D7DB3E0BDFD638440E2EF84017A4F1EE28B904915D7E1754E3
AF0778B1C5B99A1EA0533DFA800DDF3907987DB5AE33DF4C92F80FD2C3EF357C
FE54802EBC92CD4BAA3AEA6D9BC00E54DABD294D53D398EB58F6EBC3B7353E9E
7F4291275639C6DE6964F3607C90166D11C29CF8C0BD0689656726A6B409C00F
85426E37C3B5EE1F6343C942CFC3F4C56D472FCFB5C942F5517FAD1909D38801
146D047C31F0AF1C2FD75C48023CC0FB7B49A95CD6E9655BC6D2991FD8CCC05A
5F22FEFDB64E42B73A9B8604378306780B31793DC3588A170E5A20B20B7C7E7B
732B9DA95987EF3F0C71E90DF4B27EEF84A36EBB74CE5F8F972798501C039232
99058BB1F5EEB4BE7298EF4FBC3A4B1FC067B29749B49E74A594BFAE0CF4E841
5EDFE22202BB2058B6E41092F1256C0892105D3C833F5A6ECBB64A92D082436F
EB29E12D9F23D28DFA29E0566BC44E454FC173C7282DBC800772F15E98CBAF92
057BC23827F4386ABEF4BDB422FADBA84E0ACCC5040518BBF10BC20EF82E5F4D
113BDE26715C0C6A0C24C1552C1CA77805416DA2AD90E09371C7A23DDFBEBE5D
EFEE4B4788D7646FB05857E4B8F9D6695EF332BD3BAA9EE551A4B142D98B3AF5
041056A43F90D0E6A47C2521C1058E8C6689487B3E7C876E836A1E6009BE548E
105149EB6052FA14D101EAF182B0746F03A829573C79648B3F5FDC321715AD2C
E57CABEBE40887177E32CF45F52768B6086C41EBDE19178AC1B7A39CBBE3E75D
A003115C7416C29A27BE584F02983F64CAE1E93C61D34AA87253D3A1247C8C22
7E558279DF343075F34F63C258AA0F1E42E9C4C5BEDB9D037E6437BEA435CF43
10F498F16333A0124C2C8F4A14BF47AAFC582CE3D91F40AC5876B209A2D6857D
7C042B1E9D2C4A766B5FADE47588232C1847141D567C22A1B761E9AC2EF0E723
414FDFFA2F98F92AD5419695DCB32CA45E06F30EE2F085B06BFE3AE025A0542F
0D7F681BF0FC8ED23A361ECCC811521394472DEA699E2EDB0BC2868B68AF0C1F
6AEDF63B9F7F23FC291EFDF0F33BDAFB34242EAB581D955C6FEDAE7B54D6477F
E340DF4CF1235E30BB2186CF12DA77A9FEC0B9DE9A85C600DE025017E4879CF9
20F4CE834448D645E8E7109B98577DC04B38533C3425A12D3F99FA56ECBC91EC
E5E198A6C53257207EF1D6DF448C97CD7C7C99D80198885B9329DF559EE4F734
96FDD2B58F8B140D425216949012E5C307F7C8B4778CD3F19AC7CD4C92632EB0
1C5401AB2ABD3C25D5C9A2FA8C392A82F8DC836C8E301D3C7D6F4FDCE4BA3885
8BD8ED5F8350EB8FD8FE95302B5AFDBEB9631776656663828AF4AFADF09D8FCC
00FDDC503C52AA8A07127BE1AA3359A90834F4A5C63838A0A5950F29EA450CA2
E00F1358B75BF71655D93D125207839F2E48FC2E2E17CD56898A56F6DA33259B
173BFC447C446A0C3467EFB10E032656587D685BA843816947959BE85846448E
C6D9B91746C6B4A4F614773EC4E21F4DAC35152F1EE78072533F8900CC3A1869
BE48305957CF91AA2F7760754D8ECEA334EE267256720D6CE4B4AF2C097A654F
DB4013212106D464B0FE966C983286097446CEDD2F6CDB3575B617296CDD6A51
4F2DBED85F13CCEA09079F315700669D9D8A3D68211CD15EA886C8F90AB0D828
43F5721D3B88767CEE6319B6D418A2CA79FEC90462565E35DF88F3479BEFC602
3E1BA49A25E227C1394DAF5BA5C111311744B77AEBA5674EF5FCA770729FEF0E
C8432526A4E19A8C02D1BD76F1DB27CEA5D181D7E6BD1D3A71D318475C199F43
CBA720C3702604ACF56C5100959ACADE34330BA317B27B4E249F1A8C5DABF4E6
2D76AB908EBD1EB6A6CD5C9CFFE459730199ED919E55257A6E197238955795B8
B5F0761CF5F602D773170B7EF67D5CE59D5A4C763EC2A172263718D3C0B2DC97
F50E0349A512D06D7C952B12E6646662A651EE4185C5725607F3A74701AF3363
7D19547C8D92E24C1190A50E8DCED4C24A331B88807B579BB6A0C8F69CD919E3
11B6ADE903B340B1BEFA83E6B5584FA1EE0C768A83DBD48639A07F27A74118A3
770EBB68E873A339150B2CE9BD368786507AC3E7C67228A17D19F2A16E4ACC80
3C1C42577409B57D4F2674B5171A78B05B425795DAD7EAD09C442C35A4A7EDA5
71EED8BD7ECF7829B310429383B5497FF39C86A15B3ABD6A5E52B07A1D5F9433
53457EDC3EE66D99759D11AECD6390F8027137D6FCA1F8F1EFF023267467DB73
E5C8B37D2B233E6CE581D09253F6D6ADFF676568DDBDEB6F0D94065A3FD6FB30
43E411D2F135A9CC966E59A716FC934705542C841542BC1FDB26DBE389CED197
259C83580D7240E7096F83E0D2E62F1C09E6DC9C9EA26F13EA478C1605A709DB
9A94BC08D61C1A6E98311D98FFD07D52F256FFCDF706B456B6886F5FF5F416C0
79AA878FAAD19F02F65292D33D089E0242374F0CD1F449B930CC2630542D5636
ED8EEA52F319ABF14F41D32008758D0E60DB82EC2453C76DA0E3EF221EE13C10
CE461085DFEE03747290A8534C72628A1D3973F3F83E7AF220D03084781EC3E5
FA22CA170B642734F9A0DC2BBED4E3DBE95B4DA50EA2A8F3E6D5BBA1E2319C65
E68A4ABBFD0A963F9E7F4291275639C6DE6964F3607C90166D11C29F1A8FC91F
B8489CDEE8BC223C4281DDCA5F7DA80BD5C5787E6AC0D3CA9A8513B88BB7B2E9
25DB3365C80D5606268648E1C966330A3DA363331BDB4A21737805D0C1CCA96C
34D56A7A70D59AB73CA633E9DCB2D93694EB75E09FB721370459E49726B0FBBB
1C4165E355536DCB513C557EEE867F38FEA99E9A70C2B6D8638AC9E159B93E01
9D07FD5ECB8DB4A6230B06C826327B94FBD27B57EDF49EF26CF0F212FE99477A
DC3F692797103CBDEDCD86C7C856EF9AE0AE4F8A7B6449A558A88D426B6C046E
9A088FA5F9EFCB82B7D0594BE5C1C51F60FC8DF07EEEE87EAC1834195C9F8815
EE6D17F25A1C8B7DA42FD174A42C50B1BE9967FC2D028D1969F2D9369CAD8E75
7BA5312E51970060B2BE1B1041C5C68C45B71A717B81834A23F54E856F0EBFB7
82A22C8D118F3CF7203C7C0C191B6A7AD6A6E7DA28EBE2DCF6FF7B8407FA24A8
2C23283890E01BC78D6FA63325C7DCD0C3807EF985FD69339A95AAEC516A7C59
01AB7CB100B1D6F2CEA93992036C78C8D01D6B232B0E400496D5E85EA99AA922
FAA53D9D03C54706B5E9C2F89BD5A8404282D7AF68279457739633DB5CBBA6E6
44B32B6A25E5BDD170408D11B9ABFDEFD89EEFD04ED29CD3DA0D08245FBE71CA
98720EE3C5A43F8322ED89D3D9FEBC9289198C02742D0E51D69C77D3C9656C72
4A35D2B660BABC3A7894B0BC073FD16A8D2411527A7F3FDF0C07D30FB6436D58
753F6AE969F7256DEE7CABEBE40887177E32CF45F52768B6086C41EBDE10D551
40E7C44F304C141BD3E05A85920BD506F7D93D962938D5DABBD8DD0F6F9FD27F
DA3B150A099993B5692138D79FF10136EB44A8DE87DA279FF7D54B40F954950B
56D2ACDBCF2730C10173C147DD9A770AD2A21749E1257660A8888A847A0A30A4
1818900A6EEA65EF914871FB352266A2E9233D3644FA55E7EAFE99FF3B45B0F8
8676A6B286A606C9774FF695EA09E09EEB88297CC976DB5153B1727EAE5E6461
78566A4853DD5017B2ABA6E809DF0FB704C5DE06C86869BDE4B8F35C341C90E6
0DB5EC591CC36E692F4624D84D70949442CA8BB93B63EEB58BDDF469B311C5B3
08DE4B15BAE8DA9A31FADED8B68842015156F4F4E9FBA3B47D8D092AD747037D
23A4B3F553D2F243532DBF5DC0FC97B25514654598965064A52A9C339C35AB94
8BF711325144008F6DFC7CE06EBB0B973C2044B3F056156E7AC6541E2ACF4299
81904ACD036C60DBD11D7A52FDFFE852E22601D588D0AB86E017ACDFB71D711F
E7750762385C0FF044BF8796620972A139975282E7D03FFA2A1F4EC1EF43E691
0BD6004EAB05E713C3C62B0853381B561B1DF59935ADD8939BE7366D1E322674
9B9E23E4C2AE4B9E9C91BF0C8864D21E57F453ACBE58FCF00884C57203C0491F
7013554376DD446BEA201F71B67C0F2C8A2F81396577FBE300411FA5E393E2DD
66BF48B7ACB46A40169EB887EB6246C89D009DCC1913DD86621E81B688641178
AFDAADDBCB87A95E0EB45F47522BD93ADE07F11497E97C252D233534F47521E1
68D225F364D6D85BF81AA195D9F12E03463930D05A3D71E1E9830AC1A1BCD812
E6C40FF0C0FA109631DB82CE149A89C4155F30B6143663EA615983FCC7852245
76E9E928A02E13A44CDAF2F3D42FC229CE2A91FF4FE435C3E56A8EB57949856B
0DDF03B45B60BB1B6D62DA735DA6689C2C03F196AC168B21474C71933C90CF92
BA6C5ABAB1864D85AAED9E3613F42B476B322B43D601DADA1DE6C35BCBE54593
D38F5E1BB8A9E7BB776B37107CD588225511FEBE1F1652B6A0126C66B7EF67D7
F0788071415B1E7A6CACA81F22931F8DA08FCA308A1CF611A29EB57B6B0AA5B2
81ECA03015E29FE3BBCB8F8C473E706670E11E5B221716F3169F58777FB0F4FF
5BD2388C81D975E2B41B3109A19FC1B8AF3833A612643316CB420AF3DB29F008
BA36A2EF042DE80DAAA5011FA002E6C13D9623AE2DF25F912B8E453803AEFC08
3CF9EDE0778C2D79BE9FD9DE57CC35175C83454C119C4F5D237A38CAAC9A1914
1D7B41CFD13554E30AD50DC093C9E693265E828A441345EA5C4EECC58E01450F
322E752B75D29D4A5C6F7445C5A0556A316E3019E7ACFB570D76D01209F22F4D
026A3744BF5BA2E45F8808440C7563B9F0369B66BA6C64BF2D988980582471E5
D39207D83A6D4EBD1E7A056EFA25B5748AE73BDF9710A69FE60AD45F0F7F6A06
35F4D60C3D5A5D5AA54D4566C36A1DE47EC7A9606A02FE2D7F65FC9B12C8E053
1F33227904D8D31ACAA377F8A804BD47C3D4933ED76039135D15D2DEBA38BF1B
C40D4A6E4F80E12BA34A01FF6B3ED442FF3D8781E09A4E45ADE2F3B45CF3C4E8
28D9283D33152BDA977F2CE166BCA591084EC06E047461DA4086648112307217
D2A233C338DBCCFD7514C908B46159187A75DAE65CB6343F28E41BF083D7247D
2B39AEB56F0CAEED03A1C19E2004530E8F75C0255572B872969A0EF5C919AFF8
A4F85BDEBB9FE41660BEBAF6B3769B667D2EE5A3923CFC69FBCDEA39CB0410A2
5A7435A10F4DCAC96C9561A92FC09DBD65783666544FEEC4A0102A61086064FB
56D54FC54129B7DF0DBC4CF4FB839DEAEA332CA6D50B5A6E3B5AE6BCCD2299EB
227C8452CD70A67A06DC1EB3F2B3C58FBD1B8C370985912B02777853B47DD59C
C846154643BDCD7C48863E59401D70047BA88646BAA9D6F0E16636DA27AB6AA1
6C67C7CAE11857D69CEED6B67979C723818FDE9363FC7DC693BD0F25C44B4AE7
D581455520DA75F0AA2AD71C12CF04341CED244B3351B9191D5B4BFC8561888B
ACA0E812A4CBBF20560D772C14FED32A6D10966242774A0E978E2EFCB2837746
F7F0F4DF90476B645174CCD82C403CC21C9F7CA5F4BECEDB9ECDCDF94C704864
98B92E1BDC9186F4C85F9A53572AD9D9D1A64FF25413026431BC892F17B01A4F
CF52F32E017E9EB5E294B9559556A974B882DE8876C37637331B271A011727FA
B8501DA3EB452F9471703BD358D6931EEA4A860E1A17079A59DEB9C7A4C437E4
9718290332D4983EB7D6547526386F0DC819C98F1C6508F3E1CC36732A8BA5BD
1BD753F12C1CBDC117302AB966485EDBA9AEE82FB3D0E3BFB3E6381D3FDDBB3C
B3324F901C09CE83D67D926816D58D4E2306026405D970EBE044365FAAADF3D2
CAE3F2C028C56F5B7E51D5C830ACF5786DD666DD2582A268669CA8B99802F0F2
FF4693372BF290E59E9635B7CE630194962E4183C3838D9401260A7432EDA5B7
FA82E8E15F366CE98A40838258D452E731374F67065C836D34EF4DEC34F23A42
82E1448187B3AA4BBD5A3626680D97565FE4D1E216A9C768A454647DB379C15F
54B788E528F0B8FD58B23F21FF9FA508C699D45903104DB5BB958F763828B23F
FB6DAD516D7133BAE9E3B91E91C0A58BB2B0827DBB3DD736D1B2CDCF61FFF6C6
FD335C03167D702466832B32DC035DFAF601E2EB6615E3F6A9DF63E0D6B57065
57B831934ABE6D113D7FCC36B14F8F5D72B3A9D95383171187CD0E33C8CD308C
436B608C6843021301D083753323D1726E22C04895627F005752E7AB65168599
01766C1A7C547258120E0ABA52F034CE39189879B3E0D88BA64B0376345869A8
8E05652EA129755374D5D5650291D816D3012B80AE7A74DBA51227EA05942B3F
A546C81C680DDA1973B115AA85779C962E6F105C3978C59329B3C52A85E3A069
27E7C4691A4DE2C13FA9B9222BC47FE52B65F6B3D34D43FCA54D850EBAB02CF9
B280A85DED082F6CB0318473933541E1D4FC806643893A641C49948FBA78BF21
E7B34B7F9FDE14522F964DCD6AA3DC26D6851111067729369E282622FA6C76F0
4451E1282A2432E88FF45CA67864363DAFA5ACDD46DD9F31BA6187C7631A9AE9
7F45B17219595A46DA8FDDB20819F2337432A326ECCE7B17C2FFE3C7FCED238E
4B22808263B7D46ABD2530630A3B217F9A4A5F752E9A7CE92289F1D8DB442575
753A6B61DB539B635B544499D40AA6D343664B19774783F39362DAD3BE7DA00D
170B6C4BE782A1AAF0D752E7FFF9F3183FAE507EFBC166E9384CF36503CA3530
55D48BE8BFA2A8BC940EAF782A3DD97E9D9C38B45594AD68EE45ECB6C419ECF2
D3EF075DF53BFB6E634E134443FFF918C75953643AB0BB89428A16AB1066530B
A1C89585BE48BB8C8DDF6801BA1F3E668B0082722BE71E69F54D927704973888
AF28463A9D107F31BD8567DD1D112DA286B3889732DC9BD49FF0F07276434B5F
93B8C66BA8988B30444C01F6B9196CE303564392765BED6E1616A90F3B8A854B
7EF90FA0DFA208E4C47AEE28219884D6F8AEABE62D8E1E884D749317C5CAE473
811ACFD29F633B32C3C2864C63C768C9FB963D2338E603449C03D15E43FD2AFB
9122443B06C8391D3EB6485B96819F1EEC408B2B3F92ECCD384633B1CFBE950D
0C420E2AAF1AF44444F467C36F9AC3EBCB65C2291B9DD9166182115CDCF78560
3AFB76B55C10426C6B620BF1890A7406C3655B416AF8C5C5D1F58D60E519AAD9
DC63574D9980BD4446353171B8060DAE8A58AF29A28A5E7AFF8DF1AFCA1B3545
C80493B3ABABB911186600AC62FEFFF4F7754AEE612DE15585DD5741BF8FA561
5C67DCE3740E009C03B79046C4433B990B0AB267D3837F53B0DE93BCDA2431A8
F168AF583ECCBE6FE0329A031820D4D1DA9D11F02921D7965CD18FABECF6253E
FE1E6EDCE9C0A6577A87AB7077ACD9152362D162698BC6F7535E14CF202C75FD
9A938F7E28A1ED57CB36EC875339EB25DADAA0E1A671EF92DED461FD91C88AD7
CE0DFB5E45C649F44580845F0B726F820BBAF867A29A8186E7CF623A14EF467C
870B1648905AA837B8C0B647161E5C322CA8205214005D2342A192903BFF8C80
03F82A76F84AEC6703D866CF9D143FED4529E4DC974554DF975D026EA92FC09D
BD657836665F62E3115F1CE780310E83A90F29E6D56D9F0D1201755631B49C8B
BA2F807284B877DCC78AB171815A8DF0C9343AB7AF6043F860D5D548B166C259
21D8DDAD33982056650E079E2DCAA12133B5B6011DDE21B877BE171C64E6B925
32BC4E5D5EFCC5FD3085FBCE692D9DB2704D4A12E7CACA366AF3984837BF13D4
8BB7B30F872FE6234C8608360CB80F0E85619073C13E213CE2CD96322892019A
DC42725032D284011B7B7F6505A11E4649FE1AE8F762FB6ED54CC9E41E6562CB
B4F3DF32AE56338D70CA8839DA1968122EEA8D652BE7479621A99C4CA4F1DAE2
315DC641D6051E47EBE712EFC665D97DC2E35A7A098B2D96FA5C6BC5A0678FB6
54C3F7D25B9B6BA34CD7A4C3A12D7352CF71D6F9F8ECA7B53E09B87B9B05CEFD
E688FEAD1B057C9E307933FDFB4E9E1B6DEFF59372DCC9947F32A972F7520F60
BC12355C3872CD092F77FE06EDC4E167872755842B769850D291C9D92C836531
BC2351FADCEB29A671422353ED2E01FF4C3FF4C098F6FCA427D2A4536B4B8FDF
3950EDFD6CEA20D0649071442B2916EBCE5F44F66F455B580A4BBE440839A54B
385C9E4571C466AF1655C56F63F51819C4206CB45D52E88EB1C042E28A6DF72C
0C55CD9763824E0FF1718B5F45C6372BAB01A131812745609B14C8D1F9635666
1F43F7ECB1CF1480CDFA78E6F44447FA751B9472F92BDF5A7DB5D93C74332E50
BE5B68C98CB112889DD3B16E3C2BF4191D7947DD3A946FDE5CC016D28FAA9154
8361B38A729CF1E6DF63A016EC3524F361078A9CB36CDFE0F56146DB8A861E46
E024C7FFD0F9BE76C4CAED815AF7DEF664098CF1A167444F3F71F9775CABF857
C2F54BA01FAA6A9C2C1A0FFDE7BB38F8791B8415926378E55DC271323AEF3AC3
AFC3C03E6AD55C3ED2D4F69A23BCC5743A6DF5F634D5A1793EB14A6BD6244393
02113C4B84EABEF6DB592943F362EB36BB916143BF7DA121B8C73AFB3730AE07
10CDBBD49719080CDEFA6732FC4F39FFFAE347AFE8B5084386844FA4F0B348C7
0C954BEAA33A81A5EE27B9220C89DF8C7471D20BD3B56B485C2576912814545E
B4C9191CA240C9AB76A06F1A22FB9D4A8EB84608A5E95A2593A77AC3B48D4B48
3004157AD65BCE334146CC6E744517BFC425440BE536D6F90F31D8FB2B0F91F6
E4080B3C6D4A4A49F2347C62BD6E2BFF68C724446933E8927F3AACE64BE6623C
C8046670D121761ABABD7B6678871BABF0D67EB82900413066FBBFF50AC517CA
096F28C106FB1CC2CF016E6BC706863B840ACF32FFBFD9E8DC6ED9FA9FF379C7
0C8E4D82344650DA926F24CFC1AC7172514CF1F4CC942F4B96738D9D5D01A2D4
CC7AC292050E48BE6E8E6E1C6B6C526C15DE2471C7EBE744A55D65F3FB3C7726
F68EA7F9E6695BB428623FD1E621555BBCA26C986ACA69714EE28AEBD865657C
485FF7D48E2C2AA8284ED768B1555C02A5DE80B29DD769EEAB36866911277256
264CA2D329D1AAF027FB4FD5D404F9E7BB30F1D3331A425188016D7E22CCEF0A
1B45780CC1E96F3E3B7AC306E475D4E25A6A3E25449161790F5577FF381DFA64
699D4EADCB72ED8A2CA14013C540DC0B2CF79EC81D8B4B08617E3C4F014DDD7D
34102A25E12F0455C8F03B5603A30DFCE0904C2166161E84AC919C4B0F2C46EC
B52DA43DAB8B3CF25EFFBB7AD9E4239732873CAB79E608F760AFBB7DC0F9C65F
94E887C1E85B6B912BBBF5C8EFD1A4789C6C40720D7AA094555AE04149D39F50
717E4670E3D61EA87AB1F3D5F1D7FBF884C7261C45C93972517868DA6808CEC7
49604D54EADE35A1BBB347A23E65227904C339FA4FF32B384B76574A50E45069
C46C91F10AB69494CB5F55CD5C41CA757DC5F3BC4E376210065B61E7759FB55E
EFFE6FF5B0082CF13B5490C6E17B647FA3F5F2827729991DB6C16AD0424D6077
D5C481D89017C4901FAC82BC1D0DAEC6EFE1D1C7F29D4C9321240B10FC478858
055782139E2C30F5B8A60B4F42AF43FE9AF11887044AD8D40243222BC7291B17
9EB923EDDF8EE2622FFFA181BD162335027011F24C7E7653A2324C944A701CA7
159ACF06A7B9591806BE217CE3FAA7F5E42CBEC773A4AF0015AF6054C016619D
1D5C4AA381B8581DF3F883E252134DA07F41DA93B35255B118552943EB0FCE88
FE84C209EEC19A3FEFA28DE86728F79555CD39E24B2483D837DAB320EC6AA07D
EB2E951DE42DD44039D205DF2B883C800FC8174C8ED733DADC16174123C45AD3
6E62C132EDB6EC30AE86195EAB828103DECEF9D76FDAA389F812761FA52692C4
2876B5A4F00398D4E191099AD358FE2442739FE8663EB895368A9734B6A5F205
6A33C6EA427A653B5AA1F354AD35220A493F7F662C4D8E112F2A4D108EFC0129
85565D206877DEC723B9F7AD9DBFE66C643A346F7C156A9F93416EFD27D9BEAA
23C09E4F3595DD3725D9191D52B24A813033F3B1ABA0B48FD820EB9E674EDF17
9DE1845BB2404EFED1E2CABCCD0E43C4B2FC60B39715664FB22FD2FED7530DBF
7CA823655C234415713BCFD9C449107F71A5F74DA5F10236217B9C7F88EC684E
59CBE6730BE5883CD8E3E97F8746C365B0985BE60C2D4283F468CBD97DDE7717
0BC91273D12AF919324682903ECF41204ACA5C536C17952EFE43561B952E045E
97351FAACE343E9EF27446F7F00F3FB679C539EEB24223F5B50253841BBC2E3C
CA3EFA6F8C211CA0B9E2E9485D408E5D4552FE23C7BDD863D8FFA2917F2C3962
7758B9F89928F9180CDC59DB462240D22B623E9777BAFE0479DFB284E769CC59
6141D7A26FA163A6FC58B71807B897F80DB5CE2653F910AA3C33E669B8EF0C0A
C2B61208BE499AFF6951D6EAFEDF7F02B577D3E7E73E47A6E1D477C29EEF6562
1B644A1C8CE5C835F6E1963D0DE171ADD826DB7B866454946C5D904F693E8FCF
388AE5A10523D0D3A1023867EE5A475D146ED6DA58B06ED995949AD2EB83F980
E51E5D52F0657EB68FAC89325CE14C2C1E1AA566E543777EC510CA28AB901476
B436F8E809894FF44AA90736AD13F5344DD92B673FD33E542912B987A9BFB859
D3C2C932B10438031038171898CC19D485CB8FB4405D2E7023B86E7C6B9621F6
82FF8CD76F65D62B1CB32B9A283EE962398B8DF638E30E21B9EF3DE2C6BB23E2
A8B5E209915258624449BACBD9F6CEA79EB8C42949C74CBCAD4C0CD8E5711C56
427CAC6BA6F29D738140AA1E8CEBC5053C646AEABBA1D01749BD4C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 600 600 (Manual QC.dvi)
@start /Fa 119[76 136[{ enclmts1 ReEncodeFont }1 99.6264
/LMRoman12-Regular rf /Fb 14[75 50[64 68[71 1[97 71 75
52 53 55 71 75 67 75 112 37 1[41 37 1[67 41 61 75 60
75 65 7[102 6[100 101 92 2[128 3[50 3[88 103 97 1[102
1[64 4[37 4[67 67 67 67 67 2[37 1[37 15[75 28[{ enclmec ReEncodeFont }
44 119.552 /LMRoman12-Bold rf /Fc 179[155 6[168 69[{
 enclmec ReEncodeFont }2 253.039 /LMRoman12-Italic rf
/Fd 12[56 1[62 7[51 7[54 102[50 59 1[81 59 62 44 44 46
59 62 56 62 93 31 1[34 31 62 56 34 51 62 50 62 54 11[86
78 62 84 84 77 2[106 67 2[42 88 88 70 74 86 81 80 85
1[53 5[56 56 56 56 56 56 56 56 56 56 19[62 28[{ enclmec ReEncodeFont }
57 99.6264 /LMRoman12-Bold rf /Fe 12[81 1[90 7[74 7[78
105[117 85 90 63 64 66 1[90 81 90 134 45 2[45 1[81 49
74 90 72 90 78 12[112 90 120 121 110 2[153 97 2[60 2[101
106 124 117 115 8[81 81 81 81 81 81 81 81 81 81 48[{
 enclmec ReEncodeFont }46 143.462 /LMRoman12-Bold rf
/Ff 12[49 1[54 7[43 7[49 34[46 67[43 51 51 70 51 54 38
38 38 51 54 49 54 81 27 1[30 27 54 49 30 43 54 43 54
49 7[73 73 2[73 70 54 72 76 66 1[73 89 61 1[50 35 2[64
66 75 70 69 73 1[46 76 76 1[27 27 49 49 49 49 49 49 49
49 49 49 49 27 33 27 9[36 5[54 28[{ enclmec ReEncodeFont }70
99.6264 /LMRoman12-Regular rf /Fg 133[52 62 3[65 2[46
2[59 65 98 3[33 7[59 14[86 3[88 3[60 18[59 4[59 59 59
3[33 44[{ enclmec ReEncodeFont }17 119.552 /LMRoman12-Regular
rf /Fh 138[88 61 62 61 3[88 1[43 2[43 1[79 1[70 88 2[79
12[115 2[124 3[146 9[115 1[119 65[{ enclmec ReEncodeFont }16
172.188 /LMRoman17-Regular rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-128 109 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a -128 109
a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -128 109 a -128 109 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -128 109 a 0 TeXcolorgray 0 TeXcolorgray
1621 611 a Fh(Man)l(ual)1026 1026 y(T)-13 b(raining)51
b(de)h(Analista)g(QC)1538 1322 y Fg(Norman)37 b(R)m(uiz)1444
1555 y(Jan)m(uary)g(17,)h(2020)p 0 TeXcolorgray 1856
5956 a Ff(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray -128
-95 4016 5 v 0 TeXcolorgray -128 208 a Fe(Con)l(ten)l(ts)-128
427 y Fd(1)91 b(In)m(tro)s(duccion)3190 b(3)-128 645
y(2)91 b(T)-9 b(esting)37 b(de)h(soft)m(w)m(are)2864
b(4)19 766 y Ff(2.1)99 b(Roles)33 b(en)g(el)g(el)g(desarrollo)g(de)g
(soft)m(w)m(are)55 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(4)p 0 TeXcolorgray 19 886 a(2.2)99
b(Que)33 b(es)g(testing)47 b(.)j(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146
w(5)p 0 TeXcolorgray 19 1006 a(2.3)99 b(Cual)33 b(es)h(el)e(ob)s(jetiv)
m(o)h(del)h(testing)77 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(5)p 0 TeXcolorgray 19 1127 a(2.4)99
b(Y)33 b(cual)g(es)g(su)g(imp)s(ortancia)53 b(.)d(.)f(.)h(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146 w(5)p
0 TeXcolorgray -128 1345 a Fd(3)91 b(F)-9 b(undamen)m(tos)39
b(del)f(T)-9 b(esting)2587 b(6)19 1465 y Ff(3.1)99 b(Concepto:)45
b(Error,)32 b(Defecto)h(y)g(fallo)43 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g
(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)
g(.)g(.)p 0 TeXcolorgray 146 w(6)p 0 TeXcolorgray 19
1585 a(3.2)99 b(Mas)33 b(conceptos:)45 b(Requisito)34
b(y)f(Calidad)38 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 146 w(7)p 0 TeXcolorgray 19 1706 a(3.3)99
b(A)m(tributos)34 b(de)f(la)f(Calidad)f(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)f(.)h(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray 146 w(7)p
0 TeXcolorgray 19 1826 a(3.4)99 b(\276P)m(orque)34 b(son)f(necesarias)h
(las)f(pruebas?)46 b(.)k(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
146 w(9)p 0 TeXcolorgray -128 2044 a Fd(4)91 b(Pro)s(ceso)37
b(F)-9 b(undamen)m(tal)39 b(de)f(T)-9 b(esting)2157 b(10)19
2165 y Ff(4.1)99 b(Plani\034cacion)34 b(y)f(con)m(trol)84
b(.)50 b(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 98 w(11)p 0 TeXcolorgray 19 2285 a(4.2)99
b(Analisis)34 b(y)f(dise\361o)92 b(.)50 b(.)g(.)g(.)g(.)g(.)f(.)h(.)g
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)
g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p 0 TeXcolorgray
98 w(11)p 0 TeXcolorgray 19 2405 a(4.3)99 b(Implemen)m(tacion)35
b(y)e(ejecucion)89 b(.)50 b(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h
(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 98 w(11)p 0 TeXcolorgray 19 2526 a(4.4)99
b(Ev)-5 b(aluacion)33 b(de)g(criterios)h(de)f(salida)g(y)g(rep)s(ortes)
48 b(.)i(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)p 0 TeXcolorgray 98 w(11)p 0 TeXcolorgray
19 2646 a(4.5)99 b(A)m(ctividades)35 b(de)e(cierre)71
b(.)50 b(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)
g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)g(.)f(.)h(.)g(.)g(.)g(.)g(.)p
0 TeXcolorgray 98 w(11)p 0 TeXcolorgray -128 2864 a Fd(5)91
b(Mo)s(delos)38 b(de)g(Desarrollo)g(de)g(Soft)m(w)m(are)2047
b(12)-128 3082 y(6)91 b(Dise\361o)38 b(de)g(Pruebas)2842
b(13)-128 3300 y(7)91 b(T)-6 b(\351cnicas)38 b(Est\341ticas)2866
b(14)-128 3518 y(8)91 b(T)-6 b(\351cnicas)38 b(Din\341micas)2800
b(15)-128 3736 y(9)91 b(Criterios)37 b(para)h(seleccionar)h(el)e
(dise\361o)i(apropiado)g(de)e(caso)h(de)g(prueba)605
b(16)-128 3954 y(10)35 b(Creaci\363n)j(de)f(Casos)i(de)f(Prueba)2317
b(17)-128 4172 y(11)35 b(Resumen)j(Curso)2983 b(18)-128
4390 y(12)35 b(P)m(ara)i(rendir)h(el)g(ISTQB)f(F)-9 b(oundation)39
b(Lev)m(el)1808 b(19)p 0 TeXcolorgray -128 5836 V -128
5956 a Ff(Jan)m(uary)34 b(17,)e(2020)1255 b(2)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 2479
-114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 208 a Fe(1)162
b(In)l(tro)t(duccion)-128 427 y Ff(..."el)77 b(testing)h(puede)g
(probar)e(la)h(presencia)h(de)f(errores,)89 b(p)s(ero)76
b(no)h(la)f(ausencia)i(de)f(ellos"...)p 0 TeXcolorgray
-128 788 a Fc(L)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
34 668 a Ff(a)35 b(idea)h(de)h(escribir)g(este)g(p)s(eque\361o)f(man)m
(ual)h(es)f(dar)g(una)g(in)m(tro)s(duccion)g(al)g(puesto)h(de)f
(Analista)g(QC)83 788 y(a)c(las)i(p)s(ersonas)g(que)g(se)g(inician)g
(en)f(este)h(puesto)g(y)g(no)f(tienen)h(exp)s(eriencia)h(previa.)46
b(Ab)s(ordaremos)-128 909 y(temas)30 b(como)e(la)h(de\034nicion)h(de)f
(testing)g(de)g(soft)m(w)m(are,)h(hasta)f(creacion)g(de)g(casos)g(de)g
(pruebas,)i(incluy)m(endo)-128 1029 y(fundamen)m(tos)40
b(y)f(tecnicas.)62 b(Incluiremos)41 b(material)d(como)h(ejemplos)g(de)g
(casos)g(de)g(prueba)g(para)f(lograr)-128 1150 y(una)e(rapida)g
(insercion)h(en)f(sus)g(tarea)g(y)g(sen)m(tar)g(las)g(bases)h(para)e
(que)i(sea)f(capas)g(de)g(redactar)g(su)g(propia)-128
1270 y(do)s(cumen)m(tacion)e(e\034casmen)m(te.)p 0 TeXcolorgray
-128 5836 V -128 5956 a(Jan)m(uary)g(17,)e(2020)1255
b(3)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(2)162 b(T)-13
b(esting)51 b(de)i(soft)l(w)l(are)-128 477 y Fb(2.1)136
b(Roles)46 b(en)f(el)g(el)h(desarrollo)g(de)f(soft)l(w)l(are)109
662 y Ff(El)c(desarrollo)g(de)g(soft)m(w)m(are)g(es)h(una)f(tarea)f
(que)i(se)f(llev)-5 b(a)41 b(acab)s(o)f(en)h(equip)s(o.)69
b(Un)41 b(equip)s(o)g(puede)-128 782 y(estar)34 b(formado)f(p)s(or)h
(dos)f(mas)h(p)s(ersonas)h(que)f(pueden)h(desemp)s(e\361ar)h(uno)d(o)g
(mas)i(roles,)f(cada)g(rol)f(realiza)-128 903 y(funciones)40
b(esp)s(eci\034cas)h(para)c(lograr)h(el)h(ob)s(jetiv)m(o)f(com)m(un.)62
b(El)38 b(siguien)m(te)i(es)f(un)g(ejemplo)g(de)g(un)f(equip)s(o)-128
1023 y(bastan)m(te)c(simple:)p 0 TeXcolorgray -8 1226
a Fa(\210)p 0 TeXcolorgray 48 w Fd(Pro)m(y)m(ect)45 b(Manager)p
Ff(:)60 b(Co)s(ordina)39 b(el)i(equip)s(o)f(y)h(asegura)f(que)h(to)s
(dos)e(los)i(demas)g(roles)f(cumplan)116 1347 y(con)c(su)h(traba)s(jo.)
52 b(Este)37 b(deb)s(e)g(tener)f(una)g(vision)h(y)g(mision)f(bien)h
(clara)f(del)g(pro)m(y)m(ecto)h(para)f(lograr)116 1467
y(el)d(exito)g(\034nal.)p 0 TeXcolorgray -8 1671 a Fa(\210)p
0 TeXcolorgray 48 w Fd(Analista)48 b(funcional)p Ff(:)62
b(Es)41 b(el)g(que)h(se)g(encarga)e(de)i(in)m(teractuar)f(con)g(el)g
(clien)m(te)i(para)d(de\034nir)i(y)116 1791 y(redactar)33
b(la)f(do)s(cumen)m(tacion)j(con)d(las)h(caracteristicas)h(del)g(soft)m
(w)m(are)f(a)f(desarrollar.)p 0 TeXcolorgray -8 1994
a Fa(\210)p 0 TeXcolorgray 48 w Fd(Dise\361ador)p Ff(:)45
b(es)32 b(quien)h(toma)f(la)f(do)s(cumen)m(tacion)j(del)e(Analista)g
(funcional)g(y)h(genera)f(el)g(dise\361o)h(y)116 2115
y(prototip)s(o)f(del)h(soft)m(w)m(are)h(a)e(desarrollar.)p
0 TeXcolorgray -8 2318 a Fa(\210)p 0 TeXcolorgray 48
w Fd(Desarrollador)p Ff(:)45 b(El)32 b(desarrollador)g(toma)f(la)h(do)s
(cumen)m(tacion)h(del)f(Analista)g(funcional)h(y)f(el)g(dis-)116
2439 y(e\361o)e(y)f(prototip)s(o)f(del)i(Dise\361ador)f(y)h(escrib)s(e)
g(el)f(co)s(digo)g(corresp)s(ondien)m(te)i(en)f(un)f(lengua)s(je)g
(de\034nido)116 2559 y(para)k(obtener)g(\034nalmen)m(te)h(el)f(soft)m
(w)m(are)h(solicitado.)p 0 TeXcolorgray -8 2762 a Fa(\210)p
0 TeXcolorgray 48 w Fd(Analista)39 b(QC)p Ff(:)34 b(Es)g(quien)h
(asegura)e(la)g(calidad)h(de)g(pro)s(ducto)f(con)m(trastando)h(los)f
(requerimien)m(tos)116 2883 y(del)d(clien)m(te)g(atra)m(v)m(es)g(de)g
(la)e(do)s(cumen)m(tacion)j(del)e(Analista)h(F)-8 b(uncional)29
b(y)g(el)g(dise\361o)h(y)f(prototip)s(o)g(del)116 3003
y(Dise\361ador.)p 0 TeXcolorgray -128 5857 V -128 5977
a(Jan)m(uary)34 b(17,)e(2020)1255 b(4)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 2479
-114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
463 2964 a
tx@Dict begin { 170.71646 312.98018 } PutCoor PutBegin  end
 463 2964 a 277 2989 a
tx@Dict begin  tx@NodeDict begin {44.87582  2 div 2.96658 36.98866
0.8 .5 .5 sub mul sub } false /N@1 11 {InitCnode } /NodeScale {} def
NewNode end  end
 277 2989 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   22.43791 2.96658 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Pro)m(y)m(ecto)463 2964 y
tx@Dict begin  PutEnd  end

463 2964 a 463 2964 a
tx@Dict begin { 170.71646 170.71646 } PutCoor PutBegin  end
 463 2964 a 311 2989 a
tx@Dict begin  tx@NodeDict begin {36.71735  2 div 2.96658 36.98866
0.8 .5 .5 sub mul sub } false /N@2 11 {InitCnode } /NodeScale {} def
NewNode end  end
 311 2989
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   18.35867 2.96658 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Equip)s(o)463
2964 y
tx@Dict begin  PutEnd  end
 463 2964 a 463 2964 a
tx@Dict begin { 256.07469 227.62195 } PutCoor PutBegin  end
 463 2964 a 99 2989 a
tx@Dict begin  tx@NodeDict begin {87.62871  2 div 2.96658 48.36958
0.8 .5 .5 sub mul sub } false /N@3 11 {InitCnode } /NodeScale {} def
NewNode end  end
 99
2989 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   43.81435 2.96658 2 copy moveto 48.36958 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Pro)m(y)m(ect)i
(Manager)463 2964 y
tx@Dict begin  PutEnd  end
 463 2964 a 463 2964 a
tx@Dict begin { 284.52744 113.81097 } PutCoor PutBegin  end
 463 2964 a
62 2998 a
tx@Dict begin  tx@NodeDict begin {96.5073  2 div 4.13324 51.21504 0.8
.5 .5 sub mul sub } false /N@4 11 {InitCnode } /NodeScale {} def NewNode
end  end
 62 2998 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   48.25365 4.13324 2 copy moveto 51.21504 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
Ff(Analista)e(F)-8 b(uncional)463 2964 y
tx@Dict begin  PutEnd  end
 463 2964 a 463
2964 a
tx@Dict begin { 170.71646 56.90549 } PutCoor PutBegin  end
 463 2964 a 249 2998 a
tx@Dict begin  tx@NodeDict begin {51.46992  2 div 4.13324 36.98866
0.8 .5 .5 sub mul sub } false /N@5 11 {InitCnode } /NodeScale {} def
NewNode end  end
 249 2998 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   25.73495 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Disenador)463 2964 y
tx@Dict begin  PutEnd  end
 463
2964 a 463 2964 a
tx@Dict begin { 56.90549 113.81097 } PutCoor PutBegin  end
 463 2964 a 176 2998 a
tx@Dict begin  tx@NodeDict begin {69.09457  2 div 4.13324 36.98866
0.8 .5 .5 sub mul sub } false /N@6 11 {InitCnode } /NodeScale {} def
NewNode end  end
 176 2998 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   34.54729 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Desarrollador)463 2964 y
tx@Dict begin  PutEnd  end

463 2964 a 463 2964 a
tx@Dict begin { 85.35823 227.62195 } PutCoor PutBegin  end
 463 2964 a 196 2989 a
tx@Dict begin  tx@NodeDict begin {64.35954  2 div 2.96658 36.98866
0.8 .5 .5 sub mul sub } false /N@7 11 {InitCnode } /NodeScale {} def
NewNode end  end
 196 2989
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   32.17976 2.96658 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Analista)33
b(QC)463 2964 y
tx@Dict begin  PutEnd  end
 463 2964 a 463 2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1
/N@2 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 2964 a 463
2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@3 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 2964 a 463 2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@4 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 2964 a 463 2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463
2964 a 463 2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 2964 a 463 2964 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@7 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 2964 a 0
TeXcolorgray 0 TeXcolorgray 1119 3192 a Ff(Roles)g(en)g(el)g(el)g
(desarrollo)g(de)g(soft)m(w)m(are)-128 3874 y Fb(2.2)136
b(Que)45 b(es)g(testing)109 4058 y Ff(Es)37 b(el)g(pro)s(ceso)g
(empleado)g(para)g(iden)m(ti\034car)g(la)g(correctitud,)h(completitud,)
h(seguridad)f(y)f(calidad)-128 4179 y(en)d(el)e(desarrollo)h(de)g(soft)
m(w)m(are.)-128 4468 y Fb(2.3)136 b(Cual)45 b(es)g(el)h(ob)t(jetiv)l(o)
g(del)f(testing)109 4652 y Ff(El)33 b(pro)s(ceso)g(de)h(testeo)f(es)h
(una)f(in)m(v)m(estigaci\363n)i(t\351cnica)f(que)g(in)m(ten)m(ta)g(rev)
m(elar)g(informaci\363n)f(de)g(cali-)-128 4773 y(dad,)25
b(p)s(osibles)f(fallos)f(y/o)f(usabilidad)i(acerca)f(del)g(soft)m(w)m
(are)g(con)g(resp)s(ecto)h(al)e(con)m(texto)h(en)g(donde)h(op)s
(erar\341.)-128 5062 y Fb(2.4)136 b(Y)44 b(cual)h(es)h(su)e(imp)t
(ortancia)109 5246 y Ff(El)33 b(testo)h(de)f(un)h(pro)s(ducto)f(de)h
(soft)m(w)m(are)g(es)g(uno)f(de)h(los)f(pasos)h(m\341s)g(complejos)g(e)
g(imp)s(ortan)m(tes)g(en)-128 5367 y(el)39 b(desarrollo)f(de)g(soft)m
(w)m(are.)60 b(Esto)38 b(incluy)m(e)i(el)e(pro)s(ceso)g(de)g(encon)m
(trar)h(errores)f(en)h(el)f(soft)m(w)m(are;)j(p)s(ero)d(el)-128
5487 y(testeo)c(no)f(s\363lo)g(se)h(limita)f(a)g(eso.)45
b(El)33 b(testeo)h(o)f(prueba)g(de)h(un)f(soft)m(w)m(are)h(se)g
(relaciona)f(a)g(atributos)g(como)-128 5607 y(la)g(\034abilidad,)g
(e\034ciencia,)h(p)s(ortabilidad,)e(escalabilidad,)i(man)m
(tenibilidad,)h(compatibilidad,)e(usabilidad)-128 5728
y(y)g(capacidad)h(del)f(mismo.)p 0 TeXcolorgray -128
5857 4016 5 v -128 5977 a(Jan)m(uary)h(17,)e(2020)1255
b(5)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray -128 229 a Fe(3)162 b(F)-13
b(undamen)l(tos)51 b(del)i(T)-13 b(esting)p 0 TeXcolorgray
-128 568 a Fc(E)p 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
65 448 a Ff(n)46 b(esta)h(seccion)h(in)m(tro)s(duciremos)g(conceptos)g
(basicos)f(que)h(le)f(p)s(ermitiran)g(expresarse,)52
b(redactar)113 568 y(do)s(cumen)m(tacion)24 b(o)e(simplemen)m(te)j
(escribir)e(un)f(mail)h(usando)f(los)h(terminos)g(correctos.)41
b(Esto)22 b(ademas)-128 689 y(le)34 b(p)s(ermite)f(situarse)h
(correctamen)m(te)h(en)e(el)g(pro)s(ceso)g(y)h(com)m(unicar)g(con)f(ma)
m(y)m(or)g(esactitud)h(el)f(estado)h(del)-128 809 y(mismo.)-128
1098 y Fb(3.1)136 b(Concepto:)60 b(Error,)46 b(Defecto)g(y)f(fallo)p
0 TeXcolorgray -8 1283 a Fa(\210)p 0 TeXcolorgray 48
w Fd(Error)p Ff(:)e(Un)32 b(error)h(es)g(una)f(accion)h(h)m(umana)g(o)f
(una)h(idea)f(equiv)m(o)s(cada)i(que)g(pro)s(duce)f(un)f(resultado)116
1403 y(incorrecto.)44 b(Los)33 b(errores)g(generan)h(defectos.)p
0 TeXcolorgray -8 1607 a Fa(\210)p 0 TeXcolorgray 48
w Fd(Defecto)p Ff(:)43 b(El)32 b(defecto)g(es)g(una)g(imp)s(erfeccion)h
(que)f(puede)h(generar)e(que)i(uno)e(o)g(mas)h(comp)s(onen)m(tes)116
1727 y(no)h(den)g(los)g(resultados)h(esp)s(erados)f(o)g(traba)s(jen)f
(de)h(la)f(manera)h(correcta.)p 0 TeXcolorgray -8 1930
a Fa(\210)p 0 TeXcolorgray 48 w Fd(F)-9 b(allo)p Ff(:)39
b(Un)23 b(fallo)f(es)h(un)f(resultado)h(incorrecto)g(o)f(no)g(esp)s
(erdo)h(devuelto)h(p)s(or)e(un)g(sistema)i(defectuoso.)116
2051 y(El)33 b(fallo)e(tam)m(bien)i(puede)h(ser)e(pro)s(ducido)h(p)s
(or)e(una)h(anomalia)g(en)h(el)f(ham)m(bien)m(te,)i(como)e(puede)h(ser)
116 2171 y(un)g(afalla)f(de)h(escritura)h(en)f(disco.)p
0 TeXcolorgray 0 TeXcolorgray 463 5301 a
tx@Dict begin { 56.90549 284.52744 } PutCoor PutBegin  end
 463 5301 a 349
5335 a
tx@Dict begin  tx@NodeDict begin {27.5775  2 div 4.13324 36.98866 0.8
.5 .5 sub mul sub } false /N@1 11 {InitCnode } /NodeScale {} def NewNode
end  end
 349 5335 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   13.78874 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
Ff(Error)463 5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin { 256.07469 284.52744 } PutCoor PutBegin  end
 463 5301 a
-371 5326 a
tx@Dict begin  tx@NodeDict begin {19.06648 13.13332 200.83997 100.41998
2.96658 } false /N@2 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -371 5326 a 90 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 10.8 neg 13.13332 neg 190.03996
19.06648 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial Ff(Se)g(uso)g(A)g(>)f(B)h(en)g(lugar)f(de)h(A)g(>=)f(B)463
5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin { 56.90549 170.71646 } PutCoor PutBegin  end
 463 5301 a 302 5335 a
tx@Dict begin  tx@NodeDict begin {38.67451  2 div 4.13324 36.98866
0.8 .5 .5 sub mul sub } false /N@3 11 {InitCnode } /NodeScale {} def
NewNode end  end
 302
5335 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   19.33725 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Defecto)463
5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin { 256.07469 170.71646 } PutCoor PutBegin  end
 463 5301 a -555 5326 a
tx@Dict begin  tx@NodeDict begin {19.06648 13.13332 245.29807 122.64903
2.96658 } false /N@4 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -555
5326 a 89 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 10.8 neg 13.13332 neg 234.49806
19.06648 .5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial Ff(No)h(v)m
(eri\034ca)h(Una)e(igualdad)h(en)m(tre)h(los)f(terminos)463
5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin { 56.90549 56.90549 } PutCoor PutBegin  end
 463 5301 a 359 5335 a
tx@Dict begin  tx@NodeDict begin {24.9668  2 div 4.13324 36.98866 0.8
.5 .5 sub mul sub } false /N@5 11 {InitCnode } /NodeScale {} def NewNode
end  end
 359
5335 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   12.4834 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(F)-8
b(allo)463 5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin { 256.07469 56.90549 } PutCoor PutBegin  end
 463 5301 a -467
5335 a
tx@Dict begin  tx@NodeDict begin {19.06648 10.8 224.08295 112.04147
4.13324 } false /N@6 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -467 5335 a 89 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 10.8 neg 10.8 neg 213.28294 19.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Ff(Cuando)34 b(A)e(=)h(A)f(no)h(dev)m(olv)m(era)h(resultados)463
5301 y
tx@Dict begin  PutEnd  end
 463 5301 a 463 5301 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1
/N@2 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5301 a 463 5301 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1
/N@3 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463
5301 a 463 5301 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@3
/N@4 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5301 a 463 5301 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@3
/N@5 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5301 a 463
5301 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@5
/N@6 InitNC { NCLine  } if end  gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5301 a 0 TeXcolorgray 0 TeXcolorgray 1424
5529 a Ff(Error,)e(defecto)i(y)f(F)-8 b(allo)p 0 TeXcolorgray
-128 5857 4016 5 v -128 5977 a(Jan)m(uary)34 b(17,)e(2020)1255
b(6)1413 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 2479
-114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fb(3.2)136
b(Mas)45 b(conceptos:)60 b(Requisito)47 b(y)d(Calidad)p
0 TeXcolorgray -8 414 a Fa(\210)p 0 TeXcolorgray 48 w
Fd(Requisito)p Ff(:)h(Es)34 b(un)g(atributo)f(funcional)h(de\034nido)g
(p)s(or)f(el)g(clien)m(te)i(para)e(el)h(desarrollo)g(solicitado.)116
534 y(El)f(conjun)m(to)g(de)g(requisitos)i(conforman)d(la)h(ERS)g(o)f
(Esp)s(eci\034cacion)j(de)e(requisitos)h(de)f(Soft)m(w)m(are.)p
0 TeXcolorgray -8 738 a Fa(\210)p 0 TeXcolorgray 48 w
Fd(Calidad)p Ff(:)76 b(El)49 b(el)f(niv)m(el)h(de)g(satisfaccion)g(del)
f(desarrollo)g(con)h(resp)s(ecto)g(al)e(requerimien)m(to)k(del)116
858 y(clien)m(te.)44 b(La)30 b(calidad)g(del)g(soft)m(w)m(are)h(hace)f
(mencion)h(al)e(niv)m(el)i(de)g(satisfaccion)f(de)g(la)g(suma)g(de)g
(to)s(dos)116 978 y(los)j(requerimien)m(tos)i(resp)s(ecto)f(a)e(las)h
(exp)s(ectativ)-5 b(as)34 b(del)f(clien)m(te)i(del)e(soft)m(w)m(are)g
(solicitado.)-128 1267 y Fb(3.3)136 b(A)l(tributos)45
b(de)g(la)h(Calidad)-128 1452 y Ff(La)c(calidad)g(esta)g(determina)h(p)
s(or)e(el)h(cumplimen)m(to)i(de)e(atributos)g(los)g(cuales)g(p)s(o)s
(demo)s(c)g(clasi\034car)h(en)-128 1572 y(F)-8 b(uncionales)34
b(y)f(No)f(F)-8 b(uncionales.)p 0 TeXcolorgray -8 1776
a Fa(\210)p 0 TeXcolorgray 48 w Fd(A)m(tributos)38 b(funcionales)p
Ff(:)47 b(Son)34 b(aquellos)g(atributos)g(que)h(p)s(o)s(dria)d(decirse)
j(nacen)g(de)f(los)f(requer-)116 1896 y(imien)m(tos)h(y)f(son)g
(determinan)m(tes)i(en)e(la)g(calidad)g(del)g(soft)m(w)m(are)g(.)p
0 TeXcolorgray 206 2099 a Fa(\210)p 0 TeXcolorgray 49
w Fd(Correctitud)p Ff(:)56 b(Este)40 b(atributo)f(determina)h(que)g(la)
f(funcionalidad)h(satisface)g(el)f(requisitos)331 2220
y(solicitado.)p 0 TeXcolorgray 206 2382 a Fa(\210)p 0
TeXcolorgray 49 w Fd(Completitud)p Ff(:)i(Este)27 b(atributo)f
(determina)i(que)f(el)f(soft)m(w)m(are)i(satisface)f(to)s(dos)f(los)g
(requisitos)331 2502 y(solicitados)34 b(p)s(or)e(el)h(clien)m(te.)p
0 TeXcolorgray -8 2706 a Fa(\210)p 0 TeXcolorgray 48
w Fd(A)m(tributos)42 b(no)g(funcionales)p Ff(:)53 b(Son)37
b(atributos)g(de)g(linemien)m(tos)h(generales)g(y)f(su)g(cumplimien)m
(to)116 2826 y(en)c(ma)m(y)m(or)g(o)e(menor)i(medida)g(dep)s(enden)g
(de)g(ciertos)g(factores)f(que)h(conforman)f(el)h(soft)m(w)m(are,)g
(como)116 2946 y(p)s(or)f(ejemplo)h(el)f(tip)s(o)g(de)g(pro)m(y)m
(ecto,)i(el)e(en)m(toro)g(donde)h(v)-5 b(a)32 b(a)g(correr,)g(etc.)44
b(P)m(ara)32 b(los)g(inquietos,)i(este)116 3067 y(pun)m(to)f(es)h(el)f
(de)g(partida)f(para)g(in)m(v)m(estigar)j(tecnologias)e(como)g(UX.)p
0 TeXcolorgray 206 3270 a Fa(\210)p 0 TeXcolorgray 49
w Fd(Fiabilidad)p Ff(:)45 b(La)29 b(\034abilidad)i(es)f(determinada)h
(p)s(or)f(la)g(estabilidad)h(y)f(op)s(eratividad)g(del)h(soft-)331
3390 y(w)m(are)i(e)g(un)g(lapso)g(de)g(tiemp)s(o)g(determinado.)p
0 TeXcolorgray 206 3552 a Fa(\210)p 0 TeXcolorgray 49
w Fd(Usabilidad)p Ff(:)44 b(La)30 b(usabilidad)h(es)f(determinada)h(p)s
(or)f(la)f(practicidad)i(de)f(op)s(ercion)g(y)g(lo)g(in)m(tu-)331
3673 y(itiv)m(o)j(y)g(facil)g(de)g(aprender.)p 0 TeXcolorgray
206 3835 a Fa(\210)p 0 TeXcolorgray 49 w Fd(P)m(ortabilidad)p
Ff(:)44 b(La)31 b(p)s(ortabilidad)g(re\034ere)h(a)f(la)g(facilidad)h
(de)f(instalacion)h(y)g(desisn)m(talacion,)331 3955 y(con\034guracion)
37 b(y/o)f(parametrizacion)h(y)g(a)f(la)g(simplisidad)i(de)f(p)s(o)s
(der)f(reubicar)h(el)g(soft)m(w)m(are)331 4075 y(p)s(or)32
b(ejemplo)h(en)m(tre)h(servidores.)p 0 TeXcolorgray 206
4237 a Fa(\210)p 0 TeXcolorgray 49 w Fd(E\034ciencia)r
Ff(:)47 b(La)33 b(e\034ciencia)j(es)f(determinada)g(p)s(or)e(el)h
(rendimen)m(to)i(y)e(los)g(recurso)h(utilizados)331 4358
y(en)e(la)f(op)s(ercion.)p 0 TeXcolorgray 206 4520 a
Fa(\210)p 0 TeXcolorgray 49 w Fd(Man)m(tenibilidad)p
Ff(:)68 b(Es)44 b(determinada)h(p)s(or)e(el)h(ma)m(y)m(or)g(o)g(menor)g
(grado)f(de)h(esfuerso)h(para)331 4640 y(realizar)33
b(cam)m(bios,)h(actualizaciones,)g(mejoras)f(y/o)f(correcciones)j(en)e
(el)g(soft)m(w)m(are.)p 0 TeXcolorgray -128 5857 V -128
5977 a(Jan)m(uary)h(17,)e(2020)1255 b(7)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray -128
-74 4016 5 v 0 TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray
463 3437 a
tx@Dict begin { 170.71646 341.43292 } PutCoor PutBegin  end
 463 3437 a 298 3471 a
tx@Dict begin  tx@NodeDict begin {39.8199  2 div 4.13324 36.98866 0.8
.5 .5 sub mul sub } false /N@1 11 {InitCnode } /NodeScale {} def NewNode
end  end
 298 3471 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   19.90994 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Calidad)463 3437 y
tx@Dict begin  PutEnd  end
 463 3437
a 463 3437 a
tx@Dict begin { 56.90549 284.52744 } PutCoor PutBegin  end
 463 3437 a 260 3471 a
tx@Dict begin  tx@NodeDict begin {49.01923  2 div 4.13324 36.98866
0.8 .5 .5 sub mul sub } false /N@2 11 {InitCnode } /NodeScale {} def
NewNode end  end
 260 3471 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   24.50961 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(A)m(tributos)463 3437 y
tx@Dict begin  PutEnd  end
 463
3437 a 463 3437 a
tx@Dict begin { 113.81097 213.39557 } PutCoor PutBegin  end
 463 3437 a 151 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 75.2294 37.6147 4.13324
} false /N@3 16 {InitRnode } /NodeScale {} def NewNode end  end
 151 3471 a 64
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 67.4294 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(F)-8 b(uncionales)463
3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 113.81097 85.35823 } PutCoor PutBegin  end
 463 3437 a 73 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 93.829 46.91449 4.13324
} false /N@4 16 {InitRnode } /NodeScale {} def NewNode end  end
 73
3471 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 86.02899 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(No)33
b(F)-8 b(uncionales)463 3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 256.07469 227.62195 } PutCoor PutBegin  end

463 3437 a 152 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 75.00224 37.50111 4.13324
} false /N@5 16 {InitRnode } /NodeScale {} def NewNode end  end
 152 3471 a 64 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 67.20224 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Ff(Correctitud)463 3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463
3437 a
tx@Dict begin { 256.07469 199.1692 } PutCoor PutBegin  end
 463 3437 a 124 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 81.6921 40.84604 4.13324
} false /N@6 16 {InitRnode } /NodeScale {} def NewNode end  end
 124 3471 a 65 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 73.89209 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(ComPletitud)463 3437 y
tx@Dict begin  PutEnd  end
 463
3437 a 463 3437 a
tx@Dict begin { 256.07469 142.26372 } PutCoor PutBegin  end
 463 3437 a 182 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 67.6579 33.82895 4.13324
} false /N@7 16 {InitRnode } /NodeScale {} def NewNode end  end
 182 3471 a 65
w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 59.8579 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(Fiabilidad)463
3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 256.07469 113.81097 } PutCoor PutBegin  end
 463 3437 a 172 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 70.16858 35.08429 4.13324
} false /N@8 16 {InitRnode } /NodeScale {} def NewNode end  end
 172
3471 a 64 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 62.36858 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(Usabilidad)463
3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 256.07469 85.35823 } PutCoor PutBegin  end
 463 3437 a 133 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 79.40767 39.70383 4.13324
} false /N@9 16 {InitRnode } /NodeScale {} def NewNode end  end
 133
3471 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 71.60767 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(P)m(ortabilidad)
463 3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 256.07469 56.90549 } PutCoor PutBegin  end
 463 3437 a 194 3471
a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 64.7194 32.3597 4.13324
} false /N@10 16 {InitRnode } /NodeScale {} def NewNode end  end
 194 3471 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 56.9194 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Ff(E\034ciencia)463 3437 y
tx@Dict begin  PutEnd  end
 463 3437 a 463 3437 a
tx@Dict begin { 256.07469 28.45274 } PutCoor PutBegin  end
 463
3437 a 76 3471 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 93.27779 46.63889 4.13324
} false /N@11 16 {InitRnode } /NodeScale {} def NewNode end  end
 76 3471 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 85.47778 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial Ff(Man)m(tenibilidad)463 3437 y
tx@Dict begin  PutEnd  end
 463 3437
a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1
/N@2 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 180. def /AngleB 0. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@3 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA -90. def /AngleB 180. def /ArmA
10.0 def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  }
if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@3
/N@5 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@3
/N@6 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2
/N@4 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA -90. def /AngleB 180. def /ArmA
10.0 def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  }
if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 463 3437
a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4
/N@7 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4
/N@8 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437
a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4
/N@9 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0
 setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0
def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end
 gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4
/N@10 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def
0  setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA
10.0 def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  }
if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 463 3437 a 463 3437 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  1.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow
 } def  /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4
/N@11 InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def
0  setlinejoin false pop end /AngleA 0. def /AngleB 180. def /ArmA
10.0 def /ArmB 10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  }
if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore  grestore end
 463 3437
a 0 TeXcolorgray 0 TeXcolorgray 1376 3665 a Ff(A)m(tributos)34
b(de)f(la)f(Calidad)p 0 TeXcolorgray -128 5857 4016 5
v -128 5977 a(Jan)m(uary)i(17,)e(2020)1255 b(8)1413 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 2479
-114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fb(3.4)136
b(\276P)l(orque)45 b(son)f(necesarias)j(las)e(pruebas?)p
0 TeXcolorgray -8 414 a Fa(\210)p 0 TeXcolorgray 48 w
Fd(P)m(or)37 b(Que?)p Ff(:)p 0 TeXcolorgray 206 617 a
Fa(\210)p 0 TeXcolorgray 49 w Fd(Realizado)44 b(p)s(or)g(seres)g(h)m
(umanos)p Ff(:)56 b(P)m(orque)39 b(el)f(desarrollo)g(fue)g(realizado)g
(p)s(or)g(seres)h(h)m(u-)331 738 y(manos,)33 b(y)g(los)g(seres)h(h)m
(umanos)g(se)f(pueden)h(cometer)g(errores.)p 0 TeXcolorgray
206 899 a Fa(\210)p 0 TeXcolorgray 49 w Fd(Presion)f(en)h(las)g(en)m
(tregas)p Ff(:)42 b(P)m(orque)30 b(a)f(medida)g(que)h(aumen)m(ta)g(la)f
(presion)h(en)f(las)g(en)m(tregas)331 1020 y(p)s(or)44
b(que)h(no)f(alcansa)g(el)h(tiemp)s(o)g(se)f(empieza)i(a)e(asumir)h
(que)g(to)s(do)e(estara)i(bien,)j(y)c(se)h(se)331 1140
y(pueden)34 b(cometer)f(errores.)p 0 TeXcolorgray 206
1302 a Fa(\210)p 0 TeXcolorgray 49 w Fd(Medicion)k(de)f(la)g
(estabilidad)p Ff(:)45 b(P)m(orque)33 b(de)e(las)h(pruebas)g(se)g
(puede)g(medir)g(la)f(estabilidad)331 1422 y(o)h(inestabilidad)i(del)f
(soft)m(w)m(are.)p 0 TeXcolorgray 206 1584 a Fa(\210)p
0 TeXcolorgray 49 w Fd(Hace)j(lo)g(que)h(deb)s(e)g(Hacer)p
Ff(:)42 b(p)s(orque)32 b(principalmen)m(te)i(deb)s(emos)f(demostrar)f
(que)g(hace)g(lo)331 1705 y(que)h(fue)g(dise\361ado)h(para)e(hacer)h(.)
p 0 TeXcolorgray 206 1867 a Fa(\210)p 0 TeXcolorgray
49 w Fd(Costos)p Ff(:)68 b(P)m(orque)47 b(es)f(menos)g(costoso)g(encon)
m(trar)f(fallas)g(en)h(la)f(etapa)g(de)h(desarrollo)f(que)331
1987 y(estando)33 b(en)g(pro)s(ductiv)m(o)h(cuando)f(el)g(clien)m(te)h
(esta)f(op)s(erando)f(el)h(sot)m(w)m(are.)p 0 TeXcolorgray
-8 2190 a Fa(\210)p 0 TeXcolorgray 48 w Fd(Que)38 b(obtenemos?)p
Ff(:)p 0 TeXcolorgray 206 2394 a Fa(\210)p 0 TeXcolorgray
49 w Fd(A)m(dquirir)47 b(cono)s(cimin)m(to)p Ff(:)61
b(Las)42 b(pruebas)g(nos)g(p)s(ermiten)g(cono)s(cer)f(el)h(soft)m(w)m
(are)g(y)g(asi)f(de-)331 2514 y(scribir)34 b(mejor)e(el)h(o)f(los)h
(defectos)h(y)f(facilitar)g(su)g(correccion.)p 0 TeXcolorgray
206 2676 a Fa(\210)p 0 TeXcolorgray 49 w Fd(Con\034rmacion)38
b(de)e(la)h(F)-9 b(uncionalidad)p Ff(:)45 b(Las)32 b(pruebas)h(nos)f(p)
s(ermiten)g(con\034rmar)g(la)f(fun-)331 2796 y(cionalidad)i(en)g(base)g
(a)g(los)g(requisitos)h(esp)s(esi\034cados)h(p)s(or)d(el)h(clien)m(te.)
p 0 TeXcolorgray 206 2958 a Fa(\210)p 0 TeXcolorgray
49 w Fd(Generacion)38 b(de)f(informacion)p Ff(:)45 b(Las)32
b(pruebas)i(nos)e(prop)s(orsionan)g(la)g(evidencia)i(de)e(p)s(osi-)331
3079 y(bles)i(riesgos)f(an)m(tes)h(de)f(que)g(el)g(soft)m(w)m(are)h
(sea)f(puesto)g(en)g(pro)s(duccion.)p 0 TeXcolorgray
206 3241 a Fa(\210)p 0 TeXcolorgray 49 w Fd(Con\034anza)r
Ff(:)52 b(Las)35 b(pruebas)i(nos)g(brindan)f(la)f(con\034nza)i(de)f
(que)h(el)f(soft)m(w)m(are)h(cumple)g(con)f(la)331 3361
y(funcionalidad)d(esp)s(erada)g(p)s(or)g(el)g(clien)m(te.)p
0 TeXcolorgray -8 3564 a Fa(\210)p 0 TeXcolorgray 48
w Fd(Cuando)54 b(terminamos)g(las)f(pruebas?)p Ff(:)70
b(P)m(ara)46 b(\034nalizar)g(las)g(pruebas)g(deb)s(emo)h(basaros)f(en)
116 3685 y(riesgos)34 b(y)f(prioridades)g(lo)g(cual)g(dep)s(ende)h(de)f
(cada)f(pro)m(y)m(ecto.)p 0 TeXcolorgray 206 3888 a Fa(\210)p
0 TeXcolorgray 49 w Fd(Criterios)d(de)h(salida)r Ff(:)42
b(Un)26 b(ejemplo)h(de)f(esto)g(puede)h(ser)f(que)h(despues)h(de)e(una)
g(determinada)331 4009 y(can)m(tidad)47 b(de)g(pruebas)g(no)g(se)g
(evidencian)h(mas)f(defectos.)86 b(Esto)47 b(p)s(o)s(dria)f
(de\034nirce)i(como)331 4129 y(una)42 b(condicion,)k(en)m(tonces)e(un)f
(conjun)m(to)g(de)f(condiciones)j(previamen)m(te)f(de\034nidas)g(p)s(o)
s(dria)331 4249 y(determinar)34 b(un)e(criterio)h(de)g(salida.)p
0 TeXcolorgray 206 4411 a Fa(\210)p 0 TeXcolorgray 49
w Fd(Basado)39 b(en)g(riesgos)p Ff(:)45 b(El)33 b(niv)m(el)i(de)f
(riesgo)f(determina)h(el)g(grado)f(en)g(el)h(cual)f(se)h(a)f(probado,)
331 4532 y(de)j(quien)g(es)g(la)f(resp)s(onsabilidad)i(en)f(caso)f(de)h
(fallos,)g(la)f(o)s(dcurrencia)h(de)g(fallos)f(y)h(asp)s(ectos)331
4652 y(relatios)d(a)f(factores)h(economicos.)p 0 TeXcolorgray
206 4814 a Fa(\210)p 0 TeXcolorgray 49 w Fd(Basado)i(en)f(plazo)h(y)f
(Presupuesto)p Ff(:)42 b(Los)30 b(recursos,)h(tiemp)s(os)g(y)e
(presupuesto)j(son)e(deter-)331 4934 y(minan)m(tes)40
b(y)m(a)e(que)h(de)g(estas)g(se)g(asume)g(que)g(testear)g(primero,)h
(que)f(testeas)g(mas)g(y)f(que)h(no)331 5055 y(testear.)p
0 TeXcolorgray -128 5857 V -128 5977 a(Jan)m(uary)34
b(17,)e(2020)1255 b(9)1413 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(4)162
b(Pro)t(ceso)52 b(F)-13 b(undamen)l(tal)53 b(de)g(T)-13
b(esting)p 0 TeXcolorgray -128 568 a Fc(E)p 0 TeXcolorgray
0 TeXcolorgray 0 TeXcolorgray 65 448 a Ff(l)30 b(pro)s(ceso)g(de)h
(testing)g(esta)g(compuesto)g(p)s(or)f(v)-5 b(arias)30
b(etapas)h(que)g(v)m(eremos)h(a)e(con)m(tin)m(uacion,an)m(tes)j(de)113
568 y(emp)s(ezar)e(deb)s(emos)f(resaltar)g(que)g(la)f(etapa)h
("Plani\034cacion)g(y)g(con)m(trol")f(tiene)h(su)g(propio)g(niv)m(el)h
(y)e(es)-128 689 y(la)f(primera,)i(p)s(or)d(esta)i(deb)s(emos)g
(empzar,)h(p)s(ero)d(tam)m(bien)i(se)g(encarga)f(de)h(con)m(trolar)f(y)
g(regular)g(las)g(demas)-128 809 y(etapas.)p 0 TeXcolorgray
-8 1038 a Fa(\210)p 0 TeXcolorgray 48 w Fd(Plani\034cacion)39
b(y)f(con)m(trol)p 0 TeXcolorgray -8 1241 a Fa(\210)p
0 TeXcolorgray 48 w Fd(Analisis)h(y)e(dise\361o)p 0 TeXcolorgray
-8 1444 a Fa(\210)p 0 TeXcolorgray 48 w Fd(Implemen)m(tacion)i(y)f
(ejecucion)p 0 TeXcolorgray -8 1648 a Fa(\210)p 0 TeXcolorgray
48 w Fd(Ev)-6 b(aluacion)39 b(de)f(criterios)f(de)g(salida)i(y)f(rep)s
(ortes)p 0 TeXcolorgray -8 1851 a Fa(\210)p 0 TeXcolorgray
48 w Fd(A)m(ctividades)g(de)g(cierre)p 0 TeXcolorgray
0 TeXcolorgray 463 5141 a
tx@Dict begin { 85.35823 170.71646 } PutCoor PutBegin  end
 463 5141 a 302 5175 a
tx@Dict begin  tx@NodeDict begin {38.8402  2 div 4.13324 36.98866 0.8
.5 .5 sub mul sub } false /N@1 11 {InitCnode } /NodeScale {} def NewNode
end  end
 302 5175
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray   19.42009 4.13324 2 copy moveto 36.98866 0 CLW
mul round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial Ff(Con)m(trol)463
5141 y
tx@Dict begin  PutEnd  end
 463 5141 a 463 5141 a
tx@Dict begin { 284.52744 284.52744 } PutCoor PutBegin  end
 463 5141 a 127 5175 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 81.03937 40.51968 4.13324
} false /N@2 16 {InitRnode } /NodeScale {} def NewNode end  end
 127
5175 a 64 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 73.23936 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(Plani\034cacion)
463 5141 y
tx@Dict begin  PutEnd  end
 463 5141 a 463 5141 a
tx@Dict begin { 284.52744 227.62195 } PutCoor PutBegin  end
 463 5141 a 40 5166 a
tx@Dict begin  tx@NodeDict begin {16.06648 10.13332 101.95863 50.97931
2.96658 } false /N@3 16 {InitRnode } /NodeScale {} def NewNode end
 end

40 5166 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 10.13332 neg 94.15863 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Ff(Analisis)33 b(y)g(dise\361o)463 5141 y
tx@Dict begin  PutEnd  end
 463 5141 a
463 5141 a
tx@Dict begin { 284.52744 170.71646 } PutCoor PutBegin  end
 463 5141 a -192 5166 a
tx@Dict begin  tx@NodeDict begin {16.06648 10.13332 157.90166 78.95082
2.96658 } false /N@4 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -192 5166 a 64 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 10.13332 neg 150.10165 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(Implemen)m(tacion)i(y)e(ejecucion)463
5141 y
tx@Dict begin  PutEnd  end
 463 5141 a 463 5141 a
tx@Dict begin { 284.52744 113.81097 } PutCoor PutBegin  end
 463 5141 a -65 5166 a
tx@Dict begin  tx@NodeDict begin {16.06648 10.13332 127.12483 63.56241
2.96658 } false /N@5 16 {InitRnode } /NodeScale {} def NewNode end
 end
 -65
5166 a 65 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 10.13332 neg 119.32483 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(Ev)-5
b(aluacion)33 b(y)g(rep)s(ortes)463 5141 y
tx@Dict begin  PutEnd  end
 463 5141 a
463 5141 a
tx@Dict begin { 284.52744 56.90549 } PutCoor PutBegin  end
 463 5141 a -48 5175 a
tx@Dict begin  tx@NodeDict begin {16.06648 7.8 123.04184 61.52092 4.13324
} false /N@6 16 {InitRnode } /NodeScale {} def NewNode end  end
 -48 5175 a 65 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.8 SLW 0  setgray  4.26773 false 7.8 neg 7.8 neg 115.24184 16.06648
.5 Frame  gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Ff(A)m(ctividades)i(de)e(cierre)463
5141 y
tx@Dict begin  PutEnd  end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1 /N@2
InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end  gsave
1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1 /N@3
InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end  gsave
1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 463
5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1 /N@4
InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end  gsave
1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1 /N@5
InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end  gsave
1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 463 5141 a 463
5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@1 /N@6
InitNC {  tx@Dict begin /r 5.69054 def /Lineto { Arcto } def 0  setlinejoin
false pop end /AngleA 0. def /AngleB 180. def /ArmA 10.0 def /ArmB
10.0 def /ArmTypeA 0 def /ArmTypeB 0 def 0 NCDiag  } if end  gsave
1.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@2 /N@3
InitNC { NCLine  } if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@3 /N@4
InitNC { NCLine  } if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463
5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@4 /N@5
InitNC { NCLine  } if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5141 a 463 5141 a
tx@Dict begin gsave STV newpath /ArrowA { BeginArrow 1.  1.  scale
 false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  moveto
} def /ArrowB { BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1.
.setopacityalpha  Arrow  EndArrow  } def  1.0 SLW 0  setgray  /ArrowA
{ BeginArrow 1.  1.  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha
 Arrow  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 
false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow  EndArrow  } def
 /NCLW CLW def tx@NodeDict begin 0.0 0.0 neg 0.0 0.0 0 0 /N@5 /N@6
InitNC { NCLine  } if end  gsave 1.0 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore  grestore end
 463 5141 a 0
TeXcolorgray 0 TeXcolorgray 1477 5369 a Ff(Pro)s(ceso)g(del)g(testing)p
0 TeXcolorgray -128 5857 4016 5 v -128 5977 a(Jan)m(uary)h(17,)e(2020)
1231 b(10)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray
eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
2479 -114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fb(4.1)136
b(Plani\034cacion)45 b(y)g(con)l(trol)-128 443 y(4.2)136
b(Analisis)45 b(y)g(dise\361o)-128 657 y(4.3)136 b(Implemen)l(tacion)46
b(y)f(ejecucion)-128 870 y(4.4)136 b(Ev)-7 b(aluacion)45
b(de)g(criterios)h(de)f(salida)h(y)f(rep)t(ortes)-128
1084 y(4.5)136 b(A)l(ctividades)45 b(de)g(cierre)p 0
TeXcolorgray -128 5857 V -128 5977 a Ff(Jan)m(uary)34
b(17,)e(2020)1231 b(11)1388 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(5)162
b(Mo)t(delos)52 b(de)h(Desarrollo)f(de)h(Soft)l(w)l(are)p
0 TeXcolorgray -128 5857 V -128 5977 a Ff(Jan)m(uary)34
b(17,)e(2020)1231 b(12)1388 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
2479 -114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(6)162
b(Dise\361o)52 b(de)h(Pruebas)p 0 TeXcolorgray -128 5857
V -128 5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231 b(13)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(7)162
b(T)-9 b(\351cnicas)52 b(Est\341ticas)p 0 TeXcolorgray
-128 5857 V -128 5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231
b(14)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
2479 -114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(8)162
b(T)-9 b(\351cnicas)52 b(Din\341micas)p 0 TeXcolorgray
-128 5857 V -128 5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231
b(15)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(9)162
b(Criterios)50 b(para)j(seleccionar)d(el)i(dise\361o)e(apropiado)i(de)g
(caso)115 412 y(de)h(prueba)p 0 TeXcolorgray -128 5857
V -128 5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231 b(16)1388
b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
2479 -114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(10)161
b(Creaci\363n)53 b(de)g(Casos)f(de)i(Prueba)p 0 TeXcolorgray
-128 5857 V -128 5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231
b(17)1388 b(Norman)32 b(R)m(uiz)p 0 TeXcolorgray eop
end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(11)161
b(Resumen)53 b(Curso)p 0 TeXcolorgray -128 5857 V -128
5977 a Ff(Jan)m(uary)34 b(17,)e(2020)1231 b(18)1388 b(Norman)32
b(R)m(uiz)p 0 TeXcolorgray eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
2479 -114 a Ff(Man)m(ual)33 b(T)-8 b(raining)33 b(de)g(Analista)g(QC)p
-128 -74 4016 5 v 0 TeXcolorgray -128 229 a Fe(12)161
b(P)l(ara)55 b(rendir)d(el)h(ISTQB)h(F)-13 b(oundation)52
b(Lev)l(el)p 0 TeXcolorgray -128 5857 V -128 5977 a Ff(Jan)m(uary)34
b(17,)e(2020)1231 b(19)1388 b(Norman)32 b(R)m(uiz)p 0
TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
